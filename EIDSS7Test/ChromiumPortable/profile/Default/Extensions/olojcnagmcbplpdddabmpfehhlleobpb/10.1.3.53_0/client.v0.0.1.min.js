webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _assign = __webpack_require__(0);

exports.actionCreator = actionCreator;
exports.unregister = unregister;
exports.register = register;

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _objectAssignDeep = __webpack_require__(15);

var _objectAssignDeep2 = _interopRequireDefault(_objectAssignDeep);

var _ActionTypes = __webpack_require__(30);

var ActionTypes = _interopRequireWildcard(_ActionTypes);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Consts = __webpack_require__(1);

var _Utils = __webpack_require__(2);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _FilesService = __webpack_require__(48);

var _FilesService2 = _interopRequireDefault(_FilesService);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _ApiAdapter = __webpack_require__(28);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else {
        obj[key] = value;
    }return obj;
}

function actionCreator(behaviour) {
    var retFunc = void 0;
    var self = this;

    switch (behaviour.do) {
        case ActionTypes.REDIRECT_CURRENT_TAB:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if (behaviour.url && behaviour.url !== 'disable' && (cond === null || cond && cond.check(args))) {
                    var url = behaviour.url === 'chrome-search://local-ntp/local-ntp.html' && _BrowserService2.default.getBrowserFlavor('short') === 'ff' ? 'about:newtab' : behaviour.url;
                    _BrowserService2.default.getCurrentTabInfo(function (tab) {
                        _BrowserService2.default.updateTab(tab.id, url);
                    });
                }
            };
            break;
        case ActionTypes.GET_SEARCH_SUGGESTIONS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var suggestUrlType = args.suggestUrlType || behaviour.suggestUrlType || false;
                var suggestUrl = self.search.getSuggestParam(self.search.getEngineIdByIndex(self.search.getTempOrCurrentSearchEngineIndex()), suggestUrlType, 'url');
                if (!suggestUrl) return;
                var query = (args.text || '').trim();
                if (query === self.state.query) {
                    return;
                }
                var resetSuggest = function resetSuggest() {
                    self.setState({
                        rows: [],
                        reset: true
                    });
                };
                if (!query) {
                    resetSuggest();
                    return;
                }
                if (behaviour.minTermLength && query.length < behaviour.minTermLength) {
                    self.setState({ query: '' });
                    resetSuggest();
                    return;
                }
                if (behaviour.maxTermLength && query.length > behaviour.maxTermLength) {
                    if (query.slice(0, behaviour.maxTermLength - 1) === self.state.query && self.state.rowsHidden) {
                        return;
                    }
                    query = query.slice(0, behaviour.maxTermLength - 1);
                }
                self.setState({ query: query });
                if (args.text === '') {
                    self.setState({ rows: [] });
                    return;
                }
                var locale = _BrowserService2.default.locale2();
                var url = (0, _Utils.sprintf)(suggestUrl, { searchTerms: query, lang: locale, country: '' });
                var maxItems = behaviour.maxItems || 5;
                _HttpService2.default.doGetJSON(url, undefined, undefined, {}).then(function (json) {
                    json = self.search.parseSuggestByConfig(json, self.search.getSuggestParam(false, suggestUrlType, 'config'));
                    if (json[0].indexOf(query) > -1) {
                        self.setState({
                            rows: json[1].slice(0, maxItems),
                            selected: -1,
                            rowsHidden: false
                        });
                    }
                }).catch(function () {
                    resetSuggest();
                });
            };
            break;
        case ActionTypes.GET_MULTI_SEARCH_SUGGESTIONS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var query = (args.text || '').trim();
                if (query === self.state.query) {
                    return;
                }
                var resetSuggest = function resetSuggest() {
                    self.setState({
                        rows: [],
                        reset: true
                    });
                };
                if (!query) {
                    resetSuggest();
                    return;
                }
                if (behaviour.minTermLength && query.length < behaviour.minTermLength) {
                    self.setState({ query: '' });
                    resetSuggest();
                    return;
                }
                if (behaviour.maxTermLength && query.length > behaviour.maxTermLength) {
                    query = query.slice(0, behaviour.maxTermLength - 1);
                    if (query === self.state.query && self.state.rowsHidden) {
                        return;
                    }
                }
                self.setState({ query: query });
                var searchTermPh = ['{{searchTerm}}'];
                var encodedQuery = encodeURIComponent(query);
                var apiConfig = behaviour.apiConfig;
                var defaultTracking = behaviour.defaultSearchSuggestTracking;
                for (var p in searchTermPh) {
                    var ph = searchTermPh[p];
                    apiConfig = (0, _Utils.replaceInObject)(apiConfig, ph, encodedQuery);
                    defaultTracking = (0, _Utils.replaceInObject)(defaultTracking, ph, encodedQuery) || false;
                }
                var initApiAdaptersManager = function initApiAdaptersManager(existingList) {
                    (0, _ApiAdapter.apiAdaptersManager)(apiConfig, existingList).then(function (list) {
                        if (self.state.query === query) {
                            self.setState({
                                rows: list,
                                selected: -1,
                                rowsHidden: false
                            });
                        } else {
                            resetSuggest();
                        }
                    }).catch(function (error) {
                        resetSuggest();
                    });
                };
                if (!behaviour.disableDefaultSuggest) {
                    var suggestUrlType = args.suggestUrlType || behaviour.suggestUrlType || false;
                    var defaultSuggestUrl = self.search.getSuggestParam(self.search.getEngineIdByIndex(self.search.getTempOrCurrentSearchEngineIndex()), suggestUrlType, 'url');
                    defaultSuggestUrl = defaultSuggestUrl.replace('{searchTerms}', query);
                    _HttpService2.default.doGetJSON(defaultSuggestUrl, undefined, undefined, {}).then(function (json) {
                        var formattedList = {};
                        if (json) {
                            var res = self.search.parseSuggestByConfig(json, self.search.getSuggestParam(false, suggestUrlType, 'config'));
                            formattedList = { $default$: [] };
                            for (var i in res[1]) {
                                var val = res[1][i];
                                formattedList.$default$.push((0, _Utils.replaceInObject)({
                                    text: val,
                                    tracking: defaultTracking
                                }, '{{text}}', val));
                            }
                        }
                        initApiAdaptersManager(formattedList);
                    }).catch(function () {
                        initApiAdaptersManager();
                    });
                } else {
                    initApiAdaptersManager();
                }
            };
            break;
        case ActionTypes.CHANGE_SELECTED:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var selected = void 0;

                if (args.keyCode === _Consts.KEY_DOWN_CODE && self.state.selected > 0) {
                    selected = --self.state.selected;
                } else if (args.keyCode === _Consts.KEY_UP_CODE && self.state.selected + 1 < self.state.rows.length) {
                    selected = ++self.state.selected;
                }

                if (this.selected != selected) {
                    self.setState({
                        selected: selected
                    });
                    _EventsService2.default.trigger(_Consts.AUTO_SUGGEST_SELECTED_CHANGE_EVENT, [_assign({}, args, self.state.rows[selected], { searchObject: self.state.rows[selected] })]);
                }
            };
            break;
        case ActionTypes.DEBUG:
            retFunc = function retFunc(args, args2) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                _LoggerService2.default.debug('~~~~~DEBUG-START~~~~~');
                _LoggerService2.default.debug('args: ' + JSON.stringify(args));
                _LoggerService2.default.debug('args2: ' + JSON.stringify(args2));
                _LoggerService2.default.debug('behave: ' + JSON.stringify(behaviour));
                _LoggerService2.default.debug('~~~~~DEBUG-END~~~~~');
            };
            break;
        case ActionTypes.BROWSE_FILES:
            retFunc = function retFunc(args) {
                var f = document.createElement('input');
                f.style.display = 'none';
                f.type = 'file';
                f.name = 'file';
                var accept = behaviour.accept || args.accept || false;
                if (accept) f.accept = accept;

                f.addEventListener('change', function () {
                    if (behaviour.event) {
                        _EventsService2.default.trigger(behaviour.event, [_assign({}, { files: this.files })]);
                    }
                });

                f.click();
            };
            break;
        case ActionTypes.VALIDATE_FILES_TYPES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var files = false;
                var deepFiles = behaviour.deepFiles || args.deepFiles || false;
                if (deepFiles) {
                    files = (0, _Utils.getDeepValueFromObj)(args, deepFiles);
                }
                files = files || args.files;
                if (!files || (typeof files === 'undefined' ? 'undefined' : _typeof(files)) !== 'object' || !files.length) return;
                var allowedTypes = behaviour.allowedTypes ? behaviour.allowedTypes : false;
                var maxAllowedSize = behaviour.maxAllowedSize ? behaviour.maxAllowedSize : false;
                var maxAllowedLength = behaviour.maxAllowedLength ? behaviour.maxAllowedLength : false;
                var events = behaviour.events ? behaviour.events : {
                    'success': 'VALIDATE_FILE_SUCCESS',
                    'size': 'VALIDATE_FILE_SIZE_FAIL',
                    'type': 'VALIDATE_FILE_TYPE_FAIL',
                    'amount': 'VALIDATE_FILE_AMOUNT_FAIL'
                };

                if ((!allowedTypes || !Array.isArray(allowedTypes)) && !maxAllowedSize && !maxAllowedLength) {
                    _EventsService2.default.trigger(events['success'], [_assign({}, args, {
                        fileName: files[0]['name'],
                        files: files
                    })], true);
                    return;
                }

                if (maxAllowedLength && files.length > maxAllowedLength) {
                    _EventsService2.default.trigger(events['amount'], [_assign({}, args, {
                        fileName: files[0]['name'],
                        files: files
                    })], true);
                    return;
                }

                var validate = true;
                for (var file in files) {
                    if (file !== 'length' && file !== 'item') {
                        if (allowedTypes) {
                            if (files[file].type && !allowedTypes.includes(files[file].type) || !files[file].type && !(0, _Utils.strEndsWith)(files[file].name, allowedTypes)) {
                                validate = false;
                                _EventsService2.default.trigger(events['type'], [_assign({}, args, {
                                    fileName: files[0]['name'],
                                    files: files
                                })], true);
                            }
                        }
                        if (maxAllowedSize && validate) {
                            if (files[file].size > maxAllowedSize) {
                                validate = false;
                                _EventsService2.default.trigger(events['size'], [_assign({}, args, {
                                    fileName: files[0]['name'],
                                    files: files
                                })], true);
                            }
                        }

                        if (!validate) break;
                    }
                }
                if (validate) _EventsService2.default.trigger(events['success'], [_assign({}, args, {
                    fileName: files[0]['name'],
                    files: files
                })], true);
            };
            break;
        case ActionTypes.HIDE_WHEN_CLICKED_OUTSIDE:
            retFunc = function retFunc(args) {
                if (selfIsMounted(self) && !ReactDOM.findDOMNode(self).contains(args.target)) {
                    if (self.state && self.state.rows) {
                        self.setState({ rows: [], selected: -1, rowsHidden: true });
                    } else if (self.state && self.state.isOpen) {
                        self.setState({ isOpen: false });
                    }
                    if (self.state && self.props.config.hasOwnProperty('hide')) {
                        self.props.config.hide = true;
                        if (self.mounted) self.forceUpdate();
                    }
                }
            };
            break;
        case ActionTypes.SET_SEARCH_ENGINE:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c, _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE)) : null;

                if ((cond === null || cond && cond.check(args)) && args.engineId) {
                    var setEngine = function setEngine() {
                        search.setCurrentSearchEngine(args.engineId);
                        _EventsService2.default.trigger(_Consts.SEARCH_ENGINE_CHANGED, [args]);
                    };
                    var search = _ServiceFactory2.default.get(_Consts.SEARCH_SERVICE);
                    if (search.isEnginePersist(args.engineId)) {
                        if (args.engineId != pref.get(_Consts.SELECTED_SEARCH_ENGINE_KEY)) {
                            setEngine();
                        }
                    } else {
                        if (args.engineId != pref.get(_Consts.TEMP_SEARCH_ENGINE_KEY)) {
                            setEngine();
                        }
                    }
                }
            };
            break;
        case ActionTypes.SET_CHROME_POPUP:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    if (behaviour.hasOwnProperty('html')) {
                        _BrowserService2.default.setBrowserActionPopUp(behaviour.html, behaviour.tabId ? parseInt(behaviour.tabId) : null);
                        _EventsService2.default.trigger('SET_CHROME_POPUP_DONE');
                    }
                }
            };
            break;
        case ActionTypes.PUBLISH_EVENTS_WHEN_CLICKED_OUTSIDE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                try {
                    if (behaviour.events && selfIsMounted(self) && (!self.props.config.hide || !self.state.hide) && !ReactDOM.findDOMNode(self).contains(args.target)) {
                        for (var i in behaviour.events) {
                            _EventsService2.default.trigger(behaviour.events[i].name, [_assign(behaviour.events[i])]);
                        }
                    }
                } catch (e) {
                    _LoggerService2.default.track('error', 'PUBLISH_EVENTS_WHEN_CLICKED_OUTSIDE: ' + e.message);
                }
            };
            break;
        case ActionTypes.CHANGE_BACKGROUND:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                self.state = self.state || {};
                var image = args.image || behaviour.image || false;
                var color = args.color || behaviour.color || false;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                if (args.lsImage || behaviour.lsImage) {
                    image = pref.get(args.lsImage || behaviour.lsImage);
                }
                if (args.lsColor || behaviour.lsColor) {
                    image = pref.get(args.lsColor || behaviour.lsColor);
                }
                if (image) {
                    color = color || 'none';
                    image = behaviour.style && (0, _Utils.isStr)(behaviour.style[image]) ? behaviour.style[image] : image;
                    var newStyle = behaviour.style && (0, _Utils.isObject)(behaviour.style[image]) ? behaviour.style[image] : {};

                    var imageString = (0, _Utils.imageStandard)(image);
                    var source = self.state.style || self.props.config.style || {};
                    if (source.backgroundColor === color && source.backgroundImage === imageString) {
                        return;
                    }

                    self.setState({
                        style: _assign({}, self.state.style || {}, newStyle, { backgroundImage: imageString, backgroundColor: color })
                    });
                } else if (color) {
                    self.setState({
                        style: _assign({}, self.state.style || {}, { backgroundImage: 'none', backgroundColor: color })
                    });
                }
            };
            break;
        case ActionTypes.PERSIST_BACKGROUND:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;

                var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                if (args.image) {
                    prefService.set(_Consts.BACKGROUND_IMAGE_KEY, args.image);
                    prefService.set(_Consts.BACKGROUND_COLOR_KEY, '');
                } else if (args.color) {
                    prefService.set(_Consts.BACKGROUND_COLOR_KEY, args.color);
                    prefService.set(_Consts.BACKGROUND_IMAGE_KEY, '');
                }
            };
            break;
        case ActionTypes.RELOAD_BACKGROUND:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond && cond.check(args)) {
                    var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var props = {};
                    props.color = prefService.get(_Consts.BACKGROUND_COLOR_KEY);
                    props.image = prefService.get(_Consts.BACKGROUND_IMAGE_KEY);

                    _EventsService2.default.trigger(ActionTypes.CHANGE_BACKGROUND, [props]);
                }
            };
            break;
        case ActionTypes.SET_BORDER_GRAY:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                if (args.color) {
                    self.setState({
                        style: _assign({}, self.state ? self.state.style : {}, { borderColor: 'lightgray' })
                    });
                } else if (args.image) {
                    var previousStyle = _assign({}, self.state ? self.state.style : {});

                    if (previousStyle.hasOwnProperty('borderColor')) {
                        delete previousStyle['borderColor'];
                    }

                    self.setState({ style: previousStyle });
                }
                if (self.mounted) self.forceUpdate();
            };
            break;
        case ActionTypes.CHANGE_COLOR_TO_GRAY:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                if (args.color === '#ffffff') {
                    self.setState({ style: _assign({}, self.state ? self.state.style : {}, { color: '#8A8A8A' }) });
                } else if (/tile-bg\.png$/.test(args.image)) {
                    self.setState({ style: _assign({}, self.state ? self.state.style : {}, { color: '#555' }) });
                } else {
                    var unselectedStyle = { color: self.props.config.style.color };
                    self.setState({ style: _assign({}, self.state ? self.state.style : {}, unselectedStyle) });
                }
            };
            break;
        case ActionTypes.INVERT_IMAGE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                if (args.color === '#ffffff') {
                    self.setState({
                        style: _assign({}, self.state ? self.state.style : {}, {
                            'WebkitFilter': 'invert(100%)',
                            filter: 'invert(100%)'
                        })
                    });
                } else if (/tile-bg\.png$/.test(args.image)) {
                    self.setState({
                        style: _assign({}, self.state ? self.state.style : {}, {
                            'WebkitFilter': 'invert(100%)',
                            filter: 'invert(100%)'
                        })
                    });
                } else {
                    var unselectedStyle = {
                        filter: self.props.config.style.filter ? self.props.config.style.filter : 'invert(0%)',
                        'WebkitFilter': self.props.config.style.filter ? self.props.config.style.filter : 'invert(0%)'
                    };
                    self.setState({ style: _assign({}, self.state ? self.state.style : {}, unselectedStyle) });
                }
            };
            break;
        case ActionTypes.SET_STATE:
            retFunc = function retFunc(args) {
                args = args || {};
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                var state = behaviour.state || args.state;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var mergeStates = behaviour.mergeStates || false;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    if (behaviour.dynamic && Array.isArray(behaviour.dynamic)) {
                        state = JSON.stringify(state);
                        for (var elem in behaviour.dynamic) {
                            var obj = behaviour.dynamic[elem];
                            var regex = new RegExp(obj['ph'], 'g');
                            var str = obj.source === 'pref' ? pref.get(obj['key']) : obj.source === 'self' ? self : args[obj['key']];
                            if (obj['deepValue']) {
                                str = (0, _Utils.getDeepValueFromObj)(str, obj['deepValue']);
                            }
                            state = state.replace(regex, str);
                        }
                        state = JSON.parse(state);
                    }
                    var funcs = behaviour.phFunctions || behaviour.placeHolderFunctions;
                    if (Array.isArray(funcs)) {
                        try {
                            state = (0, _Utils.placeHolderFunctions)(state, funcs, {}, self);
                        } catch (e) {}
                    }
                    if (self.mounted) {
                        if (mergeStates) {
                            self.setState((0, _objectAssignDeep2.default)({}, self.state, state));
                        } else {
                            self.setState(_assign({}, state));
                        }
                    }
                } else if (behaviour.ignorable) {
                    return;
                } else {
                    var unselectedState = {};
                    for (var key in behaviour.state) {
                        unselectedState[key] = _typeof(behaviour.state[key]) === 'object' ? {} : undefined;
                    }
                    self.setState(_assign({}, unselectedState));
                }
            };
            break;
        case ActionTypes.SET_CONFIG:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    var config = behaviour.config || args.config || {};
                    var assignMethod = behaviour.method === 'deepAssign' ? _objectAssignDeep2.default : _assign;
                    var oldConfig = self.props.config;
                    var newConfig = assignMethod({}, self.props.config, config);
                    if (!(0, _Utils.areObjectsEqual)(newConfig, oldConfig)) {
                        assignMethod(self.props.config, config || {});
                        if (self.mounted) self.setState(self.state);
                        var event = args.doneEvent || behaviour.doneEvent || 'SET_CONFIG_DONE_' + self.props.config.id;
                        _EventsService2.default.trigger(event, [newConfig]);
                    }
                }
            };
            break;
        case ActionTypes.SELECTIVE_CONFIG_RESET:
            retFunc = function retFunc(args) {
                args = args || {};
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    var keysToReset = behaviour.keysToReset && !(0, _Utils.isObjectEmpty)(behaviour.keysToReset) ? behaviour.keysToReset : false;
                    var newState = !keysToReset ? self.props.config : {};
                    if (keysToReset) {
                        for (var i in keysToReset) {
                            var key = keysToReset[i];
                            newState[key] = self.props.config[key];
                        }
                    }

                    self.setState(newState);
                }
            };
            break;
        case ActionTypes.RELOAD_IFRAMES:
            retFunc = function retFunc(args) {
                args = args || {};
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    if (typeof self.updateIframes !== 'function') return;
                    self.updateIframes(args.state || {});
                }
            };
            break;
        case ActionTypes.UPDATE_TEXT:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;

                var argsKey = behaviour.argsKey ? behaviour.argsKey : 'text';

                var text = behaviour.text ? behaviour.text : args && args[argsKey] ? args[argsKey] : '';
                self.setState(_assign({}, { 'text': text }));
            };
            break;
        case ActionTypes.REMOVE_FILES:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var files = behaviour.files && Array.isArray(behaviour.files) ? behaviour.files : false;
                if (!files) return;
                for (var file in files) {
                    _FilesService2.default.deleteFileByName(files[file]);
                }
            };
            break;
        case ActionTypes.STORE_FILE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                if (!args.files || _typeof(args.files) !== 'object' || !args.files.length) return;
                var files = args.files;
                if (behaviour.fileName && behaviour.fileLocation) {
                    var fn = behaviour.fileName;
                    _FilesService2.default.addFiles(_defineProperty({}, fn, files[behaviour.fileLocation]));
                    if (behaviour.event) {
                        _EventsService2.default.trigger(behaviour.event, [files[behaviour.fileLocation]]);
                    }
                } else {
                    for (var file in files) {
                        if (file !== 'length' && file !== 'item') {
                            var _fn = files[file]['name'];
                            var f = files[file];
                            _FilesService2.default.addFiles(_defineProperty({}, _fn, f));
                        }
                    }
                    if (behaviour.event) {
                        _EventsService2.default.trigger(behaviour.event, [{ files: JSON.stringify(files) }]);
                    }
                }
            };
            break;
        case ActionTypes.UPLOAD_FILE_TO_CONVERT_OLD:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var fileName = behaviour.fileName || args.fileName || false;
                if (!fileName) return;
                var convertType = behaviour.convertType ? behaviour.convertType : args && args.convertType ? args.convertType : false;
                var convertKey = behaviour.convertKey ? behaviour.convertKey : '8a7d1e52cae34813c62ead32c2778aac';
                var convertUrl = behaviour.convertUrl ? behaviour.convertUrl : 'https://api2.online-convert.com' + '/jobs';
                var retries = behaviour.retries ? behaviour.retries : 6;
                if (!convertType) return;
                convertType = convertType.toLowerCase();
                var file = _FilesService2.default.getFileByName(fileName);
                var events = behaviour.events ? behaviour.events : {
                    'success': 'FILE_CONVERT_SUCCEEDED',
                    'failure': 'FILE_CONVERT_FAILED',
                    'noFile': 'FILE_CONVERT_NOFILE',
                    'start': 'FILE_CONVERT_STARTED'
                };
                if (!file) {
                    _EventsService2.default.trigger(events['noFile']);
                    return;
                }
                _EventsService2.default.trigger(events['start']);

                var headers = ['x-oc-api-key', convertKey, 'content-type', 'application/json', 'cache-control', 'no-cache'];
                var data = { 'conversion': [{ 'target': convertType }] };
                var jobId = false;
                var abortMsg = behaviour.abortMsg || false;
                var abort = false;
                if (abortMsg) {
                    var abortListener = function abortListener(event) {
                        for (var msg in abortMsg) {
                            if (event.data[msg] === abortMsg[msg]) {
                                abort = true;
                                if (abort) {
                                    window.removeEventListener('message', abortListener, false);
                                    break;
                                }
                            }
                        }
                    };
                    window.addEventListener('message', abortListener);
                }

                getJobId();

                function getJobId() {
                    if (abort) {
                        return;
                    }
                    _HttpService2.default.doPost(convertUrl, data, null, uploadFile, failure, null, headers, null, null);
                }

                function uploadFile(xhr) {
                    if (abort) {
                        return;
                    }
                    var res = JSON.parse(xhr.response);
                    jobId = res['id'];
                    var server = res['server'];
                    var uploadUrl = server + '/upload-file/' + jobId;
                    var form = new FormData();
                    form.append('file', file);
                    var uploadHeaders = ['x-oc-api-key', convertKey, 'cache-control', 'no-cache'];
                    _HttpService2.default.doPost(uploadUrl, form, null, getJobInfo, failure, null, uploadHeaders, 'multipart/form-data', true);
                }

                function getJobInfo(result, cb) {
                    if (abort) {
                        return;
                    }
                    var infoUrl = convertUrl + '/' + jobId;
                    _HttpService2.default.doGet(infoUrl, null, jobInfoHandler, failure, null, null, headers);

                    function jobInfoHandler(res) {
                        var responses = JSON.parse(res.responseText);
                        if (responses['status']['code'] !== 'completed' && retries > 0) {
                            setTimeout(function () {
                                retries = retries - 1;
                                getJobInfo(result, downloadConvertedFile);
                            }, 10000);
                        } else {
                            if (retries === 0) {
                                failure();
                            }
                            if (typeof cb === 'function') {
                                cb(res);
                            }
                        }
                    }
                }

                function downloadConvertedFile(xhr) {
                    if (abort) {
                        return;
                    }
                    var result = JSON.parse(xhr.response);
                    if (result['status']['code'] !== 'completed') {
                        failure();
                    }
                    var downloadUrl = result['output'][0]['uri'];
                    (0, _Utils.downloadFile)(downloadUrl, function () {
                        _EventsService2.default.trigger(events['success']);
                    });
                }

                function failure(res) {
                    _EventsService2.default.trigger(events['failure']);
                }
            };
            break;
        case ActionTypes.UPLOAD_FILE_TO_CONVERT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var fileName = behaviour.fileName || args.fileName || false;
                if (!fileName) return;
                var convertType = behaviour.convertType || args.convertType || false;
                if (!convertType) return;
                var file = _FilesService2.default.getFileByName(fileName);
                var events = behaviour.events || {};
                events = _assign({
                    'success': 'FILE_CONVERT_SUCCEEDED',
                    'failure': 'FILE_CONVERT_FAILED',
                    'noFile': 'FILE_CONVERT_NOFILE',
                    'start': 'FILE_CONVERT_STARTED'
                }, events);
                if (!file) {
                    _EventsService2.default.trigger(events['noFile']);
                    return;
                }
                var convertKey = behaviour.convertKey || '08cd7b5c13da4a64e0fdc5cfab6c356ccb321dda';
                var convertUrl = behaviour.convertUrl || 'https://api.zamzar.com/v1/jobs/';
                var getFileUrl = behaviour.getFileUrl || 'https://api.zamzar.com/v1/files/{{fileId}}/content';
                var retries = behaviour.retries || 12;
                convertType = convertType.toLowerCase();
                var authKey = 'Basic ' + btoa(convertKey + ':');

                _EventsService2.default.trigger(events['start']);

                var headers = ['Authorization', authKey];
                var jobId = false;
                var abortMsg = behaviour.abortMsg || false;
                var abort = false;
                if (abortMsg) {
                    var abortListener = function abortListener(event) {
                        for (var msg in abortMsg) {
                            if (event.data[msg] === abortMsg[msg]) {
                                abort = true;
                                if (abort) {
                                    window.removeEventListener('message', abortListener, false);
                                    break;
                                }
                            }
                        }
                    };
                    window.addEventListener('message', abortListener);
                }

                var startConvertJob = function startConvertJob() {
                    if (abort) return;
                    var form = new FormData();
                    form.append('source_file', file);
                    form.append('target_format', convertType);
                    _HttpService2.default.doPost(convertUrl, form, 'json', handleInitRes, failure, null, headers, 'multipart/form-data', true);
                };
                var handleInitRes = function handleInitRes(res) {
                    if (abort) return;
                    if (!(0, _Utils.isObject)(res) || res.status !== 'initialising' || !res.id) {
                        failure();
                        return;
                    }
                    jobId = res.id;
                    //Timeout will increase the chances the job is ready on the first try
                    setTimeout(function () {
                        getJobInfo(jobId);
                    }, 500);
                };
                var getJobInfo = function getJobInfo(id) {
                    if (abort) return;

                    var infoUrl = convertUrl + id;
                    _HttpService2.default.doGet(infoUrl, 'json', jobInfoHandler, failure, null, null, headers);

                    function jobInfoHandler(res) {
                        if (retries > 0) {
                            if (res['status'] === 'successful') {
                                var fileId = (0, _Utils.isArray)(res['target_files']) && (0, _Utils.isObject)(res['target_files'][0]) && res['target_files'][0]['id'] ? res['target_files'][0]['id'] : false;
                                if (!fileId) {
                                    failure();
                                } else {
                                    getDownloadUrl(fileId);
                                }
                            } else if (res['status'] === 'failed') {
                                failure();
                            } else {
                                --retries;
                                setTimeout(function () {
                                    getJobInfo(id);
                                }, 5000);
                            }
                        } else {
                            failure();
                        }
                    }
                };
                var getDownloadUrl = function getDownloadUrl(fileId) {
                    var downloadUrl = getFileUrl.replace('{{fileId}}', fileId);
                    var extractUrl = function extractUrl(res) {
                        if (!res.responseURL) failure();else downloadConvertedFile(res.responseURL);
                    };
                    _HttpService2.default.doGet(downloadUrl, null, extractUrl, extractUrl, null, null, headers);
                };
                var downloadConvertedFile = function downloadConvertedFile(url) {
                    if (abort) return;
                    (0, _Utils.downloadFile)(url, function () {
                        _EventsService2.default.trigger(events['success']);
                    });
                };
                var failure = function failure() {
                    _EventsService2.default.trigger(events['failure']);
                };

                startConvertJob();
            };
            break;
        case ActionTypes.SEND_MESSAGE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var messagesArr = behaviour.messages || false;
                if (!messagesArr || !Array.isArray(messagesArr)) return;
                for (var msg in messagesArr) {
                    window.postMessage(messagesArr[msg], '*');
                }
            };
            break;
        case ActionTypes.LOCK_SETTINGS:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if ((cond === null || cond && cond.check(args)) && behaviour.keys) {
                    try {
                        var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                        var value = behaviour.unlock && behaviour.unlock === true ? undefined : true;
                        for (var i = 0; i < Object.keys(behaviour.keys).length; i++) {
                            pref.set(behaviour.keys[i] + '_locked', value);
                        }
                    } catch (e) {
                        _LoggerService2.default.track('error', 'LOCK_SETTINGS90: ' + e.message);
                    }
                }
            };
            break;
        case ActionTypes.SET_SELECTED:
            retFunc = function retFunc(args, sender) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    var selectedId = sender && sender.id ? sender.id : behaviour.selectedId ? behaviour.selectedId : args && args.selectedId ? args.selectedId : '';
                    if (self.props.config.id === selectedId) {
                        self.setState({
                            style: _assign({}, self.state ? self.state.style : {}, self.props.config.selectedStyle),
                            selected: true
                        });
                    } else {
                        var unselectedStyle = {};

                        for (var selectedKey in self.props.config.selectedStyle) {
                            unselectedStyle[selectedKey] = self.props.config.style[selectedKey];
                        }

                        self.setState({
                            style: _assign({}, self.state ? self.state.style : {}, unselectedStyle),
                            selected: false
                        });
                    }
                }
            };
            break;
        case ActionTypes.SET_TEXT:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    self.setState({ text: args.text });

                    if (self.props.config.events && self.props.config.events.onSetText) {
                        var params = _assign({}, self.props.config.events.onSetText, {
                            text: args.text,
                            searchObject: args.searchObject || {}
                        });

                        _EventsService2.default.trigger(self.props.config.events.onSetText.name, [params, _assign({}, self.props.config)]);
                    }
                }
            };
            break;
        case ActionTypes.HIDE_OR_SHOW:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    self.props.config.hide = !self.props.config.hide;
                    if (self.mounted) self.forceUpdate();

                    _assign(args, behaviour.args || {});

                    if ((0, _Utils.isObject)(behaviour.events)) {
                        if (behaviour.events.hide && self.props.config.hide) {
                            _EventsService2.default.trigger(behaviour.events.hide, [args]);
                        } else if (behaviour.events.show && !self.props.config.hide) {
                            _EventsService2.default.trigger(behaviour.events.show, [args]);
                        }
                    }
                }

                _EventsService2.default.trigger(ActionTypes.HIDE_OR_SHOW_FINISHED, [args]);
            };
            break;
        case ActionTypes.HIDE_COMPONENT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                self.props.config.hide = true;
                if (self.mounted) self.setState({ hide: true });
            };
            break;
        case ActionTypes.SHOW_COMPONENT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var delay = behaviour.delay != undefined ? behaviour.delay : args && args.delay != undefined ? args.delay : pref.get(_Consts.POPUP_DELAY_KEY);
                var delayKey = behaviour.delayKey ? behaviour.delayKey : args.delayKey ? args.delayKey : false;
                if (delayKey) {
                    pref.set(delayKey, delay);
                }

                setTimeout(function () {
                    if (behaviour.stop) {
                        var key = behaviour.stop.key;
                        var value = pref.get(key);
                        if (value == behaviour.stop.val) {
                            return;
                        }
                    }

                    self.props.config.hide = false;
                    if (self.mounted) self.setState({ hide: false });
                }, delay);
                _EventsService2.default.trigger(ActionTypes.SHOW_COMPONENT, [_assign({}, self.props.config)]);
                _EventsService2.default.trigger(ActionTypes.SHOW_COMPONENT + '_' + self.props.config.id, [_assign({}, self.props.config)]);
            };
            break;
        case ActionTypes.SOFT_HIDE_COMPONENT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var delay = behaviour.delay || args.delay || 0;
                var state = { style: { display: 'none' } };
                setTimeout(function () {
                    if (self.mounted) self.setState((0, _objectAssignDeep2.default)({}, self.state, state));
                }, delay);
            };
            break;
        case ActionTypes.SOFT_SHOW_COMPONENT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var delay = behaviour.delay || args.delay || 0;
                var display = behaviour.display ? behaviour.display : args.display ? args.display : self.props.config.style && self.props.config.style.display ? self.props.config.style.display : 'block';
                var state = { style: { display: display } };
                setTimeout(function () {
                    if (self.mounted) self.setState((0, _objectAssignDeep2.default)({}, self.state, state));
                }, delay);
            };
            break;
        case ActionTypes.RELOAD_COMPONENT:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c, _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE)) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    if (self.mounted) self.forceUpdate();
                }
            };
            break;
        case ActionTypes.RECONSTRUCT_COMPONENT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c, _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE)) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    if (self.mounted) {
                        actionCreator.call(self, { do: ActionTypes.FORCE_REPLACE_CONFIG_FUNCTION })();
                        self.setState({ reconstruct: true });
                        var event = args.doneEvent || behaviour.doneEvent || 'RECONSTRUCT_COMPONENT_' + self.props.config.id;
                        _EventsService2.default.trigger(event);
                    }
                }
            };
            break;
        case ActionTypes.SET_PREFERENCES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var lsKey = behaviour.key || args.key || false;
                if (!lsKey) return;
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var val = behaviour.hasOwnProperty('val') ? behaviour.val : args.hasOwnProperty('val') ? args.val : '';
                var randomVal = args.randomVal || behaviour.randomVal || false;
                if (randomVal) {
                    val = (0, _Utils.randomStr)('0123456789', 9);
                }
                var source = args.source || behaviour.source || 'pref';
                var relevantKeys = [];
                var allKeys = [];
                if (behaviour.wildcard === true) {
                    allKeys = pref.getAllKeys();
                    allKeys.forEach(function (key) {
                        if (key.indexOf(lsKey) >= 0) {
                            relevantKeys.push(key);
                        }
                    });
                } else {
                    relevantKeys.push(lsKey);
                }

                relevantKeys.forEach(function (key) {
                    if (behaviour.op) {
                        var lsValue = pref.get(key) == undefined || pref.get(key) == '' ? 0 : parseFloat(pref.get(key));
                        switch (behaviour.op) {
                            case '*':
                                lsValue *= val;
                                pref.set(key, lsValue, source);
                                break;
                            case '-':
                                lsValue -= val;
                                pref.set(key, lsValue, source);
                                break;
                            case '/':
                                if (lsValue != 0) {
                                    lsValue /= val;
                                    pref.set(key, lsValue, source);
                                }
                                break;
                            case '+':
                                lsValue += val;
                                pref.set(key, lsValue, source);
                                break;
                        }
                    } else {
                        pref.set(key, val, source);
                    }
                });
            };
            break;
        case ActionTypes.PREFERENCES_DUPLICATOR:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var keyFrom = args.keyFrom || behaviour.keyFrom || false;
                var keyTo = args.keyTo || behaviour.keyTo || false;
                var source = args.source || behaviour.source || 'pref';
                if (keyFrom && keyTo) {
                    pref.set(keyTo, pref.get(keyFrom), source);
                }
            };
            break;
        case ActionTypes.MARK_TIME:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;

                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var key = args.key || behaviour.key || false;
                if (!key) return;
                var source = args.source || behaviour.source || 'pref';
                pref.markTime(key, source);
            };
            break;
        case ActionTypes.PREF_COUNT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;

                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var key = args.key || behaviour.key || false;
                if (!key) return;
                var source = args.source || behaviour.source || 'pref';
                pref.count(key, source);
            };
            break;
        case ActionTypes.INSERT_INPUT_TO_LOCALSTORAGE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                args = args || {};
                if (cond === null || cond.check(args, behaviour, self)) {
                    var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    if (args.stringId && (args.key || behaviour.key)) {
                        var key = behaviour.key ? behaviour.key : args.key;
                        pref.set(key, args.text);
                    }
                }
            };
            break;
        case ActionTypes.TOGGLE_PREFERENCE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    if (args != undefined) {
                        var newValue = args.active ? 0 : 1;
                        prefService.set(self.props.config.key, newValue);
                    }
                    _EventsService2.default.trigger(ActionTypes.TOGGLE_PREF_FINISHED);
                }
            };
            break;
        case ActionTypes.CHANGE_VISIBILITY:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    self.setState({ isOpen: !self.state.isOpen });
                    self.props.config.hide = self.props.config.hide ? false : true;
                    if (self.mounted) self.forceUpdate();
                }
            };
            break;
        case ActionTypes.HIDE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    self.setState({ isOpen: false });
                }
            };
            break;
        case ActionTypes.UPDATE_WEATHER:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                try {
                    var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var now = new Date().getTime();
                    var interval = 900000; //15min in ms;
                    var prefUnit = prefService.get(_Consts.UNITS_WEATHER_KEY);
                    var unit = args.unit ? args.unit : prefUnit === '{{UNITS_WEATHER}}' ? 'metric' : prefUnit;
                    var currentUnit = self.state.isCelsius ? 'metric' : 'imperial';
                    var changedUnit = unit !== currentUnit;
                    var prefData = prefService.get(_Consts.WEATHER_VALUE_KEY);
                    var prefDataTime = prefService.get(_Consts.WEATHER_TIME_KEY);
                    var updateSelf = function updateSelf(data) {
                        prefService.set(_Consts.UNITS_WEATHER_KEY, unit);
                        if (self.mounted && data.main) {
                            self.setState({
                                isCelsius: unit !== 'imperial',
                                temperature: Math.round(data.main.temp),
                                city: data.name,
                                icon: 'url(content/images/weather/' + data.weather[0].icon + '.svg)'
                            });
                        }
                    };
                    if (!changedUnit && (0, _Utils.isObject)(prefData) && prefDataTime && now - prefDataTime <= interval) {
                        updateSelf(prefData);
                    } else {
                        var geoData = prefService.get(_Consts.GEO_DATA_KEY);
                        if (!geoData[_Consts.LATITUDE_KEY] || !geoData[_Consts.LATITUDE_KEY]) return;
                        var geoData_url = 'http://api.openweathermap.org/data/2.5/weather?appid=' + _Consts.WEATHER_API_KEY + '&units=' + unit + '&lat=' + geoData[_Consts.LATITUDE_KEY] + '&lon=' + geoData[_Consts.LONGITUDE_KEY];
                        _HttpService2.default.doGetJSON(geoData_url).then(function (gdata) {
                            if (!gdata.main) return;
                            prefService.set(_Consts.WEATHER_VALUE_KEY, gdata);
                            prefService.set(_Consts.WEATHER_TIME_KEY, new Date().getTime());
                            prefService.set(_Consts.CITY_KEY, gdata.name);
                            updateSelf(gdata);
                        }).catch(function (reason) {
                            if (self.mounted) {
                                self.setState({
                                    isCelsius: prefService.get(_Consts.UNITS_WEATHER_KEY) !== 'imperial'
                                });
                            }
                        });
                    }
                } catch (e) {
                    _LoggerService2.default.track('error', 'UPDATE_WEATHER90: ' + e.message);
                }
            };
            break;
        case ActionTypes.TRACK:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond.check(args, behaviour, self))) return;
                var extra1 = {};
                if (args.clickLocation) {
                    extra1.click_location = args.clickLocation;
                }
                if (args.extra1) {
                    if ((0, _Utils.isObject)(args.extra1)) {
                        extra1 = _assign(extra1, args.extra1);
                    } else {
                        extra1 = { extra1: args.extra1 };
                    }
                }
                var extraData = {};
                var extraDataBuilder = behaviour.extraDataBuilder || args.extraDataBuilder || false;
                if ((0, _Utils.isObject)(extraDataBuilder) && (0, _Utils.isArray)(extraDataBuilder['placeHoldersFunctions']) && (0, _Utils.isObject)(extraDataBuilder['object'])) {
                    extraData = (0, _Utils.placeHolderFunctions)(extraDataBuilder['object'], extraDataBuilder['placeHoldersFunctions'], {}, {
                        self: self,
                        args: args
                    });
                } else if ((0, _Utils.isObject)(args.tracking)) {
                    _assign(extraData, args.tracking);
                }

                var tracking = _ServiceFactory2.default.get(_Consts.TRACKING_SERVICE);
                var eventType = args.eventType || behaviour.eventType || false;
                var delay = behaviour.delay || args.delay || 0;
                setTimeout(function () {
                    tracking.trackStatusEvent(eventType, _assign({}, extra1, behaviour.extra1), behaviour.extra2, function (res) {
                        var event = args.doneEvent || behaviour.doneEvent || eventType + '_TRACK_SENT';
                        _EventsService2.default.trigger(event, []);
                    }, null, null, extraData);
                }, delay);
            };
            break;
        case ActionTypes.UNINSTALL_EXTENSION:
            retFunc = function retFunc(args) {
                _BrowserService2.default.uninstall(function () {});
            };
            break;
        case ActionTypes.PARSE_URL:
            retFunc = function retFunc(args) {
                if (args.hash === '#ds1') {
                    _LoggerService2.default.debug(window.decodeURIComponent(window.location.href));
                }
            };
            break;
        case ActionTypes.OPEN_WEB_PAGE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                // This action can reciece params from both behavior and args. behavior is stronger than args.
                var tracking = _ServiceFactory2.default.get(_Consts.TRACKING_SERVICE);
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                var url = behaviour.url ? behaviour.url : args.url ? args.url : '';
                if ((cond === null || cond && cond.check(args, behaviour)) && url != '') {
                    // This action can recieve params from both behavior and args. behavior is stronger than args.
                    var windowFeatures = behaviour.windowFeatures || args.windowFeatures || '';
                    var center = behaviour.center || args.center || false;
                    var triggerEvent = behaviour.triggerEvent || args.triggerEvent || false;
                    var delay = behaviour.delay || args.delay || 0;
                    var delayKey = behaviour.delayKey || args.delayKey || false;
                    if (delayKey) {
                        pref.set(delayKey, delay);
                    }
                    var dynamicUrlBuilder = behaviour.dynamicUrlBuilder || args.dynamicUrlBuilder || false;
                    if ((0, _Utils.isObject)(dynamicUrlBuilder) && (0, _Utils.isArray)(dynamicUrlBuilder.placeHoldersFunctions)) {
                        url = (0, _Utils.placeHolderFunctions)(dynamicUrlBuilder.baseUrl, dynamicUrlBuilder.placeHoldersFunctions);
                    }
                    if (args.hasOwnProperty('dynamic') && args.hasOwnProperty('url_key') || behaviour.hasOwnProperty('dynamic') && behaviour.hasOwnProperty('url_key')) {
                        var urlKey = behaviour.url_key ? behaviour.url_key : args.url_key;
                        url = pref.get(urlKey) != undefined ? pref.get(urlKey) : url;
                    }

                    if (args.hasOwnProperty('localPage') || behaviour.hasOwnProperty('localPage')) {
                        var localPage = behaviour.localPage ? behaviour.localPage : args.localPage;
                        if (localPage !== 'false') url = _BrowserService2.default.getLocalUrl(localPage);
                    }

                    if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object') {
                        try {
                            if (windowFeatures.width) {
                                windowFeatures.width = parseInt(windowFeatures.width);
                            }
                            if (windowFeatures.height) {
                                windowFeatures.height = parseInt(windowFeatures.height);
                            }
                            if (center && windowFeatures.width && windowFeatures.height) {
                                var left = screen.width / 2 - windowFeatures.width / 2;
                                var top = screen.height / 2 - windowFeatures.height / 2;
                                windowFeatures['top'] = Math.round(top);
                                windowFeatures['left'] = Math.round(left);
                            }
                        } catch (e) {
                            tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE4@COMP', null, windowFeatures['top'] + '|' + windowFeatures['left']);
                        }
                    }
                    var currentTabId = void 0;
                    var removeTab = function removeTab() {
                        if (behaviour.removeNewTab || behaviour.removeCurrentTab) {
                            _BrowserService2.default.getLastFocusedWindow().then(function (windowDetails) {
                                _BrowserService2.default.getCurrentVisibleTab(windowDetails).then(function (tab) {
                                    if (behaviour.removeNewTab) _BrowserService2.default.removeTab(tab.id);
                                    if (behaviour.removeCurrentTab) {
                                        _BrowserService2.default.getCurrentTabInfo(function (currentTab) {
                                            _BrowserService2.default.removeTab(currentTab.id);
                                        });
                                    }
                                }).catch(function (e) {
                                    tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE3@COMP');
                                });
                            });
                        }
                    };

                    if (args && args.hasOwnProperty('updateTab') && args.updateTab == true || behaviour.hasOwnProperty('updateTab') && behaviour.updateTab == true) {
                        setTimeout(function () {
                            _BrowserService2.default.getLastFocusedWindow().then(function (windowDetails) {
                                _BrowserService2.default.getCurrentVisibleTab(windowDetails).then(function (tab) {
                                    currentTabId = tab.id;
                                    _BrowserService2.default.updateTab(currentTabId, url);
                                }).catch(function (e) {
                                    tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE2@COMP');
                                });
                            });
                            removeTab();
                        }, delay);
                    } else if (args && args.hasOwnProperty('createNewTab') && args.createNewTab == true || behaviour.hasOwnProperty('createNewTab') && behaviour.createNewTab == true) {
                        setTimeout(function () {
                            _BrowserService2.default.createTab(null, url);
                            removeTab();
                        }, delay);
                    } else if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object' && windowFeatures.hasOwnProperty('type')) {
                        windowFeatures['url'] = url;
                        setTimeout(function () {
                            _BrowserService2.default.openNewWindow(windowFeatures);
                            removeTab();
                        }, delay);
                    } else {
                        if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object') {
                            try {
                                windowFeatures = JSON.stringify(windowFeatures);
                                windowFeatures = windowFeatures.replace(/{/g, '').replace(/}/g, '').replace(/"/g, '').replace(/:/g, '=');
                            } catch (e) {
                                windowFeatures = '';
                                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE@COMP');
                            }
                        }
                        setTimeout(function () {
                            window.open(url, '', windowFeatures);
                            removeTab();
                        }, delay);
                    }

                    if (triggerEvent) {
                        for (var event in triggerEvent) {
                            _EventsService2.default.trigger(event, [_assign({}, self.props.config, args, triggerEvent[event])]);
                        }
                    }
                }
            };
            break;
        case ActionTypes.CHANGE_SSE_STATE:
            retFunc = function retFunc(args) {
                if (self.props.config.key !== 'secured_active') {
                    return;
                }

                var tracking = _ServiceFactory2.default.get(_Consts.TRACKING_SERVICE);
                var port = _BrowserService2.default.connectExternalFile('ws_feature_toggle');

                var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var active = prefService.get('secured_active');

                if (active) {
                    port.postMessage({ secureSearch: true });
                } else {
                    port.postMessage({ secureSearch: false });
                }

                tracking.trackStatusEvent('secured_set', '', 'active: ' + active);
            };
            break;
        case ActionTypes.CHANGE_FOOTER:
            retFunc = function retFunc(args) {
                if (args.image && /tile-bg\.png$/.test(args.image)) {
                    self.setState({
                        style: _assign({}, self.state ? self.state.style : {}, { backgroundColor: '#EEEEEE' })
                    });
                } else {
                    self.setState({
                        style: _assign({}, self.state ? self.state.style : {}, { backgroundColor: '' })
                    });
                }
            };
            break;
        case ActionTypes.SHOW_RATE_US_POPUP:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var timeKey = behaviour && behaviour.timeKey && behaviour.timeKey != 'false' ? behaviour.timeKey : false;
                    var interval = behaviour && behaviour.interval ? behaviour.interval : 0;

                    var currentTime = Math.floor(new Date().getTime() / 1000);
                    if (timeKey && interval) {
                        if (pref.get(timeKey) == undefined || currentTime - pref.get(timeKey) >= interval) {
                            pref.set(_Consts.RATE_US_SHOW_TIME, currentTime);
                            _EventsService2.default.trigger(_Consts.SHOW_FEEDBACK, [args]);
                        }
                    } else {
                        pref.set(_Consts.RATE_US_SHOW_TIME, currentTime);
                        _EventsService2.default.trigger(_Consts.SHOW_FEEDBACK, [args]);
                    }
                }
            };
            break;
        case ActionTypes.DO_ACTION_ON_INTERVAL:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                if (behaviour.interval) {
                    var interval = behaviour.interval;
                    if (behaviour.unit) {
                        if (behaviour.unit === 's') {
                            interval = interval * 1000;
                        } else if (behaviour.unit === 'm') {
                            interval = interval * 1000 * 60;
                        } else if (behaviour.unit === 'h') {
                            interval = interval * 1000 * 60 * 60;
                        }
                    }
                    setInterval(function () {
                        behaviour['do'] = behaviour.actionType;
                        actionCreator.call(self, behaviour)(args);
                        _LoggerService2.default.debug('DO_ACTION_ON_INTERVAL called: ' + behaviour.actionType);
                    }, interval);
                }

                if (behaviour.timeout) {
                    setTimeout(function () {
                        behaviour['do'] = behaviour.actionType;
                        actionCreator.call(self, behaviour)(args);
                        _LoggerService2.default.debug('DO_ACTION_ON_INTERVAL called: ' + behaviour.actionType);
                    }, behaviour.timeout);
                }
            };
            break;
        case ActionTypes.DO_ACTION_WHEN_CONDITION_MET:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond) {
                    var check = function check() {
                        _LoggerService2.default.debug('DO_ACTION_WHEN_CONDITION_MET check');
                        if (cond.check(args, behaviour, self)) {
                            behaviour['do'] = behaviour.actionType;
                            actionCreator.call(self, behaviour)(_assign({}, args, behaviour.args));
                            _LoggerService2.default.debug('DO_ACTION_WHEN_CONDITION_MET called: ' + behaviour.actionType);
                            return true;
                        }
                        return false;
                    };

                    if (!check()) {
                        var intervalID = setInterval(function () {
                            if (check()) clearInterval(intervalID);
                        }, behaviour.interval || 100);
                        setTimeout(function () {
                            clearInterval(intervalID);
                        }, behaviour.timeout || 5000);
                    }
                }
            };
            break;
        case ActionTypes.TRIGGER_EVENTS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var events = behaviour.events || args.events || false;
                    if (!events || (typeof events === 'undefined' ? 'undefined' : _typeof(events)) !== 'object') return;
                    if (behaviour.dynamic && Array.isArray(behaviour.dynamic)) {
                        events = JSON.stringify(events);
                        for (var elem in behaviour.dynamic) {
                            var obj = behaviour.dynamic[elem];
                            var regex1 = new RegExp('"' + obj['ph'] + '"', 'g');
                            var regex2 = new RegExp(obj['ph'], 'g');
                            var str = obj.source === 'pref' ? pref.get(obj['key']) : obj.source === 'self' ? self : obj.source === 'args' ? args : args[obj['key']];
                            if (obj['deepValue']) {
                                str = (0, _Utils.getDeepValueFromObj)(str, obj['deepValue']);
                                str = typeof str === 'string' ? str.trim() : str;
                            }
                            events = events.replace(regex1, JSON.stringify(str)).replace(regex2, str);
                        }
                        events = JSON.parse(events);
                    }
                    if (behaviour.placeHoldersFunctions) {
                        events = (0, _Utils.placeHolderFunctions)(events, behaviour.placeHoldersFunctions, {}, {
                            self: self,
                            behaviour: behaviour,
                            args: args
                        });
                    }
                    for (var event in events) {
                        if (_typeof(events[event]) === 'object') {
                            for (var eventName in events[event]) {
                                _EventsService2.default.trigger(eventName, [_assign({}, behaviour, args, events[event][eventName])]);
                            }
                        } else {
                            _EventsService2.default.trigger(event, [_assign({}, behaviour, args, events[event])]);
                        }
                    }
                }
            };
            break;
        case ActionTypes.UPDATE_INTERVAL_COMPONENTS:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                if (cond === null || cond && cond.check(args)) {
                    // update the localStorage key
                    if (behaviour.localStorageKey && args.componentsState) {
                        var localStorageConfig = pref.get(behaviour.localStorageKey);
                        if ((typeof localStorageConfig === 'undefined' ? 'undefined' : _typeof(localStorageConfig)) === 'object' && _typeof(args.componentsState) === 'object') {
                            localStorageConfig = _assign({}, localStorageConfig, args.componentsState);
                            pref.set(behaviour.localStorageKey, localStorageConfig);
                        }
                    }

                    if (!self.isIntervalComponent) return;

                    if (self.mounted && _typeof(self.state.componentsState) === 'object' && _typeof(args.componentsState) === 'object') {
                        self.setState(_assign({}, self.state, { 'componentsState': (0, _objectAssignDeep2.default)({}, self.state.componentsState, args.componentsState) }));
                    }
                }
            };
            break;
        case ActionTypes.CLOSE_WINDOW:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var delay = behaviour.delay ? behaviour.delay : args && args.delay ? args.delay : 0;
                    setTimeout(function () {
                        window.close();
                    }, delay);
                }
            };
            break;
        case ActionTypes.CHANGE_TAB_TITLE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var title = behaviour.title ? behaviour.title : args && args.title ? args.title : false;
                    if (title) {
                        document.title = title;
                    }
                }
            };
            break;
        case ActionTypes.DISABLE_WINDOW_RESIZING:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var size = [window.outerWidth, window.outerHeight];
                    window.onresize = function (event) {
                        window.resizeTo(size[0], size[1]);
                    };
                }
            };
            break;
        case ActionTypes.SWITCH_STATE_PARAMS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var rules = args['rules'] || behaviour['rules'] || false;
                    if (!rules) return;
                    var newState = {};
                    for (var key in rules) {
                        var config = rules[key];
                        var fromVal = (0, _Utils.getDeepValueFromObj)(self.state, config['fromValue']);
                        var tempObj = (0, _Utils.insertDeepValueToObj)({}, config['toValue'], fromVal);
                        (0, _objectAssignDeep2.default)(newState, tempObj);
                    }
                    self.setState((0, _objectAssignDeep2.default)({}, self.state, newState));
                    var doneEvent = args['doneEvent'] || behaviour['doneEvent'] || false;
                    if (doneEvent) {
                        _EventsService2.default.trigger(doneEvent, [(0, _objectAssignDeep2.default)({}, args, { state: newState })]);
                    }
                }
            };
            break;
        case ActionTypes.STRINGIFY_BYTES:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;

                var source = behaviour.source || args.source || 0;
                var decimals = behaviour.decimals || args.decimals || 2;
                var space = behaviour.space || args.space || false;
                var result = (0, _Utils.stringifyBytes)(source, decimals, space);
                var event = behaviour.event || 'STRINGIFY_BYTES_DONE';
                _EventsService2.default.trigger(event, [_assign({ 'result': result })]);
            };
            break;
        case ActionTypes.STRINGIFY_EPOCH_TIME:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;

                var epoch = behaviour.epoch || args.epoch || false;
                var func = behaviour.function || args.function || 'toLocaleString';
                var time = new Date();
                try {
                    time = epoch !== false ? new Date(parseInt(epoch)) : time;
                } catch (e) {}
                var result = typeof time[func] === 'function' ? time[func]() : time.toLocaleString();
                var event = behaviour.event || 'STRINGIFY_EPOCH_TIME_DONE';
                _EventsService2.default.trigger(event, [_assign({ 'result': result })]);
            };
            break;
        case ActionTypes.GENERATE_FILE_URL:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var fileName = behaviour.fileName || args.fileName || false;
                if (!fileName) return;
                var fileUrl = _FilesService2.default.generateFileUrl(fileName);
                if (!fileUrl) return;
                var events = behaviour.events || args.events || { success: 'GENERATE_FILE_URL_SUCCESS' };
                _EventsService2.default.trigger(events['success'], [_assign({ fileUrl: fileUrl })]);
            };
            break;
        case ActionTypes.REPLACE_NEWTAB_WITH_NEWONE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var args2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var args3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                _BrowserService2.default.createTab();
                _BrowserService2.default.getCurrentTabInfo(function (tabInfo) {
                    _BrowserService2.default.removeTab(tabInfo.id);
                });
                var triggerEvent = behaviour.triggerEvent;
                if (triggerEvent) {
                    for (var event in triggerEvent) {
                        _EventsService2.default.trigger(event, [_assign({}, self.props.config, args, triggerEvent[event])]);
                    }
                }
            };
            break;
        case ActionTypes.REMOVE_PREFERENCES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var key = behaviour.key || false;
                if (!key) return;
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                pref.remove(key);
            };
            break;
        case ActionTypes.FORCE_REPLACE_CONFIG_FUNCTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                if (typeof self.replaceConfigFunc !== 'function') return;
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    var extraData = _assign({}, behaviour.extraData, args.extraData);
                    var extraFuncs = (0, _Utils.isArray)(behaviour.extraFuncs) ? behaviour.extraFuncs : [];
                    extraFuncs = (0, _Utils.isArray)(args.extraFuncs) ? [].concat(_toConsumableArray(extraFuncs), _toConsumableArray(args.extraFuncs)) : extraFuncs;
                    self.replaceConfigFunc(extraFuncs, extraData);
                    var event = args.doneEvent || behaviour.doneEvent || 'FORCE_REPLACE_CONFIG_FUNCTION_' + self.props.config.id;
                    self.state.forceReplace = true;
                    self.setState({});
                    _EventsService2.default.trigger(event);
                }
            };
            break;
        case ActionTypes.DYNAMIC_ACTION_EXECUTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                if (!args.behaviour) return;
                var behave = args.behaviour;
                var cond = behave.c ? new _Condition2.default(behave.c) : null;
                if (cond === null || cond && cond.check(args, behave, self)) {
                    actionCreator.call(self, behave)(_assign({}, args, args.args));
                    return true;
                }
            };
            break;
        case ActionTypes.REREGISTER_BEHAVIOURS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour, self))) return;
                var unB = (0, _Utils.isArray)(self.props.config.behaviours) ? self.props.config.behaviours : [];
                unregister.bind(self)(unB);
                var extraBehaviours = (0, _Utils.isArray)(args.extraBehaviours) ? args.extraBehaviours : [];
                var defaultBehaviours = (0, _Utils.isArray)(self.props.config.behaviours) ? self.props.config.behaviours : [];
                var b = [defaultBehaviours].concat(_toConsumableArray(extraBehaviours));
                register.bind(self)(b);
                var doneEvent = args.doneEvent || behaviour.doneEvent || 'REREGISTER_BEHAVIOURS_' + self.props.config.id;
                _EventsService2.default.trigger(doneEvent, []);
            };
            break;
        case ActionTypes.SET_FAVICON:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var link = document.querySelector('link[rel*="icon"]') || document.createElement('link');
                link.type = 'image/x-icon';
                link.rel = 'shortcut icon';
                link.href = behaviour['href'];
                document.getElementsByTagName('head')[0].appendChild(link);
            };
            break;
        case ActionTypes.LOAD_STYLESHEET:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var url = behaviour['href'];
                if (!document.querySelector('link[href="' + url + '"]')) {
                    var head = document.getElementsByTagName('head')[0];
                    var link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.type = 'text/css';
                    link.href = url;
                    link.media = 'all';
                    head.appendChild(link);
                }
            };
            break;
        case ActionTypes.HISTORY_BACK:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                window.history.back();
                if (behaviour['close'] && history.length === 1) window.close();
            };
            break;
        case ActionTypes.REPLACE_LOCATION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    window.location.replace(behaviour['location'] || args['location']);
                }
            };
            break;
        case ActionTypes.RELOAD_LOCATION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    window.location.reload();
                }
            };
            break;
        case ActionTypes.DISABLE_BROWSER_ACTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    _BrowserService2.default.setBrowserActionDisable(behaviour.tabId);
                }
            };
            break;
        case ActionTypes.ENABLE_BROWSER_ACTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    _BrowserService2.default.setBrowserActionEnable(behaviour.tabId);
                }
            };
            break;
        case ActionTypes.RELOAD_TAB:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour, self)) {
                    _BrowserService2.default.tabsReload(behaviour.tabId);
                }
            };
            break;
        default:
            retFunc = function retFunc() {};
    }

    return function () {
        (0, _Utils.populateFromLocalStorage)(behaviour);
        (0, _Utils.populateFromLocalStorage)(arguments[0]);
        var env_ = _EventsService2.default.env_;
        var argsObj = {};
        for (var i in arguments) {
            argsObj = _assign(argsObj, arguments[i]);
        }
        // if trigger force cross events, dont take into consideration the listener
        if (argsObj.forceCrossContextEvent === true) {
            retFunc.apply(this, arguments);
            // if trigger force cross event for certain targets, check if it matches
        } else if (_typeof(argsObj.forceCrossContextEvent) === 'object' && env_) {
            if (argsObj.forceCrossContextEvent[env_]) {
                retFunc.apply(this, arguments);
            }
            // if no force involved, keep checking the regular flow
            // check if event is from different context
        } else if (argsObj.eventFromOtherContext) {
            // check if listener accept events from other context
            if (behaviour.crossContextListener === true) {
                // check if trigger define desired targets
                if (_typeof(argsObj.crossContextEventTargets) === 'object') {
                    if (argsObj.crossContextEventTargets[env_]) {
                        retFunc.apply(this, arguments);
                    }
                } else {
                    retFunc.apply(this, arguments);
                }
            }
            // check if listener accept only events from certain sources, if so check if the sources match
            else if (_typeof(behaviour.crossContextListener) === 'object' && argsObj.eventSource) {
                    if (behaviour.crossContextListener[argsObj.eventSource]) {
                        retFunc.apply(this, arguments);
                    }
                }
        }
        // check if trigger have listeners filter
        else if (_typeof(argsObj.crossContextEventTargets) === 'object') {
                if (argsObj.crossContextEventTargets[env_]) {
                    retFunc.apply(this, arguments);
                }
            }
            // event come from the same context, and there is not filtering in the trigger
            else retFunc.apply(this, arguments);
    };
}

function selfIsMounted(self) {
    try {
        ReactDOM.findDOMNode(self);
        return true;
    } catch (e) {
        return false;
    }
}

function unregister(behaviours) {
    var _this = this;

    // let createAction = actionCreator.bind(this);
    if (!behaviours) return;
    // Remove listeners

    var _loop = function _loop(i) {
        var behaviour = behaviours[i];
        if (!(0, _Utils.isObject)(behaviour) || !behaviour.on || !behaviour.do) return 'continue';
        var onArray = [];
        var doArray = [];
        if (Array.isArray(behaviour.on)) onArray = behaviour.on;else onArray = [behaviour.on];
        if (Array.isArray(behaviour.do)) doArray = behaviour.do;else doArray = [behaviour.do];
        var that = _this;
        // onArray.forEach(function (onElm) {
        doArray.forEach(function (doElm, doIndex) {
            var clonedBehaviour = (0, _Utils.cloneObject)(behaviour);
            clonedBehaviour.do = doElm;
            clonedBehaviour.on = onArray;
            _EventsService2.default.off(clonedBehaviour.on, that.function[i][doIndex]);
        });
        // });
    };

    for (var i = 0; i < behaviours.length; i++) {
        var _ret = _loop(i);

        if (_ret === 'continue') continue;
    }
}

function register(behaviours) {
    var _this2 = this;

    var createAction = actionCreator.bind(this);
    if (!behaviours) return;
    // Add listeners

    var _loop2 = function _loop2(i) {
        var behaviour = behaviours[i];
        if (!(0, _Utils.isObject)(behaviour) || !behaviour.on || !behaviour.do) return 'continue';
        var onArray = [];
        var doArray = [];
        if (Array.isArray(behaviour.on)) onArray = behaviour.on;else onArray = [behaviour.on];
        if (Array.isArray(behaviour.do)) doArray = behaviour.do;else doArray = [behaviour.do];
        var that = _this2;
        onArray.forEach(function (onElm, onIndex) {
            doArray.forEach(function (doElm, doIndex) {
                var clonedBehaviour = (0, _Utils.cloneObject)(behaviour);
                clonedBehaviour.do = doElm;
                clonedBehaviour.on = onElm;
                that.function = that.function || [];
                that.function[i] = that.function[i] || [];
                that.function[i][doIndex] = createAction(clonedBehaviour);
                _EventsService2.default.on(clonedBehaviour.on, that.function[i][doIndex]);
            });
        });
    };

    for (var i = 0; i < behaviours.length; i++) {
        var _ret2 = _loop2(i);

        if (_ret2 === 'continue') continue;
    }
}

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cache", function() { return cache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Box", function() { return Box; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Block", function() { return Block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inline", function() { return Inline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InlineBlock", function() { return InlineBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Row", function() { return Row; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Col", function() { return Col; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Grid", function() { return Grid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Table", function() { return Table; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableRow", function() { return TableRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableCell", function() { return TableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Flex", function() { return Flex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InlineFlex", function() { return InlineFlex; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__ = __webpack_require__(49);



/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics =
  Object.setPrototypeOf ||
  ({ __proto__: [] } instanceof Array &&
    function(d, b) {
      d.__proto__ = b;
    }) ||
  function(d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype =
    b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}

var __assign =
  Object.assign ||
  function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };

var cache = Object(__WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["b" /* getStyleCache */])();
function factory(displayName, defaultProps) {
  var tagName = 'div';
  return (
    (_a = /** @class */ (function(_super) {
      __extends(JsxstyleComponent, _super);
      function JsxstyleComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.component = props.component || tagName;
        _this.className = cache.getClassName(props, props.className);
        return _this;
      }
      JsxstyleComponent.prototype.componentWillReceiveProps = function(props) {
        this.component = props.component || tagName;
        this.className = cache.getClassName(props, props.className);
      };
      JsxstyleComponent.prototype.render = function() {
        var _a = this.props,
          props = _a.props,
          style = _a.style,
          children = _a.children;
        return Object(__WEBPACK_IMPORTED_MODULE_0_react__["createElement"])(
          this.component,
          __assign({}, props, { className: this.className, style: style }),
          children
        );
      };
      return JsxstyleComponent;
    })(__WEBPACK_IMPORTED_MODULE_0_react__["Component"])),
    (_a.defaultProps = defaultProps),
    (_a.displayName = displayName),
    _a
  );
  var _a;
}
var Box = factory('Box');
var Block = factory('Block', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].Block);
var Inline = factory('Inline', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].Inline);
var InlineBlock = factory('InlineBlock', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].InlineBlock);
var Row = factory('Row', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].Row);
var Col = factory('Col', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].Col);
var Grid = factory('Grid', __WEBPACK_IMPORTED_MODULE_1_jsxstyle_utils__["a" /* componentStyles */].Grid);
function install() {
  console.error(
    'jsxstyle\u2019s `install` method is no longer required and will be removed in jsxstyle 2.0.'
  );
}
function depFactory(displayName, defaultProps) {
  var hasWarned = false;
  return (
    (_a = /** @class */ (function(_super) {
      __extends(DeprecatedJsxstyleComponent, _super);
      function DeprecatedJsxstyleComponent() {
        return (_super !== null && _super.apply(this, arguments)) || this;
      }
      DeprecatedJsxstyleComponent.prototype.componentWillMount = function() {
        if (process.env.NODE_ENV !== 'production') {
          if (!hasWarned) {
            hasWarned = true;
            console.error(
              'jsxstyle\u2019s `%s` component is deprecated and will be removed in future versions of jsxstyle.',
              displayName
            );
          }
        }
      };
      DeprecatedJsxstyleComponent.prototype.render = function() {
        return Object(__WEBPACK_IMPORTED_MODULE_0_react__["createElement"])(Box, __assign({}, this.props));
      };
      return DeprecatedJsxstyleComponent;
    })(__WEBPACK_IMPORTED_MODULE_0_react__["Component"])),
    (_a.displayName = displayName),
    (_a.defaultProps = defaultProps),
    _a
  );
  var _a;
}
// <Box component="table" />
var Table = depFactory('Table', { display: 'table' });
var TableRow = depFactory('TableRow', { display: 'table-row' });
var TableCell = depFactory('TableCell', { display: 'table-cell' });
// <Row display="inline-flex" />
var Flex = depFactory('Flex', { display: 'flex' });
var InlineFlex = depFactory('InlineFlex', { display: 'inline-flex' });



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(18)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = React.addons.CSSTransitionGroup;

/***/ }),
/* 13 */,
/* 14 */,
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * OBJECT ASSIGN DEEP
 * Allows deep cloning of plain objects that contain primitives, nested plain objects, or nested plain arrays.
 */

/*
 * A unified way of returning a string that describes the type of the given variable.
 */
function getTypeOf (input) {

	if (input === null) {
		return `null`;
	}

	else if (typeof input === `undefined`) {
		return `undefined`;
	}

	else if (typeof input === `object`) {
		return (Array.isArray(input) ? `array` : `object`);
	}

	return typeof input;

}

/*
 * Branching logic which calls the correct function to clone the given value base on its type.
 */
function cloneValue (value) {

	// The value is an object so lets clone it.
	if (getTypeOf(value) === `object`) {
		return quickCloneObject(value);
	}

	// The value is an array so lets clone it.
	else if (getTypeOf(value) === `array`) {
		return quickCloneArray(value);
	}

	// Any other value can just be copied.
	return value;

}

/*
 * Enumerates the given array and returns a new array, with each of its values cloned (i.e. references broken).
 */
function quickCloneArray (input) {
	return input.map(cloneValue);
}

/*
 * Enumerates the properties of the given object (ignoring the prototype chain) and returns a new object, with each of
 * its values cloned (i.e. references broken).
 */
function quickCloneObject (input) {

	const output = {};

	for (const key in input) {
		if (!input.hasOwnProperty(key)) { continue; }

		output[key] = cloneValue(input[key]);
	}

	return output;

}

/*
 * Does the actual deep merging.
 */
function executeDeepMerge (target, _objects = [], _options = {}) {

	const options = {
		arrayBehaviour: _options.arrayBehaviour || `replace`,  // Can be "merge" or "replace".
	};

	// Ensure we have actual objects for each.
	const objects = _objects.map(object => object || {});

	const output = target || {};

	// Enumerate the objects and their keys.
	for (let oindex = 0; oindex < objects.length; oindex++) {
		const object = objects[oindex];
		const keys = Object.keys(object);

		for (let kindex = 0; kindex < keys.length; kindex++) {
			const key = keys[kindex];
			const value = object[key];
			const type = getTypeOf(value);
			const existingValueType = getTypeOf(output[key]);

			if (type === `object`) {
				if (existingValueType !== `undefined`) {
					const existingValue = (existingValueType === `object` ? output[key] : {});
					output[key] = executeDeepMerge({}, [existingValue, quickCloneObject(value)], options);
				}
				else {
					output[key] = quickCloneObject(value);
				}
			}

			else if (type === `array`) {
				if (existingValueType === `array`) {
					const newValue = quickCloneArray(value);
					output[key] = (options.arrayBehaviour === `merge` ? output[key].concat(newValue) : newValue);
				}
				else {
					output[key] = quickCloneArray(value);
				}
			}

			else {
				output[key] = value;
			}


		}
	}

	return output;

}

/*
 * Merge all the supplied objects into the target object, breaking all references, including those of nested objects
 * and arrays, and even objects nested inside arrays. The first parameter is not mutated unlike Object.assign().
 * Properties in later objects will always overwrite.
 */
module.exports = function objectAssignDeep (target, ...objects) {
	return executeDeepMerge(target, objects);
};

/*
 * Same as objectAssignDeep() except it doesn't mutate the target object and returns an entirely new object.
 */
module.exports.noMutate = function objectAssignDeepInto (...objects) {
	return executeDeepMerge({}, objects);
};

/*
 * Allows an options object to be passed in to customise the behaviour of the function.
 */
module.exports.withOptions = function objectAssignDeepInto (target, objects, options) {
	return executeDeepMerge(target, objects, options);
};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = md5;

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GenericReactComponentWrapper = function (_React$Component) {
    _inherits(GenericReactComponentWrapper, _React$Component);

    function GenericReactComponentWrapper(props) {
        _classCallCheck(this, GenericReactComponentWrapper);

        return _possibleConstructorReturn(this, (GenericReactComponentWrapper.__proto__ || Object.getPrototypeOf(GenericReactComponentWrapper)).call(this, props));
    }

    return GenericReactComponentWrapper;
}(React.Component);

exports.default = GenericReactComponentWrapper;


_ComponentsFactory2.default.add(function () {
    return GenericReactComponentWrapper;
}, 'GenericReactComponentWrapper');

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _FirstChild = __webpack_require__(31);

var _FirstChild2 = _interopRequireDefault(_FirstChild);

var _Actions = __webpack_require__(10);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Consts = __webpack_require__(1);

var _Utils = __webpack_require__(2);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var Item = function (_React$Component) {
    _inherits(Item, _React$Component);

    function Item(props) {
        _classCallCheck(this, Item);

        var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        _this.props = props;
        _this.state = {
            style: {},
            hovered: false
        };

        if (_this.props.config.key) {
            _this.state.active = 1; // default
        }

        if (props.config.selected) {
            _this.state = {
                style: _assign({}, _this.state ? _this.state.style : {}, props.config.selectedStyle),
                hovered: false
            };
        }

        _this.getStateFromLocalStorage();

        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        return _this;
    }

    _createClass(Item, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'render',
        value: function render() {
            this.getStateFromLocalStorage();
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var component = React.createElement('div', { style: { display: 'none' } });
            var containerProps = {
                onClick: this.handleClick,
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave
            };
            if (this.state.active != undefined) {
                this.state.active = this.pref.get(this.props.config.key);
                this.props.config.style = this.getStyleByState(this.state.active);
                this.props.config.text = this.getTextByState(this.state.active);
            }

            if (!this.props.config.hide) {
                var txt = _BrowserService2.default.getTranslationOnlyIfExist(this.props.config.text, prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));
                component = React.createElement(
                    Block,
                    { style: _assign({}, this.props.config.style ? this.props.config.style : {}, this.state.style, this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {}),
                        props: containerProps },
                    txt
                );
            }

            if (!this.props.config.hide && this.props.config.animateClass) {
                component = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { component: _FirstChild2.default,
                        transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    !this.props.config.hide ? component : null
                );
            }

            return component;
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                var addedParams = { active: this.state.active };
                addedParams = addedParams.active == undefined ? null : addedParams;
                var params = _assign({}, addedParams, this.props.config.events.onClick);
                event.stopPropagation();
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }, {
        key: 'getStyleByState',
        value: function getStyleByState(state) {
            return this.props.config.options[state]['style'] || this.props.config.style;
        }
    }, {
        key: 'getTextByState',
        value: function getTextByState(state) {
            return this.props.config.options[state]['text'];
        }
    }, {
        key: 'getStateFromLocalStorage',
        value: function getStateFromLocalStorage() {
            if (this.props.config.stateFromLocalStorage && this.props.config.stateFromLocalStorage.local_storage) {
                (0, _Utils.populateFromLocalStorage)(this.props.config.stateFromLocalStorage);
                if (this.props.config.stateFromLocalStorage.stateKey) {
                    this.state[this.props.config.stateFromLocalStorage.stateKey] = _assign(this.state[this.props.config.stateFromLocalStorage.stateKey], this.props.config.stateFromLocalStorage);
                } else {
                    this.state = _assign(this.state, this.props.config.stateFromLocalStorage);
                }
            }
        }
    }]);

    return Item;
}(React.Component);

exports.default = Item;


_ComponentsFactory2.default.add(function () {
    return Item;
}, 'Item');

/***/ }),
/* 23 */,
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _objectAssignDeep = __webpack_require__(15);

var _objectAssignDeep2 = _interopRequireDefault(_objectAssignDeep);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Actions = __webpack_require__(10);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Utils = __webpack_require__(2);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _GenericReactComponentWrapper = __webpack_require__(21);

var _GenericReactComponentWrapper2 = _interopRequireDefault(_GenericReactComponentWrapper);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var Container = function (_GenericReactComponen) {
    _inherits(Container, _GenericReactComponen);

    function Container(props) {
        _classCallCheck(this, Container);

        var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

        _this.conditionalConfigMerge();
        _this.originalConfig = JSON.parse(JSON.stringify(props.config));
        _this.replaceConfigFunc();
        _this.state = {
            hovered: false,
            style: props.config.selected && props.config.selectedStyle ? props.config.selectedStyle : {}
        };

        _this.mergeChildrenProps();

        //quick fix for ch dead ext
        if (props.config.id === 'mainWindow' && (0, _Utils.isObject)(props.config.style)) {
            if (props.config.style.hasOwnProperty('backgroundColor')) {
                delete props.config.style.backgroundColor;
            }
            if (props.config.style.hasOwnProperty('backgroundImage')) {
                delete props.config.style.backgroundImage;
            }
        }
        //end of quick fix

        if (_this.props.config.events) {
            if (_this.props.config.events.onDragStart || _this.props.config.events.onDragEnter || _this.props.config.events.onDragOver || _this.props.config.events.onDragLeave) {
                window.addEventListener('dragover', function (e) {
                    e = e || event;
                    e.preventDefault();
                }, false);
            }

            if (_this.props.config.events.onDrop) {
                window.addEventListener('dragover', function (e) {
                    e = e || event;
                    e.preventDefault();
                }, false);
                window.addEventListener('drop', function (e) {
                    e = e || event;
                    e.preventDefault();
                }, false);
            }
        }

        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        _this.handleOnClick = _this.handleOnClick.bind(_this);
        _this.handleOnDragStart = _this.handleOnDragStart.bind(_this);
        _this.handleOnDragEnter = _this.handleOnDragEnter.bind(_this);
        _this.handleOnDragOver = _this.handleOnDragOver.bind(_this);
        _this.handleOnDragLeave = _this.handleOnDragLeave.bind(_this);
        _this.handleOnDrop = _this.handleOnDrop.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);

        _this.nextClickName = 0;
        return _this;
    }

    _createClass(Container, [{
        key: 'conditionalConfigMerge',
        value: function conditionalConfigMerge() {
            var _this2 = this;

            var fromRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            try {
                if (!this.props.config.conditionalConfigMerge) return;
                var merger = function merger() {
                    var arr = (0, _Utils.isObject)(_this2.props.config.conditionalConfigMerge) ? [_this2.props.config.conditionalConfigMerge] : _this2.props.config.conditionalConfigMerge;
                    for (var i in arr) {
                        var settings = arr[i];
                        var cond = settings.c ? new _Condition2.default(settings.c) : null;
                        if ((0, _Utils.isObject)(settings.config) && (cond === null || cond && cond.check(_this2.props.config, settings, _this2.props.config))) {
                            _objectAssignDeep2.default.withOptions(_this2.props.config, [settings.config], settings.options || { arrayBehaviour: 'replace' });
                        }
                    }
                };
                if (!fromRender) {
                    merger();
                } else if (!this.props.config.conditionalConfigMerge.hasOwnProperty('onRender') || this.props.config.conditionalConfigMerge.onRender) {
                    merger();
                }
            } catch (e) {}
        }
    }, {
        key: 'replaceConfigFunc',
        value: function replaceConfigFunc() {
            var extraFuncs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.originalConfig;

            try {
                if ((0, _Utils.isArray)(this.originalConfig.placeHoldersFunctions)) {
                    var phFuncs = (0, _Utils.isArray)(extraFuncs) ? [].concat(_toConsumableArray(this.originalConfig.placeHoldersFunctions), _toConsumableArray(extraFuncs)) : this.originalConfig.placeHoldersFunctions;
                    var a = (0, _Utils.placeHolderFunctions)(config, phFuncs, {}, _assign({}, config, extraData));
                    _assign(this.props.config, a);
                }
            } catch (e) {
                _LoggerService2.default.debug('error', e);
            }
        }
    }, {
        key: 'mergeChildrenProps',
        value: function mergeChildrenProps() {
            var childrenProps = this.props.config.childrenProps;
            if (childrenProps && (0, _Utils.isObject)(childrenProps)) {
                var props = childrenProps.props || {};
                var method = childrenProps.method === 'deepAssign' ? _objectAssignDeep2.default : _assign;
                var comps = this.props.config.components;
                if (Array.isArray(comps)) {
                    for (var comp in comps) {
                        if (!comps.hasOwnProperty(comp)) continue;
                        comps[comp] = method({}, props, comps[comp]);
                    }
                }
            }
        }
    }, {
        key: 'createComponents',
        value: function createComponents() {
            var self = this;
            var childrenComponents = void 0;
            if (this.props.config.components) {
                this.mergeChildrenProps();
                var components = this.props.config.components;
                var forceReplace = this.state.forceReplace || this.props.forceReplace;
                childrenComponents = Object.keys(this.props.config.components).map(function (componentKey) {
                    if ((0, _Utils.isObject)(components[componentKey]) && components[componentKey].type) {
                        if (components[componentKey].hasOwnProperty('renderForEach')) return self.createComponentForEach(components[componentKey], componentKey);else {
                            var ComponentObject = _ComponentsFactory2.default.createComponent(components[componentKey].type);
                            return React.createElement(ComponentObject, { key: componentKey, config: components[componentKey],
                                hover: self.state.hovered, forceReplace: forceReplace });
                        }
                    }
                });
            }

            return childrenComponents;
        }
    }, {
        key: 'createComponentForEach',
        value: function createComponentForEach(component, componentKey) {
            var self = this;
            var data = component['renderForEach'];
            if (!data || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return [];
            data.length = component.renderForEachLimit && data.length > component.renderForEachLimit ? component.renderForEachLimit : data.length;
            component = JSON.stringify(component);
            this.state['renderForEach'] = this.state['renderForEach'] || {};
            this.state['renderForEach'][componentKey] = this.state['renderForEach'][componentKey] || {};
            var components = [];
            var children = {};
            var forceReplace = this.state.forceReplace || this.props.forceReplace;
            for (var key in data) {
                var value = data[key];
                var childComponent = component.replace(/{{key}}/g, key);
                childComponent = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? childComponent.replace(/"{{value}}"/g, JSON.stringify(value)) : childComponent.replace(/{{value}}/g, value);
                var child = JSON.parse(childComponent);
                delete child['renderForEach'];
                children[key] = child;
                var ComponentObject = _ComponentsFactory2.default.createComponent(child.type);
                components.push(React.createElement(ComponentObject, { key: key,
                    config: !forceReplace && this.state['renderForEach'][componentKey][key] || child,
                    hover: self.state.hovered, forceReplace: forceReplace, renderedForEach: true }));
            }
            this.state['renderForEach'][componentKey] = _assign(children, !forceReplace && this.state['renderForEach'][componentKey]);
            return components;
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            if (this.props.config.events && this.props.config.events.willMount) {
                _EventsService2.default.trigger(this.props.config.events.willMount.name, [_assign({}, this.props.config.events.willMount, { selected: this.props.config.selected }, {
                    selfConfig: this.props.config,
                    SelfOrigConfig: this.originalConfig,
                    selfState: this.state,
                    selfHideStatus: this.shouldHide()
                })]);
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            _Actions.register.bind(this)(this.props.config.behaviours);
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            if (this.props.config.events && this.props.config.events.onMount) {
                _EventsService2.default.trigger(this.props.config.events.onMount.name, [_assign({}, this.props.config.events.onMount, { selected: this.props.config.selected })]);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
            if (this.props.config.events && this.props.config.events.onMouseEnter) {
                event.stopPropagation();
                event.preventDefault();
                _EventsService2.default.trigger(this.props.config.events.onMouseEnter.name, [_assign({}, this.props.config.events.onMouseEnter)]);
            }
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
            if (this.props.config.events && this.props.config.events.onMouseLeave) {
                event.stopPropagation();
                event.preventDefault();
                _EventsService2.default.trigger(this.props.config.events.onMouseLeave.name, [_assign({}, this.props.config.events.onMouseLeave)]);
            }
        }
    }, {
        key: 'handleOnClick',
        value: function handleOnClick(event) {
            var _this3 = this;

            if (this.props.config.events && this.props.config.events.onClick) {
                var getClickName = function getClickName() {
                    if (Array.isArray(_this3.props.config.events.onClick.names)) {
                        var returnVal = _this3.props.config.events.onClick.names[_this3.nextClickName];
                        _this3.nextClickName = _this3.props.config.events.onClick.names.length - 1 === _this3.nextClickName ? 0 : _this3.nextClickName + 1;
                        return returnVal;
                    } else {
                        return _this3.props.config.events.onClick.name;
                    }
                };
                var params = _assign({}, this.props.config.events.onClick);
                event.stopPropagation();
                _EventsService2.default.trigger(getClickName(), [params, _assign({}, this.props.config)]);
            }

            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }, {
        key: 'handleOnDragStart',
        value: function handleOnDragStart(event) {
            if (!(this.props.config.events && this.props.config.events.onDragStart)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onDragStart.name, [_assign({}, this.props.config.events.onDragStart, event)], true);
        }
    }, {
        key: 'handleOnDragEnter',
        value: function handleOnDragEnter(event) {
            if (!(this.props.config.events && this.props.config.events.onDragEnter)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onDragEnter.name, [_assign({}, this.props.config.events.onDragEnter, event)], true);
        }
    }, {
        key: 'handleOnDragOver',
        value: function handleOnDragOver(event) {
            if (!(this.props.config.events && this.props.config.events.onDragOver)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onDragOver.name, [_assign({}, this.props.config.events.onDragOver, event)], true);
        }
    }, {
        key: 'handleOnDragLeave',
        value: function handleOnDragLeave(event) {
            if (!(this.props.config.events && this.props.config.events.onDragLeave)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onDragLeave.name, [_assign({}, this.props.config.events.onDragLeave, event)], true);
        }
    }, {
        key: 'handleOnDrop',
        value: function handleOnDrop(event) {
            if (!(this.props.config.events && this.props.config.events.onDrop)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onDrop.name, [_assign({}, this.props.config.events.onDrop, event)], true);
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(e) {
            if (!(this.props.config.events && this.props.config.events.onKeyDown)) return;
            var event = this.props.config.events.onKeyDown;
            var params = _assign({}, this.props.config.events.onKeyDown, event, { text: e.target.value }, {
                altKey: e.altKey,
                charCode: e.charCode,
                ctrlKey: e.ctrlKey,
                key: e.key,
                keyCode: e.keyCode,
                locale: e.locale,
                location: e.location,
                metaKey: e.metaKey,
                repeat: e.repeat,
                shiftKey: e.shiftKey,
                which: e.which
            });
            _EventsService2.default.trigger(event.name, [params, _assign({}, this.props.config, {
                selfConfig: this.props.config,
                SelfOrigConfig: this.originalConfig,
                selfState: this.state,
                selfHideStatus: this.shouldHide()
            })]);
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll(event) {
            if (!(this.props.config.events && this.props.config.events.onScroll)) return;
            event.stopPropagation();
            event.preventDefault();
            _EventsService2.default.trigger(this.props.config.events.onScroll.name, [_assign({}, this.props.config.events.onScroll)], true);
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            return (0, _Utils.trueOrFalse)(hide);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            if (this.props.renderedForEach && this.props.forceReplace) this.replaceConfigFunc([], {}, this.props.config);
            this.id = !this.state.reconstruct && this.id || (0, _Utils.createGUID)();
            this.state.reconstruct = null;
            this.conditionalConfigMerge(true);
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            var container = React.createElement('div', { style: { display: 'none' } });
            if (this.shouldHide()) return container;
            var children = this.createComponents();
            var containerProps = {
                onMouseEnter: this.handleMouseEnter.bind(this),
                onMouseLeave: this.handleMouseLeave.bind(this),
                onClick: this.handleOnClick.bind(this),
                onDragStart: this.handleOnDragStart.bind(this),
                onDragEnter: this.handleOnDragEnter.bind(this),
                onDragOver: this.handleOnDragOver.bind(this),
                onDragLeave: this.handleOnDragLeave.bind(this),
                onDrop: this.handleOnDrop.bind(this),
                onKeyDown: this.handleKeyDown.bind(this),
                onScroll: this.handleScroll.bind(this)
            };

            var basicStyle = this.props.config.style || {};
            var hoverStyle = this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {};
            var style = _assign({}, basicStyle, this.state.style, hoverStyle);
            container = React.createElement(
                Block,
                { key: this.id, style: style,
                    props: containerProps, ref: function ref(container) {
                        _this4.Container = container;
                    } },
                children
            );

            if (this.props.config.animateClass) {
                container = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    container
                );
            }

            this.state.forceReplace = false;
            // this.props.forceReplace = false;
            return container;
        }
    }, {
        key: 'findDOMNode',
        value: function findDOMNode() {
            return ReactDOM.findDOMNode(this.Container);
        }
    }]);

    return Container;
}(_GenericReactComponentWrapper2.default);

exports.default = Container;


_ComponentsFactory2.default.add(function () {
    return Container;
}, 'Container');

/***/ }),
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var DO_SEARCH = exports.DO_SEARCH = 'DO_SEARCH';
var CHANGE_ENGINE = exports.CHANGE_ENGINE = 'CHANGE_ENGINE';
var UPDATE_SEARCH_TEXT = exports.UPDATE_SEARCH_TEXT = 'UPDATE_SEARCH_TEXT';
var UPDATE_SEARCH_CATEGORY = exports.UPDATE_SEARCH_CATEGORY = 'UPDATE_SEARCH_CATEGORY';

var CHANGE_COLOR_TO_GRAY = exports.CHANGE_COLOR_TO_GRAY = 'CHANGE_COLOR_TO_GRAY';
var TOGGLE_PREFERENCE = exports.TOGGLE_PREFERENCE = 'TOGGLE_PREFERENCE';

var INVERT_IMAGE = exports.INVERT_IMAGE = 'INVERT_IMAGE';
var SET_STATE = exports.SET_STATE = 'SET_STATE';
var SET_CONFIG = exports.SET_CONFIG = 'SET_CONFIG';
var SELECTIVE_CONFIG_RESET = exports.SELECTIVE_CONFIG_RESET = 'SELECTIVE_CONFIG_RESET';
var RELOAD_IFRAMES = exports.RELOAD_IFRAMES = 'RELOAD_IFRAMES';
var HIDE_OR_SHOW = exports.HIDE_OR_SHOW = 'HIDE_OR_SHOW';
var SET_SELECTED = exports.SET_SELECTED = 'SET_SELECTED';
var SET_TEXT = exports.SET_TEXT = 'SET_TEXT';
var SET_PREFERENCES = exports.SET_PREFERENCES = 'SET_PREFERENCES';
var INSERT_INPUT_TO_LOCALSTORAGE = exports.INSERT_INPUT_TO_LOCALSTORAGE = 'INSERT_INPUT_TO_LOCALSTORAGE';
var PREFERENCES_DUPLICATOR = exports.PREFERENCES_DUPLICATOR = 'PREFERENCES_DUPLICATOR';
var MARK_TIME = exports.MARK_TIME = 'MARK_TIME';
var PREF_COUNT = exports.PREF_COUNT = 'PREF_COUNT';
var FORCE_REPLACE_CONFIG_FUNCTION = exports.FORCE_REPLACE_CONFIG_FUNCTION = 'FORCE_REPLACE_CONFIG_FUNCTION';
var DYNAMIC_ACTION_EXECUTION = exports.DYNAMIC_ACTION_EXECUTION = 'DYNAMIC_ACTION_EXECUTION';
var REREGISTER_BEHAVIOURS = exports.REREGISTER_BEHAVIOURS = 'REREGISTER_BEHAVIOURS';

var CHANGE_BACKGROUND = exports.CHANGE_BACKGROUND = 'CHANGE_BACKGROUND';
var CHANGE_FOOTER = exports.CHANGE_FOOTER = 'CHANGE_FOOTER';
var RELOAD_BACKGROUND = exports.RELOAD_BACKGROUND = 'RELOAD_BACKGROUND';
var PERSIST_BACKGROUND = exports.PERSIST_BACKGROUND = 'PERSIST_BACKGROUND';
var SET_BORDER_GRAY = exports.SET_BORDER_GRAY = 'SET_BORDER_GRAY';
var HIDE_WHEN_CLICKED_OUTSIDE = exports.HIDE_WHEN_CLICKED_OUTSIDE = 'HIDE_WHEN_CLICKED_OUTSIDE';
var HIDE_WHEN_CLICKED_ON = exports.HIDE_WHEN_CLICKED_ON = 'HIDE_WHEN_CLICKED_ON';
var PUBLISH_EVENTS_WHEN_CLICKED_OUTSIDE = exports.PUBLISH_EVENTS_WHEN_CLICKED_OUTSIDE = 'PUBLISH_EVENTS_WHEN_CLICKED_OUTSIDE';
var HIDE_COMPONENT = exports.HIDE_COMPONENT = 'HIDE_COMPONENT';
var SHOW_COMPONENT = exports.SHOW_COMPONENT = 'SHOW_COMPONENT';
var SOFT_HIDE_COMPONENT = exports.SOFT_HIDE_COMPONENT = 'SOFT_HIDE_COMPONENT';
var SOFT_SHOW_COMPONENT = exports.SOFT_SHOW_COMPONENT = 'SOFT_SHOW_COMPONENT';
var HIDE_OR_SHOW_FINISHED = exports.HIDE_OR_SHOW_FINISHED = 'HIDE_OR_SHOW_FINISHED';
var TOGGLE_PREF_FINISHED = exports.TOGGLE_PREF_FINISHED = 'TOGGLE_PREF_FINISHED';
var GET_SEARCH_SUGGESTIONS = exports.GET_SEARCH_SUGGESTIONS = 'GET_SEARCH_SUGGESTIONS';
var SET_CHROME_POPUP = exports.SET_CHROME_POPUP = 'SET_CHROME_POPUP';
var CHANGE_SSE_STATE = exports.CHANGE_SSE_STATE = 'CHANGE_SSE_STATE';
var CHANGE_SELECTED = exports.CHANGE_SELECTED = 'CHANGE_SELECTED';
var CHANGE_VISIBILITY = exports.CHANGE_VISIBILITY = 'CHANGE_VISIBILITY';
var HIDE = exports.HIDE = 'HIDE';
var UPDATE_WEATHER = exports.UPDATE_WEATHER = 'UPDATE_WEATHER';
var WEATHER_VALUE_KEY = exports.WEATHER_VALUE_KEY = 'WEATHER_VALUE_KEY';
var WEATHER_TIME_KEY = exports.WEATHER_TIME_KEY = 'WEATHER_TIME_KEY';
var UNINSTALL_EXTENSION = exports.UNINSTALL_EXTENSION = 'UNINSTALL_EXTENSION';
var PARSE_URL = exports.PARSE_URL = 'PARSE_URL';
var OPEN_WEB_PAGE = exports.OPEN_WEB_PAGE = 'OPEN_WEB_PAGE';
var RELOAD_COMPONENT = exports.RELOAD_COMPONENT = 'RELOAD_COMPONENT';
var RECONSTRUCT_COMPONENT = exports.RECONSTRUCT_COMPONENT = 'RECONSTRUCT_COMPONENT';
var REDIRECT_CURRENT_TAB = exports.REDIRECT_CURRENT_TAB = 'REDIRECT_CURRENT_TAB';
var SHOW_RATE_US_POPUP = exports.SHOW_RATE_US_POPUP = 'SHOW_RATE_US_POPUP';
var DO_ACTION_ON_INTERVAL = exports.DO_ACTION_ON_INTERVAL = 'DO_ACTION_ON_INTERVAL';
var DO_ACTION_WHEN_CONDITION_MET = exports.DO_ACTION_WHEN_CONDITION_MET = 'DO_ACTION_WHEN_CONDITION_MET';
var TRIGGER_EVENTS = exports.TRIGGER_EVENTS = 'TRIGGER_EVENTS';
var CHANGE_TAB_TITLE = exports.CHANGE_TAB_TITLE = 'CHANGE_TAB_TITLE';
var SET_SEARCH_ENGINE = exports.SET_SEARCH_ENGINE = 'SET_SEARCH_ENGINE';
var LOCK_SETTINGS = exports.LOCK_SETTINGS = 'LOCK_SETTINGS';
var TRACK = exports.TRACK = 'TRACK';
var DEBUG = exports.DEBUG = 'DEBUG';
var UPDATE_INTERVAL_COMPONENTS = exports.UPDATE_INTERVAL_COMPONENTS = 'UPDATE_INTERVAL_COMPONENTS';
var CLOSE_WINDOW = exports.CLOSE_WINDOW = 'CLOSE_WINDOW';
var DISABLE_WINDOW_RESIZING = exports.DISABLE_WINDOW_RESIZING = 'DISABLE_WINDOW_RESIZING';
var SWITCH_STATE_PARAMS = exports.SWITCH_STATE_PARAMS = 'SWITCH_STATE_PARAMS';
var BROWSE_FILES = exports.BROWSE_FILES = 'BROWSE_FILES';
var VALIDATE_FILES_TYPES = exports.VALIDATE_FILES_TYPES = 'VALIDATE_FILES_TYPES';
var UPDATE_TEXT = exports.UPDATE_TEXT = 'UPDATE_TEXT';
var STORE_FILE = exports.STORE_FILE = 'STORE_FILE';
var UPLOAD_FILE_TO_CONVERT_OLD = exports.UPLOAD_FILE_TO_CONVERT_OLD = 'UPLOAD_FILE_TO_CONVERT_OLD';
var UPLOAD_FILE_TO_CONVERT = exports.UPLOAD_FILE_TO_CONVERT = 'UPLOAD_FILE_TO_CONVERT';
var SEND_MESSAGE = exports.SEND_MESSAGE = 'SEND_MESSAGE';
var REMOVE_FILES = exports.REMOVE_FILES = 'REMOVE_FILES';
var STRINGIFY_BYTES = exports.STRINGIFY_BYTES = 'STRINGIFY_BYTES';
var STRINGIFY_EPOCH_TIME = exports.STRINGIFY_EPOCH_TIME = 'STRINGIFY_EPOCH_TIME';
var GENERATE_FILE_URL = exports.GENERATE_FILE_URL = 'GENERATE_FILE_URL';
var REPLACE_NEWTAB_WITH_NEWONE = exports.REPLACE_NEWTAB_WITH_NEWONE = 'REPLACE_NEWTAB_WITH_NEWONE';
var REMOVE_PREFERENCES = exports.REMOVE_PREFERENCES = 'REMOVE_PREFERENCES';
var SET_FAVICON = exports.SET_FAVICON = 'SET_FAVICON';
var LOAD_STYLESHEET = exports.LOAD_STYLESHEET = 'LOAD_STYLESHEET';
var HISTORY_BACK = exports.HISTORY_BACK = 'HISTORY_BACK';
var REPLACE_LOCATION = exports.REPLACE_LOCATION = 'REPLACE_LOCATION';
var RELOAD_LOCATION = exports.RELOAD_LOCATION = 'RELOAD_LOCATION';
var DISABLE_BROWSER_ACTION = exports.DISABLE_BROWSER_ACTION = 'DISABLE_BROWSER_ACTION';
var ENABLE_BROWSER_ACTION = exports.ENABLE_BROWSER_ACTION = 'ENABLE_BROWSER_ACTION';
var RELOAD_PREFERENCES = exports.RELOAD_PREFERENCES = 'RELOAD_PREFERENCES';
var RELOAD_TAB = exports.RELOAD_TAB = 'RELOAD_TAB';
var GET_MULTI_SEARCH_SUGGESTIONS = exports.GET_MULTI_SEARCH_SUGGESTIONS = 'GET_MULTI_SEARCH_SUGGESTIONS';

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function FirstChild(props) {
    var childrenArray = React.Children.toArray(props.children);
    return childrenArray[0] || null;
}

exports.default = FirstChild;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "b495e340f4ef8924fea0284c1bf9e7ac.woff";

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "2bfc185be71f44cd73ac81511fc1f5a5.woff";

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "c5a5cbf4dbcaa7064f2bc77f52101aec.otf";

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "e5d3501d500d07b0a1e952b0f8a81d78.woff";

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* tslint:disable:no-unused-variable */

// Importing all the components that are available in the engine

/* tslint:enable:no-unused-variable */


var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _Polyfill = __webpack_require__(23);

var _Polyfill2 = _interopRequireDefault(_Polyfill);

var _components = __webpack_require__(37);

var Components = _interopRequireWildcard(_components);

var _Consts = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts);

var _reactDom = __webpack_require__(7);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Utils = __webpack_require__(2);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ConfigurationService = __webpack_require__(20);

var _ConfigurationService2 = _interopRequireDefault(_ConfigurationService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _GlobalService = __webpack_require__(70);

var _GlobalService2 = _interopRequireDefault(_GlobalService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

__webpack_require__(71);

if (localStorage.getItem('base')) document.write('<base href="' + localStorage.getItem('base') + '"/>');

var clientsEnvsConfiguration = _Consts.HTML_TYPES;
var conf = _ConfigurationService2.default;
var configuration = void 0;
var hashObject = (0, _Utils.stringToObject)(window.location.hash, '-', '_', '#');
var HtmlVarTag = document.getElementsByTagName('VAR')[0];
var HtmlEnv = HtmlVarTag && HtmlVarTag.getAttribute('env') ? HtmlVarTag.getAttribute('env') : 'client';
var env_ = (typeof hashObject === 'undefined' ? 'undefined' : _typeof(hashObject)) === 'object' && hashObject[_Consts.HASH_ENV_PREFIX] ? hashObject[_Consts.HASH_ENV_PREFIX] : (typeof hashObject === 'undefined' ? 'undefined' : _typeof(hashObject)) === 'object' && hashObject[_Consts.HASH_ENV_PREFIX.replace('_', '')] ? hashObject[_Consts.HASH_ENV_PREFIX.replace('_', '')] : HtmlEnv;
if (HtmlVarTag) {
    HtmlVarTag.setAttribute('env', env_);
}

conf.load().then(_GlobalService2.default.load).then(function () {
    configuration = conf.getConfiguration();
    _LoggerService2.default.debug('Configuration loaded');
    var extensionComponentKeys = Object.keys(configuration.components);
    var loadedApp = false;
    var childCount = 0;
    var envConfig = {};
    clientsEnvsConfiguration = configuration.clientsEnvsConfiguration ? _assign({}, clientsEnvsConfiguration, configuration.clientsEnvsConfiguration) : clientsEnvsConfiguration;
    if (env_ && clientsEnvsConfiguration[env_]) {
        envConfig = clientsEnvsConfiguration[env_];

        for (var i = 0; !loadedApp && i < extensionComponentKeys.length; i++) {
            var component = configuration.components[extensionComponentKeys[i]];
            if (component.type === envConfig.parentType) {
                if (component.style) {
                    try {
                        var body = document.getElementsByTagName('BODY')[0];
                        for (var styleKey in component.style) {
                            body.style[styleKey] = component.style[styleKey];
                        }
                    } catch (e) {}
                }
                if (component.rootStyle) {
                    try {
                        var root = document.getElementById('root');
                        for (var rootStyleKey in component.rootStyle) {
                            root.style[rootStyleKey] = component.rootStyle[rootStyleKey];
                        }
                    } catch (e) {}
                }
                for (var j = 0; j < component.components.length; j++) {
                    var componentNewTab = component.components[j];

                    if (componentNewTab.id === envConfig.mainWindowId) {
                        _EventsService2.default.on(_Consts.STORAGE_UPDATED_EVENT, function () {
                            var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                            pref.reloadAll(args.key || false);
                        });
                        if (componentNewTab['components']) childCount = componentNewTab['components'].length;
                        var App = _ComponentsFactory2.default.createComponent(componentNewTab.type);

                        (0, _reactDom.render)(React.createElement(App, { config: componentNewTab }), document.getElementById('root'));
                    } else {
                        _ServiceFactory2.default.load(componentNewTab, env_);
                    }
                }
                loadedApp = true;
            } else if (component.type === _Consts.COMMON_COMPONENTS_TYPE) {
                _ServiceFactory2.default.load(component, env_);
            }
        }
    }

    if (!childCount) loadedApp = false;
    if (loadedApp) {
        var event = envConfig.finishEvent || _Consts.CLIENT_LOADED_EVENT;
        _EventsService2.default.trigger(event);
        _LoggerService2.default.debug('App bootstrapped');
    } else {
        _LoggerService2.default.debug('App failed to load');
        _LoggerService2.default.track('error', env_ + '_comp_missing');
        try {
            _BrowserService2.default.windowsGetAll(function (windowsArr) {
                if (!Array.isArray(windowsArr)) return;
                if (windowsArr.length > 1) {
                    window.close();
                    return;
                }
                _BrowserService2.default.tabsQuery({ currentWindow: true }, function (tabs) {
                    if (!tabs) return;
                    if (tabs.length > 1) window.close();else window.location.href = 'about:blank';
                });
            });
        } catch (e) {
            _LoggerService2.default.track('error', e.message);
        }
    }
});

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Container = __webpack_require__(24);

var _Container2 = _interopRequireDefault(_Container);

var _Link = __webpack_require__(50);

var _Link2 = _interopRequireDefault(_Link);

var _Text = __webpack_require__(51);

var _Text2 = _interopRequireDefault(_Text);

var _Item = __webpack_require__(22);

var _Item2 = _interopRequireDefault(_Item);

var _Input = __webpack_require__(52);

var _Input2 = _interopRequireDefault(_Input);

var _Iframe = __webpack_require__(53);

var _Iframe2 = _interopRequireDefault(_Iframe);

var _ItemsContainer = __webpack_require__(54);

var _ItemsContainer2 = _interopRequireDefault(_ItemsContainer);

var _SearchEngineSelect = __webpack_require__(55);

var _SearchEngineSelect2 = _interopRequireDefault(_SearchEngineSelect);

var _SearchAutoSuggest = __webpack_require__(57);

var _SearchAutoSuggest2 = _interopRequireDefault(_SearchAutoSuggest);

var _SupportButton = __webpack_require__(58);

var _SupportButton2 = _interopRequireDefault(_SupportButton);

var _IntervalComponents = __webpack_require__(59);

var _IntervalComponents2 = _interopRequireDefault(_IntervalComponents);

var _Popup = __webpack_require__(60);

var _Popup2 = _interopRequireDefault(_Popup);

var _Clock = __webpack_require__(61);

var _Clock2 = _interopRequireDefault(_Clock);

var _Weather = __webpack_require__(62);

var _Weather2 = _interopRequireDefault(_Weather);

var _RssFeed = __webpack_require__(63);

var _RssFeed2 = _interopRequireDefault(_RssFeed);

var _RssFeedsContainer = __webpack_require__(64);

var _RssFeedsContainer2 = _interopRequireDefault(_RssFeedsContainer);

var _Countdown = __webpack_require__(65);

var _Countdown2 = _interopRequireDefault(_Countdown);

var _Maps = __webpack_require__(66);

var _Maps2 = _interopRequireDefault(_Maps);

var _Image = __webpack_require__(67);

var _Image2 = _interopRequireDefault(_Image);

var _Menu = __webpack_require__(68);

var _Menu2 = _interopRequireDefault(_Menu);

var _TabsManager = __webpack_require__(69);

var _TabsManager2 = _interopRequireDefault(_TabsManager);

var _GenericReactComponentWrapper = __webpack_require__(21);

var _GenericReactComponentWrapper2 = _interopRequireDefault(_GenericReactComponentWrapper);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/***/ }),
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Files = exports.Files = function () {
    function Files() {
        _classCallCheck(this, Files);

        this.fileObject = {};
    }

    _createClass(Files, [{
        key: "getAllFiles",
        value: function getAllFiles() {
            return this.fileObject;
        }
    }, {
        key: "getFileByName",
        value: function getFileByName(name) {
            return this.fileObject[name];
        }
    }, {
        key: "deleteAllFiles",
        value: function deleteAllFiles() {
            this.fileObject = {};
            return true;
        }
    }, {
        key: "deleteFileByName",
        value: function deleteFileByName(name) {
            if (!name) return false;
            delete this.fileObject[name];
            return true;
        }
    }, {
        key: "fileExist",
        value: function fileExist(name) {
            if (!name) return false;
            return this.fileObject[name];
        }
    }, {
        key: "addFiles",
        value: function addFiles(fileObject) {
            // files with the same name will be overwritten
            this.fileObject = _assign({}, this.fileObject, fileObject);
            return true;
        }
    }, {
        key: "generateFileUrl",
        value: function generateFileUrl(fileName) {
            if (!fileName || !this.fileObject[fileName]) return false;
            try {
                return URL.createObjectURL(this.fileObject[fileName]);
            } catch (e) {
                return false;
            }
        }
    }]);

    return Files;
}();

var service = new Files();
exports.default = service;

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export addStyleToHead */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return componentStyles; });
/* unused harmony export dangerousStyleValue */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getStyleCache; });
/* unused harmony export getStyleKeysForProps */
/* unused harmony export pseudoelements */
/* unused harmony export pseudoclasses */
/* unused harmony export hyphenateStyleName */
/* unused harmony export stringHash */
var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);
var styleElement;
if (false) {
  if (typeof module.hot.data === 'object') {
    styleElement = module.hot.data.styleElement;
  }
  module.hot.addDisposeHandler(function(data) {
    data.styleElement = styleElement;
  });
}
if (canUseDOM && !styleElement) {
  styleElement = document.createElement('style');
  styleElement.type = 'text/css';
  styleElement.appendChild(document.createTextNode('/* jsxstyle */'));
  document.head.appendChild(styleElement);
}
function addStyleToHead(rule) {
  if (styleElement) {
    var sheet = styleElement.sheet;
    try {
      sheet.insertRule(rule, sheet.cssRules.length);
    } catch (insertError) {
      // insertRule will fail for rules with pseudoelements the browser doesn't support.
      // see: https://github.com/smyte/jsxstyle/issues/75
      if (process.env.NODE_ENV !== 'production') {
        // eslint-disable-next-line no-console
        console.error(
          '[jsxstyle] Could not insert rule at position ' +
            sheet.cssRules.length +
            ': `' +
            rule +
            '`'
        );
      }
    }
  }
}

var componentStyles = {
  Box: null,
  Block: { display: 'block' },
  Inline: { display: 'inline' },
  InlineBlock: { display: 'inline-block' },
  Row: { display: 'flex', flexDirection: 'row' },
  Col: { display: 'flex', flexDirection: 'column' },
  Grid: { display: 'grid' },
};

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
//  A hearty blend of the following two files:
// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/CSSProperty.js
// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/dangerousStyleValue.js
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true,
};
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});
function dangerousStyleValue(name, value) {
  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }
  if (
    typeof value === 'number' &&
    value !== 0 &&
    !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
  ) {
    if (value > -1 && value < 1) {
      return Math.round(value * 1e6) / 1e4 + '%';
    }
    return value + 'px';
  }
  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
var hyphenateCache = {};
function hyphenateStyleName(styleName) {
  if (hyphenateCache.hasOwnProperty(styleName)) {
    return hyphenateCache[styleName];
  }
  var hyphenatedString = styleName
    .replace(uppercasePattern, '-$1')
    .toLowerCase()
    .replace(msPattern, '-ms-');
  hyphenateCache[styleName] = hyphenatedString;
  return hyphenateCache[styleName];
}

// global flag makes subsequent calls of capRegex.test advance to the next match
var capRegex = /[A-Z]/g;
var pseudoelements = {
  after: true,
  before: true,
  placeholder: true,
  selection: true,
};
var pseudoclasses = {
  active: true,
  checked: true,
  disabled: true,
  empty: true,
  enabled: true,
  focus: true,
  hover: true,
  invalid: true,
  required: true,
  target: true,
  valid: true,
};
var specialCaseProps = {
  children: true,
  class: true,
  className: true,
  component: true,
  props: true,
  style: true,
  mediaQueries: true,
};
function getStyleKeysForProps(props, pretty) {
  if (pretty === void 0) {
    pretty = false;
  }
  if (typeof props !== 'object' || props === null) {
    return null;
  }
  var propKeys = Object.keys(props).sort();
  var keyCount = propKeys.length;
  if (keyCount === 0) {
    return null;
  }
  var mediaQueries = props.mediaQueries;
  var hasMediaQueries = typeof mediaQueries === 'object';
  var usesMediaQueries = false;
  var styleKeyObj = {};
  var classNameKey = '';
  var seenMQs = {};
  var mqSortKeys = {};
  if (hasMediaQueries) {
    var idx = -1;
    for (var k in mediaQueries) {
      mqSortKeys[k] = '@' + (1000 + ++idx);
    }
  }
  for (var idx = -1; ++idx < keyCount; ) {
    var originalPropName = propKeys[idx];
    if (
      specialCaseProps.hasOwnProperty(originalPropName) ||
      !props.hasOwnProperty(originalPropName)
    ) {
      continue;
    }
    var propName = originalPropName;
    var propSansMQ = void 0;
    var pseudoelement = void 0;
    var pseudoclass = void 0;
    var mqKey = void 0;
    capRegex.lastIndex = 0;
    var splitIndex = 0;
    var prefix =
      capRegex.test(originalPropName) &&
      capRegex.lastIndex > 1 &&
      originalPropName.slice(0, capRegex.lastIndex - 1);
    // check for media query prefix
    if (prefix && hasMediaQueries && mediaQueries.hasOwnProperty(prefix)) {
      usesMediaQueries = true;
      mqKey = prefix;
      splitIndex = capRegex.lastIndex - 1;
      propSansMQ =
        originalPropName[splitIndex].toLowerCase() +
        originalPropName.slice(splitIndex + 1);
      prefix =
        capRegex.test(originalPropName) &&
        propSansMQ.slice(0, capRegex.lastIndex - splitIndex - 1);
    }
    // check for pseudoelement prefix
    if (prefix && pseudoelements.hasOwnProperty(prefix)) {
      pseudoelement = prefix;
      splitIndex = capRegex.lastIndex - 1;
      prefix =
        capRegex.test(originalPropName) &&
        originalPropName[splitIndex].toLowerCase() +
          originalPropName.slice(splitIndex + 1, capRegex.lastIndex - 1);
    }
    // check for pseudoclass prefix
    if (prefix && pseudoclasses.hasOwnProperty(prefix)) {
      pseudoclass = prefix;
      splitIndex = capRegex.lastIndex - 1;
    }
    // trim prefixes off propName
    if (splitIndex > 0) {
      propName =
        originalPropName[splitIndex].toLowerCase() +
        originalPropName.slice(splitIndex + 1);
    }
    var styleValue = dangerousStyleValue(propName, props[originalPropName]);
    if (styleValue === '') {
      continue;
    }
    var mediaQuery = mqKey && mediaQueries[mqKey];
    var mqSortKey = mqKey && mqSortKeys[mqKey];
    var key =
      '.' +
      (mqSortKey || '') +
      (pseudoclass ? ':' + pseudoclass : '') +
      (pseudoelement ? '::' + pseudoelement : '');
    if (!styleKeyObj.hasOwnProperty(key)) {
      styleKeyObj[key] = { styles: pretty ? '\n' : '' };
      if (mediaQuery) styleKeyObj[key].mediaQuery = mediaQuery;
      if (pseudoclass) styleKeyObj[key].pseudoclass = pseudoclass;
      if (pseudoelement) styleKeyObj[key].pseudoelement = pseudoelement;
    }
    if (mediaQuery) {
      seenMQs[mediaQuery] = seenMQs[mediaQuery] || '';
      seenMQs[mediaQuery] += propSansMQ + ':' + styleValue + ';';
    } else {
      classNameKey += originalPropName + ':' + styleValue + ';';
    }
    styleKeyObj[key].styles +=
      (pretty ? '  ' : '') +
      hyphenateStyleName(propName) +
      (pretty ? ': ' : ':') +
      styleValue +
      (pretty ? ';\n' : ';');
  }
  // append media query key
  if (usesMediaQueries) {
    var mqKeys = Object.keys(seenMQs).sort();
    for (var idx = -1, len = mqKeys.length; ++idx < len; ) {
      var mediaQuery = mqKeys[idx];
      classNameKey += '@' + mediaQuery + '~' + seenMQs[mediaQuery];
    }
  }
  if (classNameKey === '') {
    return null;
  }
  styleKeyObj.classNameKey = classNameKey;
  return styleKeyObj;
}

// thx darksky: https://git.io/v9kWO
function stringHash(str) {
  var hash = 5381,
    i = str.length;
  while (i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
     * integers. Since we want the results to be always positive, convert the
     * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}

function cannotInject() {
  throw new Error(
    'jsxstyle error: `injectOptions` must be called before any jsxstyle components mount.'
  );
}
function alreadyInjected() {
  throw new Error(
    'jsxstyle error: `injectOptions` should be called once and only once.'
  );
}
function getStringHash(key) {
  return '_' + stringHash(key).toString(36);
}
function getStyleCache() {
  var _classNameCache = {};
  var getClassNameForKey = getStringHash;
  var onInsertRule;
  var pretty = false;
  var styleCache = {
    reset: function() {
      _classNameCache = {};
    },
    injectOptions: function(options) {
      if (options) {
        if (options.getClassName) getClassNameForKey = options.getClassName;
        if (options.onInsertRule) onInsertRule = options.onInsertRule;
        if (options.pretty) pretty = options.pretty;
      }
      styleCache.injectOptions = alreadyInjected;
    },
    getClassName: function(props, classNameProp) {
      styleCache.injectOptions = cannotInject;
      var styleObj = getStyleKeysForProps(props, pretty);
      if (typeof styleObj !== 'object' || styleObj === null) {
        return classNameProp || null;
      }
      var key = styleObj.classNameKey;
      if (key && !_classNameCache.hasOwnProperty(key)) {
        _classNameCache[key] = getClassNameForKey(key, props);
        delete styleObj.classNameKey;
        Object.keys(styleObj)
          .sort()
          .forEach(function(k) {
            var selector = '.' + _classNameCache[key];
            // prettier-ignore
            var _a = styleObj[k], pseudoclass = _a.pseudoclass, pseudoelement = _a.pseudoelement, mediaQuery = _a.mediaQuery, styles = _a.styles;
            var rule =
              selector +
              (pseudoclass ? ':' + pseudoclass : '') +
              (pseudoelement ? '::' + pseudoelement : '') +
              (' {' + styles + '}');
            if (mediaQuery) {
              rule = '@media ' + mediaQuery + ' { ' + rule + ' }';
            }
            if (
              onInsertRule &&
              // if the function returns false, bail.
              onInsertRule(rule, props) === false
            ) {
              return;
            }
            addStyleToHead(rule);
          });
      }
      return _classNameCache[key] && classNameProp
        ? classNameProp + ' ' + _classNameCache[key]
        : _classNameCache[key] || classNameProp || null;
    },
  };
  return styleCache;
}



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(18)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Actions = __webpack_require__(10);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Utils = __webpack_require__(2);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Link = function (_React$Component) {
    _inherits(Link, _React$Component);

    function Link(props) {
        _classCallCheck(this, Link);

        var _this = _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));

        _this.state = {
            hovered: false,
            style: {}
        };
        return _this;
    }

    _createClass(Link, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            return (0, _Utils.trueOrFalse)(hide);
        }
    }, {
        key: 'render',
        value: function render() {
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            if (this.shouldHide()) return null;
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var title = _BrowserService2.default.getTranslationOnlyIfExist(this.props.config.title, prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));
            return React.createElement(
                'a',
                { style: _assign({}, this.props.config.style ? this.props.config.style : {}, this.state ? this.state.style : {}),
                    href: this.props.config.href ? this.props.config.href : '#',
                    onClick: this.props.onClick,
                    target: this.props.config.href ? '_blank' : '' },
                title
            );
        }
    }]);

    return Link;
}(React.Component);

exports.default = Link;


_ComponentsFactory2.default.add(function () {
    return Link;
}, 'Link');

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Actions = __webpack_require__(10);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Utils = __webpack_require__(2);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _objectAssignDeep = __webpack_require__(15);

var _objectAssignDeep2 = _interopRequireDefault(_objectAssignDeep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block,
    Inline = _require.Inline;

var Text = function (_React$Component) {
    _inherits(Text, _React$Component);

    function Text(props) {
        _classCallCheck(this, Text);

        var _this = _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, props));

        _this.conditionalConfigMerge();
        _this.originalConfig = JSON.parse(JSON.stringify(props.config));
        _this.replaceConfigFunc();

        _this.state = {
            hovered: false
        };
        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);

        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        return _this;
    }

    _createClass(Text, [{
        key: 'conditionalConfigMerge',
        value: function conditionalConfigMerge() {
            var _this2 = this;

            var fromRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            try {
                if (!this.props.config.conditionalConfigMerge) return;
                var merger = function merger() {
                    var arr = (0, _Utils.isObject)(_this2.props.config.conditionalConfigMerge) ? [_this2.props.config.conditionalConfigMerge] : _this2.props.config.conditionalConfigMerge;
                    for (var i in arr) {
                        var settings = arr[i];
                        var cond = settings.c ? new _Condition2.default(settings.c) : null;
                        if (settings.config && (cond === null || cond && cond.check(_this2.props.config, settings, _this2.props.config))) {
                            _objectAssignDeep2.default.withOptions(_this2.props.config, [settings.config], settings.options || { arrayBehaviour: 'replace' });
                        }
                    }
                };
                if (!fromRender) {
                    merger();
                } else if (!this.props.config.conditionalConfigMerge.hasOwnProperty('onRender') || this.props.config.conditionalConfigMerge.onRender) {
                    merger();
                }
            } catch (e) {}
        }
    }, {
        key: 'replaceConfigFunc',
        value: function replaceConfigFunc() {
            var extraFuncs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            try {
                if ((0, _Utils.isArray)(this.originalConfig.placeHoldersFunctions)) {
                    var phFuncs = (0, _Utils.isArray)(extraFuncs) ? [].concat(_toConsumableArray(this.originalConfig.placeHoldersFunctions), _toConsumableArray(extraFuncs)) : this.originalConfig.placeHoldersFunctions;
                    var a = (0, _Utils.placeHolderFunctions)(this.originalConfig, phFuncs, {}, _assign({}, this.originalConfig, extraData));
                    _assign(this.props.config, a);
                }
            } catch (e) {}
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
            if (this.props.config.events && this.props.config.events.onMount) {
                _EventsService2.default.trigger(this.props.config.events.onMount.name, [_assign({}, this.props.config.events.onMount, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() })]);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            return (0, _Utils.trueOrFalse)(hide);
        }
    }, {
        key: 'render',
        value: function render() {
            this.conditionalConfigMerge(true);
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            var html = React.createElement('div', { style: { display: 'none' } });
            if (this.shouldHide()) return html;

            var text = this.handleText();
            html = React.createElement(
                'div',
                { ref: this.props.config.id,
                    style: _assign({}, this.props.config.style ? this.props.config.style : {}, this.state.style, this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {}),
                    onClick: this.handleClick,
                    onMouseEnter: this.handleMouseEnter,
                    onMouseLeave: this.handleMouseLeave,
                    dangerouslySetInnerHTML: this.props.config.html === true ? { __html: text } : null },
                this.props.config.html === true ? null : text
            );
            return html;
        }
    }, {
        key: 'handleText',
        value: function handleText() {
            var text = this.props.config.dynamic ? this.getCurrentText() : this.state.hasOwnProperty('text') ? this.state.text : this.props.config.text;
            if (this.props.config.disable_trans != true) {
                text = _BrowserService2.default.getTranslationOnlyIfExist(text, this.pref.get(_Consts.TRANSLATION_ACTIVE_KEY));
            }
            if (this.props.config.textOptions) {
                if (this.props.config.textOptions.capitalize) {
                    text = (0, _Utils.capitalizeFirstLetter)(text);
                }
            }
            return text;
        }
    }, {
        key: 'getCurrentText',
        value: function getCurrentText() {
            return this.state.text || this.state.text === '' ? this.state.text : this.props.config.text_key ? localStorage[this.props.config.text_key] : this.props.config.text ? this.props.config.text : '';
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                var addedParams = { active: this.state.active };
                addedParams = addedParams.active == undefined ? null : addedParams;
                var params = _assign({}, addedParams, this.props.config.events.onClick, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() });
                event.stopPropagation();
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }]);

    return Text;
}(React.Component);

exports.default = Text;


_ComponentsFactory2.default.add(function () {
    return Text;
}, 'Text');

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _FirstChild = __webpack_require__(31);

var _FirstChild2 = _interopRequireDefault(_FirstChild);

var _Actions = __webpack_require__(10);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = function (_React$Component) {
    _inherits(Input, _React$Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.handleFocus = _this.handleFocus.bind(_this);
        _this.handleBlur = _this.handleBlur.bind(_this);

        _this.state = {
            text: props.config.text || '',
            style: {}
        };
        return _this;
    }

    _createClass(Input, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.config.focus) {
                this.textInput.autofocus = true;

                setTimeout(function () {
                    // TODO: Check possible fix for chrome stealing the input focus at the address bar
                    this.textInput.focus();
                }.bind(this), 1000);

                this.textInput.focus();
            }
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }

            _Actions.register.bind(this)(this.props.config.behaviours);
            if (this.props.config.events && this.props.config.events.onMount) {
                _EventsService2.default.trigger(this.props.config.events.onMount.name, [_assign({}, this.props.config.events.onMount)]);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var component = React.createElement('div', { style: { display: 'none' } });
            var inputType = this.props.config.inputType ? this.props.config.inputType : 'text';
            var text = _assign({}, { text: this.props.config.text }, this.state && this.state.text !== undefined ? this.state : {}).text;
            text = _BrowserService2.default.getTranslationOnlyIfExist(text, prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));
            var dir = this.props.config.direction || 'ltr';
            var HtmlTag = this.props.config.htmlTag || 'input';
            if (this.props.config.hide) return component;
            var focusStyle = _assign({}, this.props.config.focusStyle, this.state.focusStyle);
            var style = _assign({}, this.props.config.style, this.state.style);
            style = this.state.focus && Object.keys(focusStyle) > 0 ? focusStyle : style;
            component = React.createElement(HtmlTag, {
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                type: inputType,
                dir: dir,
                ref: function ref(input) {
                    return _this2.textInput = input;
                },
                autoFocus: this.props.config.focus,
                onClick: this.handleClick,
                onKeyDown: this.handleKeyDown,
                onChange: this.handleChange,
                placeholder: this.props.config.placeholder,
                value: (inputType === 'text' || inputType === 'search') && text === undefined ? '' : text,
                style: style });

            if (this.props.config.animateClass) {
                component = React.createElement(
                    ReactCSSTransitionGroup,
                    { component: _FirstChild2.default,
                        transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    !this.props.config.hide ? component : null
                );
            }

            return component;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(e) {
            if (this.props.config.events && this.props.config.events.onClick) {
                var params = _assign({}, this.props.config.events.onClick);
                e.stopPropagation();
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
        }
    }, {
        key: 'handleChange',
        value: function handleChange(e) {
            this.setState({ text: e.target.value });

            if (this.props.config.events && this.props.config.events.onChange) {
                var params = _assign({}, this.props.config.events.onChange, {
                    text: e.target.value.text || e.target.value
                });
                _EventsService2.default.trigger(this.props.config.events.onChange.name, [_assign({}, params, { file: this.textInput.files }), _assign({}, this.props.config)]);
            }
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(e) {
            if (this.props.config.events && this.props.config.events.onKeyDown) {
                var event = this.props.config.events.onKeyDown;
                var params = _assign({}, this.props.config.events.onKeyDown, event, {
                    text: e.target.value.text || e.target.value,
                    altKey: e.altKey,
                    charCode: e.charCode,
                    ctrlKey: e.ctrlKey,
                    key: e.key,
                    keyCode: e.keyCode,
                    locale: e.locale,
                    location: e.location,
                    metaKey: e.metaKey,
                    repeat: e.repeat,
                    shiftKey: e.shiftKey,
                    which: e.which
                });

                _EventsService2.default.trigger(event.name, [params, _assign({}, this.props.config)]);
            }
        }
    }, {
        key: 'handleFocus',
        value: function handleFocus() {
            this.setState({ focus: true });
        }
    }, {
        key: 'handleBlur',
        value: function handleBlur() {
            this.setState({ focus: false });
        }
    }]);

    return Input;
}(React.Component);

exports.default = Input;


_ComponentsFactory2.default.add(function () {
    return Input;
}, 'Input');

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Actions = __webpack_require__(10);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Utils = __webpack_require__(2);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _objectAssignDeep = __webpack_require__(15);

var _objectAssignDeep2 = _interopRequireDefault(_objectAssignDeep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var Iframe = function (_React$Component) {
    _inherits(Iframe, _React$Component);

    function Iframe(props) {
        _classCallCheck(this, Iframe);

        var _this = _possibleConstructorReturn(this, (Iframe.__proto__ || Object.getPrototypeOf(Iframe)).call(this, props));

        _this.conditionalConfigMerge();
        _this.originalConfig = JSON.parse(JSON.stringify(props.config));
        _this.replaceConfigFunc();

        _this.state = {
            hovered: false
        };
        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        _this.state.iframeSettings = _this.props.config.iframeSettings;

        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        return _this;
    }

    _createClass(Iframe, [{
        key: 'conditionalConfigMerge',
        value: function conditionalConfigMerge() {
            var _this2 = this;

            var fromRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            try {
                if (!this.props.config.conditionalConfigMerge) return;
                var merger = function merger() {
                    var arr = (0, _Utils.isObject)(_this2.props.config.conditionalConfigMerge) ? [_this2.props.config.conditionalConfigMerge] : _this2.props.config.conditionalConfigMerge;
                    for (var i in arr) {
                        var settings = arr[i];
                        var cond = settings.c ? new _Condition2.default(settings.c) : null;
                        if (settings.config && (cond === null || cond && cond.check(_this2.props.config, settings, _this2.props.config))) {
                            _objectAssignDeep2.default.withOptions(_this2.props.config, [settings.config], settings.options || { arrayBehaviour: 'replace' });
                        }
                    }
                };
                if (!fromRender) {
                    merger();
                } else if (!this.props.config.conditionalConfigMerge.hasOwnProperty('onRender') || this.props.config.conditionalConfigMerge.onRender) {
                    merger();
                }
            } catch (e) {}
        }
    }, {
        key: 'replaceConfigFunc',
        value: function replaceConfigFunc() {
            var extraFuncs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            try {
                var phFuncs = Array.isArray(this.props.config.placeHoldersFunctions) ? [].concat(_toConsumableArray(this.props.config.placeHoldersFunctions), _toConsumableArray(extraFuncs)) : extraFuncs;
                var a = (0, _Utils.placeHolderFunctions)(this.props.config, phFuncs, {}, _assign({}, this.props.config, extraData));
                _assign(this.props.config, a);
            } catch (e) {}
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            return (0, _Utils.trueOrFalse)(hide);
        }
    }, {
        key: 'render',
        value: function render() {
            this.conditionalConfigMerge(true);
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            var containerProps = {
                onClick: this.handleClick,
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave
            };
            var html = null;
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            if (this.shouldHide()) return html;
            var iframeSettings = this.props.config.iframeSettings;
            var attr = {
                src: this.state.src || this.props.config.src || iframeSettings['src'] || '',
                width: iframeSettings['width'] || '300px',
                height: iframeSettings['height'] || '300px',
                frameBorder: iframeSettings['frameBorder'] || '0',
                scrolling: iframeSettings['scrolling'] || 'no',
                style: iframeSettings['style'] || {}
            };
            if (iframeSettings['allowFullScreen']) {
                attr['allowFullScreen'] = iframeSettings['allowFullScreen'];
            }

            var iframeHtml = React.createElement('iframe', attr);

            html = React.createElement(
                Block,
                { style: _assign({}, this.props.config.style || {}, this.state.style, this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {}), props: containerProps },
                iframeHtml
            );
            return html;
        }
    }, {
        key: 'componentDidCatch',
        value: function componentDidCatch(error, info) {
            _LoggerService2.default.debug(error, info);
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
            if (this.props.config.events && this.props.config.events.onMouseEnter) {
                event.stopPropagation();
                event.preventDefault();
                _EventsService2.default.trigger(this.props.config.events.onMouseEnter.name, [_assign({}, this.props.config.events.onMouseEnter, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() })]);
            }
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
            if (this.props.config.events && this.props.config.events.onMouseLeave) {
                event.stopPropagation();
                event.preventDefault();
                _EventsService2.default.trigger(this.props.config.events.onMouseLeave.name, [_assign({}, this.props.config.events.onMouseLeave, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() })]);
            }
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                var addedParams = { active: this.state.active };
                addedParams = addedParams.active === undefined ? null : addedParams;
                var params = _assign({}, addedParams, this.props.config.events.onClick, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() });
                event.stopPropagation();
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }]);

    return Iframe;
}(React.Component);

exports.default = Iframe;


_ComponentsFactory2.default.add(function () {
    return Iframe;
}, 'Iframe');

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var ItemsContainer = function (_React$Component) {
    _inherits(ItemsContainer, _React$Component);

    function ItemsContainer(props) {
        _classCallCheck(this, ItemsContainer);

        return _possibleConstructorReturn(this, (ItemsContainer.__proto__ || Object.getPrototypeOf(ItemsContainer)).call(this, props));
    }

    _createClass(ItemsContainer, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
        }
    }, {
        key: 'createComponents',
        value: function createComponents() {
            var childrenComponents = void 0;
            if (this.props.config.components) {
                var components = this.props.config.components;
                var itemStyle = this.props.config.itemStyle;
                var self = this;

                childrenComponents = Object.keys(this.props.config.components).map(function (componentKey) {
                    var ComponentObject = _ComponentsFactory2.default.createComponent('Item');
                    var config = _assign({}, components[componentKey]);
                    config.style = _assign({}, itemStyle, components[componentKey].style);
                    return React.createElement(ComponentObject, { key: componentKey, config: config,
                        onClick: self.handleItemClick.bind(this, componentKey) });
                });
            }

            return childrenComponents;
        }
    }, {
        key: 'render',
        value: function render() {
            var children = this.createComponents();
            return React.createElement(
                Block,
                { style: this.props.config.style },
                children
            );
        }
    }, {
        key: 'handleItemClick',
        value: function handleItemClick(componentKey, event) {}
    }]);

    return ItemsContainer;
}(React.Component);

exports.default = ItemsContainer;


_ComponentsFactory2.default.add(function () {
    return ItemsContainer;
}, 'ItemsContainer');

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _DropDown = __webpack_require__(56);

var _DropDown2 = _interopRequireDefault(_DropDown);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchEngineSelect = function (_React$Component) {
    _inherits(SearchEngineSelect, _React$Component);

    function SearchEngineSelect(props) {
        _classCallCheck(this, SearchEngineSelect);

        var _this = _possibleConstructorReturn(this, (SearchEngineSelect.__proto__ || Object.getPrototypeOf(SearchEngineSelect)).call(this, props));

        _this.search = _ServiceFactory2.default.get(_Consts.SEARCH_SERVICE);
        _this.state = {
            options: _this.searchEngines2Options(),
            selectedOption: _this.search.getTempOrCurrentSearchEngineIndex()
        };
        return _this;
    }

    _createClass(SearchEngineSelect, [{
        key: 'render',
        value: function render() {
            var state = this.getStateWithTempOrCurrentEngine();
            return React.createElement(_DropDown2.default, { config: state,
                onChange: this.handleClick.bind(this) });
        }
    }, {
        key: 'getStateWithTempOrCurrentEngine',
        value: function getStateWithTempOrCurrentEngine() {
            return _assign({}, this.props.config, this.state, { selectedOption: this.search.getTempOrCurrentSearchEngineIndex() });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(selectedOption) {
            this.search.setCurrentSearchEngine(selectedOption.value);
            this.setState({ selectedOption: this.search.getTempOrCurrentSearchEngineIndex() });

            if (this.props.config.events && this.props.config.events.onChange) {
                var params = _assign({}, this.props.config.events.onChange);
                var engineId = { 'engineId': this.search.getEngines()[this.search.getTempOrCurrentSearchEngineIndex()].id };

                _EventsService2.default.trigger(this.props.config.events.onChange.name, [_assign({}, params, this.props.config, engineId)]);
            }
        }
    }, {
        key: 'searchEngines2Options',
        value: function searchEngines2Options() {
            var options = [];
            var engines = this.search.getEngines();

            for (var i = 0; i < Object.keys(engines).length; i++) {
                options.push({
                    label: engines[i].logo ? '' : engines[i].shortName,
                    value: engines[i].id,
                    style: engines[i].logo ? {
                        backgroundImage: 'url(content/images/' + engines[i].logo + ')'
                    } : {}
                });
            }

            return options;
        }
    }]);

    return SearchEngineSelect;
}(React.Component);

exports.default = SearchEngineSelect;


_ComponentsFactory2.default.add(function () {
    return SearchEngineSelect;
}, 'SearchEngineSelect');

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var DropDown = function (_React$Component) {
    _inherits(DropDown, _React$Component);

    function DropDown(props) {
        _classCallCheck(this, DropDown);

        var _this = _possibleConstructorReturn(this, (DropDown.__proto__ || Object.getPrototypeOf(DropDown)).call(this, props));

        _this.state = {
            selected: props.config ? props.config.options[props.config.selectedOption] : {
                label: props.placeholder || 'Select...',
                value: ''
            },
            isOpen: false,
            hovered: false
        };

        _this.mounted = true;
        _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);
        _this.fireChangeEvent = _this.fireChangeEvent.bind(_this);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        return _this;
    }

    _createClass(DropDown, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            if (newProps.config && newProps.config.options[newProps.config.selectedOption] !== this.state.selected) {
                this.setState({ selected: newProps.config.options[newProps.config.selectedOption] });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            document.addEventListener('click', this.handleDocumentClick, false);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            document.removeEventListener('click', this.handleDocumentClick, false);
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
        }
    }, {
        key: 'handleDocumentClick',
        value: function handleDocumentClick(event) {
            if (this.mounted) {
                if (!ReactDOM.findDOMNode(this).contains(event.target)) {
                    this.setState({ isOpen: false });
                }
            }
        }
    }, {
        key: 'handleMouseDown',
        value: function handleMouseDown(event) {
            if (event.type === 'mousedown' && event.button !== 0) {
                return;
            }

            event.stopPropagation();
            event.preventDefault();

            this.setState({
                isOpen: !this.state.isOpen
            });
        }
    }, {
        key: 'setValue',
        value: function setValue(option) {
            var newState = {
                selected: option,
                isOpen: false
            };
            this.fireChangeEvent(newState);
            this.setState(newState);
        }
    }, {
        key: 'fireChangeEvent',
        value: function fireChangeEvent(newState) {
            if (newState.selected !== this.state.selected && this.props.onChange) {
                this.props.onChange(newState.selected);
            }
        }
    }, {
        key: 'renderOption',
        value: function renderOption(option, index) {
            var value = option.value || option.label || option;
            var label = option.label || (typeof option === 'string' ? option : ' ');
            var separator = index > 0 ? React.createElement(Block, { style: this.props.config.optionSeparatorStyle }) : null;

            return React.createElement(
                Block,
                { key: value },
                separator,
                React.createElement(
                    'div',
                    { style: _assign(option.style ? option.style : {}, this.props.config.optionStyle),
                        onMouseDown: this.setValue.bind(this, option),
                        onClick: this.setValue.bind(this, option) },
                    label
                )
            );
        }
    }, {
        key: 'renderMenu',
        value: function renderMenu() {
            var _this2 = this;

            var options = this.props.config.options;

            var ops = options.map(function (option, index) {
                return _this2.state.selected === option ? null : _this2.renderOption(option, index);
            });

            return ops.length ? ops : React.createElement(
                'div',
                null,
                'No options found'
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var containerProps = {
                onMouseEnter: this.handleMouseEnter.bind(this),
                onMouseLeave: this.handleMouseLeave.bind(this)
            };
            var baseClassName = this.props.baseClassName;

            var placeHolderValue = typeof this.state.selected === 'string' ? this.state.selected : this.state.selected.label;
            var value = React.createElement(
                'div',
                { style: this.props.config.valueWrapperStyle },
                placeHolderValue
            );
            var menu = this.state.isOpen ? React.createElement(
                Block,
                null,
                this.renderMenu()
            ) : null;

            return React.createElement(
                Block,
                { style: _assign({}, this.props.config.style ? this.props.config.style : {}, this.state.style, this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {}), props: containerProps },
                React.createElement(
                    'div',
                    { onMouseDown: this.handleMouseDown.bind(this),
                        style: _assign(this.state.selected.style ? this.state.selected.style : {}, this.props.config.optionStyle) },
                    value
                ),
                React.createElement(
                    Block,
                    { style: _assign({ display: this.state.isOpen ? 'block' : 'none' }, this.props.config.optionsContainerStyle) },
                    menu
                )
            );
        }
    }]);

    return DropDown;
}(React.Component);

exports.default = DropDown;


DropDown.defaultProps = { baseClassName: 'Dropdown' };

_ComponentsFactory2.default.add(function () {
    return DropDown;
}, 'DropDown');

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Actions = __webpack_require__(10);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var SearchAutoSuggest = function (_React$Component) {
    _inherits(SearchAutoSuggest, _React$Component);

    function SearchAutoSuggest(props) {
        _classCallCheck(this, SearchAutoSuggest);

        var _this = _possibleConstructorReturn(this, (SearchAutoSuggest.__proto__ || Object.getPrototypeOf(SearchAutoSuggest)).call(this, props));

        _this.search = _ServiceFactory2.default.get(_Consts.SEARCH_SERVICE);
        _this.state = {
            rows: [],
            selected: -1,
            style: {}
        };
        return _this;
    }

    _createClass(SearchAutoSuggest, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(args) {
            this.setState({ selected: args[0] });
        }
    }, {
        key: 'handleMouseClick',
        value: function handleMouseClick(args) {
            var selectedObject = this.state.rows[this.state.selected];
            if (!(0, _Utils.isObject)(selectedObject)) {
                selectedObject = { text: selectedObject };
            }
            _EventsService2.default.trigger(_Consts.AUTO_SUGGEST_SELECTED_CHANGE_EVENT, [selectedObject]);

            if (this.props.config.events && this.props.config.events.onClick) {
                var params = _assign({}, this.props.config.events.onClick, selectedObject, { searchObject: selectedObject });

                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
        }
    }, {
        key: 'renderRows',
        value: function renderRows() {
            var self = this;
            var dir = this.props.config.direction || 'ltr';
            return this.state.rows.map(function (row, id) {
                var text = (0, _Utils.isObject)(row) ? row.text : row;
                if (!text) {
                    return;
                }
                return React.createElement(
                    'div',
                    { dir: dir, key: id, style: self.state.selected === id ? self.props.config.rowStyleSelected : self.props.config.rowStyle,
                        onMouseEnter: self.handleMouseEnter.bind(self, [id]),
                        onClick: self.handleMouseClick.bind(self, [id]) },
                    text
                );
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var component = React.createElement('div', { style: { display: 'none' } });
            if (!this.props.config.hide && this.state.rows.length > 0) {
                component = React.createElement(
                    Block,
                    { style: _assign({}, this.props.config.style, this.state.style) },
                    this.renderRows()
                );
            }

            return component;
        }
    }]);

    return SearchAutoSuggest;
}(React.Component);

exports.default = SearchAutoSuggest;


_ComponentsFactory2.default.add(function () {
    return SearchAutoSuggest;
}, 'SearchAutoSuggest');

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _Item = __webpack_require__(22);

var _Item2 = _interopRequireDefault(_Item);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Actions = __webpack_require__(10);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    InlineBlock = _require.InlineBlock,
    Block = _require.Block;

var SupportButton = function (_React$Component) {
    _inherits(SupportButton, _React$Component);

    function SupportButton(props) {
        _classCallCheck(this, SupportButton);

        var _this = _possibleConstructorReturn(this, (SupportButton.__proto__ || Object.getPrototypeOf(SupportButton)).call(this, props));

        _this.state = {
            isOpen: false,
            menuStyle: {},
            style: {}
        };
        return _this;
    }

    _createClass(SupportButton, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleSupportButtonClick',
        value: function handleSupportButtonClick() {
            this.setState({ isOpen: !this.state.isOpen });
        }
    }, {
        key: 'renderMenu',
        value: function renderMenu() {
            var components = this.props.config.components;
            var menu = Object.keys(components).map(function (key, index) {
                var component = components[key];
                var ComponentObject = _ComponentsFactory2.default.createComponent(component.type);

                return React.createElement(
                    Block,
                    { key: key },
                    React.createElement(ComponentObject, { config: component })
                );
            });

            return React.createElement(
                Block,
                { style: _assign({}, this.props.config.menuStyle, this.state.menuStyle), key: 'menu' },
                menu
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var boundedClick = this.handleSupportButtonClick.bind(this);
            var menu = this.state.isOpen ? this.renderMenu() : null;

            if (this.props.config.animateClass) {
                menu = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    menu
                );
            }

            return React.createElement(
                InlineBlock,
                null,
                React.createElement(_Item2.default, { onClick: boundedClick, config: this.props.config }),
                menu
            );
        }
    }]);

    return SupportButton;
}(React.Component);

exports.default = SupportButton;


_ComponentsFactory2.default.add(function () {
    return SupportButton;
}, 'SupportButton');

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Actions = __webpack_require__(10);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var IntervalComponents = function (_React$Component) {
    _inherits(IntervalComponents, _React$Component);

    function IntervalComponents(props) {
        _classCallCheck(this, IntervalComponents);

        var _this = _possibleConstructorReturn(this, (IntervalComponents.__proto__ || Object.getPrototypeOf(IntervalComponents)).call(this, props));

        _this.state = {
            hovered: false,
            currentComponent: 0,
            style: {},
            componentsState: {},
            activeComponents: [],
            inactiveComponents: []
        };
        _this.isIntervalComponent = true;
        _this.combinedStates = {};
        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
        _this.updateConfigFromConfig();
        _this.updateConfigFromState();
        _this.updateConfigFromLocalStorage();
        _this.populateStateArraysFromConfig();
        _this.insertStateIntoLocalStorage();

        return _this;
    }

    _createClass(IntervalComponents, [{
        key: 'updateConfigFromConfig',
        value: function updateConfigFromConfig() {
            if (!this.props.config.components) return;
            var comps = this.props.config.components;
            var internalConfig = {};
            for (var i in comps) {
                if (!comps.hasOwnProperty(i) || !comps[i].id) continue;
                var comp = comps[i];
                internalConfig[comp.id] = !comp.hasOwnProperty('active') || comp.active ? true : false;
            }
            _assign(this.combinedStates, internalConfig);
        }
    }, {
        key: 'updateConfigFromState',
        value: function updateConfigFromState() {
            _assign(this.combinedStates, this.state.componentsState);
        }
    }, {
        key: 'updateConfigFromLocalStorage',
        value: function updateConfigFromLocalStorage() {
            // update the config from the hide setting in the localStorage
            var localStorageConfig = this.props.config.localStorageKey ? this.pref.get(this.props.config.localStorageKey) : false;
            if (localStorageConfig && (typeof localStorageConfig === 'undefined' ? 'undefined' : _typeof(localStorageConfig)) === 'object') _assign(this.combinedStates, localStorageConfig);
        }
    }, {
        key: 'populateStateArraysFromConfig',
        value: function populateStateArraysFromConfig() {
            if (!this.props.config.components) return;
            var compsObj = {};
            var compsArr = this.props.config.components;
            for (var i in compsArr) {
                if (compsArr[i].id) compsObj[compsArr[i].id] = compsArr[i];
            }
            this.state.activeComponents = [];
            this.state.inactiveComponents = [];
            for (var id in this.combinedStates) {
                if (!compsObj[id]) continue;
                if (this.combinedStates[id] && compsObj[id].active !== false) this.state.activeComponents.push(compsObj[id]);else this.state.inactiveComponents.push(compsObj.id);
            }
        }
    }, {
        key: 'insertStateIntoLocalStorage',
        value: function insertStateIntoLocalStorage() {
            if (this.props.config.localStorageKey) {
                this.pref.set(this.props.config.localStorageKey, this.combinedStates);
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            this.startInterval();
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            this.clearInterval();
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
            this.clearInterval();
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
            this.startInterval();
        }
    }, {
        key: 'startInterval',
        value: function startInterval() {
            var self = this;
            var interval = self.props.config.interval || 1000;

            this.clearInterval();

            this.interval = setInterval(function () {
                self.updateConfigFromState();
                self.populateStateArraysFromConfig();
                // self.insertStateIntoLocalStorage();

                self.setState({
                    currentComponent: self.nextComponentKey()
                });
            }, interval);
        }
    }, {
        key: 'clearInterval',
        value: function (_clearInterval) {
            function clearInterval() {
                return _clearInterval.apply(this, arguments);
            }

            clearInterval.toString = function () {
                return _clearInterval.toString();
            };

            return clearInterval;
        }(function () {
            if (this.interval) {
                clearInterval(this.interval);
            }
        })
    }, {
        key: 'renderComponent',
        value: function renderComponent() {
            var components = this.state.activeComponents;
            var shouldHide = components.length;
            if (!shouldHide) return null;
            var componentKeys = Object.keys(components);
            var currentComponentKey = componentKeys[this.state.currentComponent];
            var CurrentComponent = _ComponentsFactory2.default.createComponent(components[currentComponentKey].type);
            var componentConfig = components[currentComponentKey];
            return React.createElement(CurrentComponent, { config: componentConfig, key: currentComponentKey });
        }
    }, {
        key: 'renderButton',
        value: function renderButton() {
            var components = this.state.activeComponents;
            var shouldHide = components.length;
            if (!shouldHide) return null;
            var boundClick = this.handleClick.bind(this);
            var currentComponentKey = this.nextComponentKey();
            var componentConfig = components[currentComponentKey]['button'];
            var Button = _ComponentsFactory2.default.createComponent(componentConfig.type);
            componentConfig = _assign({}, componentConfig);
            return React.createElement(Button, { config: componentConfig, onClick: boundClick, key: currentComponentKey });
        }
    }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps) {}
    }, {
        key: 'render',
        value: function render() {
            if (this.state.activeComponents.length === 0) return null;
            var currentButton = this.renderButton();
            var currentComponent = this.renderComponent();
            var containerProps = {
                onMouseEnter: this.handleMouseEnter.bind(this),
                onMouseLeave: this.handleMouseLeave.bind(this)
            };

            return React.createElement(
                Block,
                { props: containerProps, style: _assign({}, this.props.config.style, this.state.style) },
                React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    currentButton
                ),
                React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    currentComponent
                )
            );
        }
    }, {
        key: 'handleClick',
        value: function handleClick() {
            this.clearInterval();
            this.setState({
                currentComponent: this.nextComponentKey()
            });

            this.startInterval();
        }
    }, {
        key: 'nextComponentKey',
        value: function nextComponentKey() {
            // zero will cause the button to indicate for the widget which already displayed
            var comp = 0;
            if (this.state.activeComponents.length === 1) return comp;

            if (!(this.state.currentComponent + 1 >= Object.keys(this.state.activeComponents).length)) comp = this.state.currentComponent + 1;

            return comp;
        }
    }]);

    return IntervalComponents;
}(React.Component);

exports.default = IntervalComponents;


_ComponentsFactory2.default.add(function () {
    return IntervalComponents;
}, 'IntervalComponents');

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Actions = __webpack_require__(10);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var Popup = function (_React$Component) {
    _inherits(Popup, _React$Component);

    function Popup(props) {
        _classCallCheck(this, Popup);

        var _this = _possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).call(this, props));

        _this.state = {
            isOpen: false
        };
        return _this;
    }

    _createClass(Popup, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'renderPopup',
        value: function renderPopup() {
            var components = this.props.config.components;
            var Popup = _ComponentsFactory2.default.createComponent(components['popup'].type);
            return React.createElement(Popup, { config: components['popup'] });
        }
    }, {
        key: 'render',
        value: function render() {
            var popupComponent = this.state.isOpen ? this.renderPopup() : null;
            var Button = _ComponentsFactory2.default.createComponent(this.props.config.components['button'].type);
            var buttonComponent = Button ? React.createElement(Button, { config: this.props.config.components['button'] }) : null;

            if (this.props.config.animateClass) {
                popupComponent = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    popupComponent
                );
            }

            var currentStyle = this.props.config.style;

            if (this.state.style) {
                currentStyle = _assign({}, this.props.config.style, this.state.style);
            }

            return React.createElement(
                Block,
                { style: currentStyle },
                buttonComponent,
                popupComponent
            );
        }
    }]);

    return Popup;
}(React.Component);

exports.default = Popup;


_ComponentsFactory2.default.add(function () {
    return Popup;
}, 'Popup');

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Consts = __webpack_require__(1);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    InlineBlock = _require.InlineBlock;

function FirstChild(props) {
    var childrenArray = React.Children.toArray(props.children);
    return childrenArray[0] || null;
}

var Clock = function (_React$Component) {
    _inherits(Clock, _React$Component);

    function Clock(props) {
        _classCallCheck(this, Clock);

        var _this = _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).call(this, props));

        _this.state = {
            hide: _this.props.config.hide
        };
        return _this;
    }

    _createClass(Clock, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (this.state.hide !== nextProps.config.hide) {
                this.setState({
                    hide: nextProps.config.hide
                });
            }
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            this.startInterval();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            this.clearInterval();
        }
    }, {
        key: 'clearInterval',
        value: function (_clearInterval) {
            function clearInterval() {
                return _clearInterval.apply(this, arguments);
            }

            clearInterval.toString = function () {
                return _clearInterval.toString();
            };

            return clearInterval;
        }(function () {
            if (this.interval) {
                clearInterval(this.interval);
            }
        })
    }, {
        key: 'startInterval',
        value: function startInterval() {
            var self = this;

            this.clearInterval();

            this.interval = setInterval(function () {
                self.forceUpdate();
            }, self.props.config.interval ? self.props.config.interval : 10000);
        }
    }, {
        key: 'render',
        value: function render() {
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE); // "{{d}}.{{m}}.{{y}}"
            var dateFormat = prefService.get(_Consts.DATE_FORMAT_KEY) != '{{DATE_FORMAT}}' ? prefService.get(_Consts.DATE_FORMAT_KEY) : '{{d}}.{{m}}.{{y}}';
            var weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            var d = new Date();
            var hour = d.getHours() + ':' + ('0' + d.getMinutes()).slice(-2);
            var day = _BrowserService2.default.getTranslationOnlyIfExist(weekday[d.getDay()], prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));
            var num = dateFormat.replace('{{m}}', d.getMonth() + 1).replace('{{d}}', d.getDate()).replace('{{y}}', d.getFullYear());

            var component = null;

            var txt = _BrowserService2.default.getTranslationOnlyIfExist(this.props.config.text, prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));
            if (!this.state.hide) {
                component = React.createElement(
                    InlineBlock,
                    { style: this.props.config.style ? this.props.config.style : {}, key: 'clock',
                        onClick: this.props.onClick },
                    txt,
                    React.createElement(
                        InlineBlock,
                        { style: this.props.config.hourStyle },
                        hour
                    ),
                    React.createElement(
                        InlineBlock,
                        { style: this.props.config.dateStyle },
                        React.createElement(
                            'p',
                            { style: this.props.config.dayStyle },
                            day
                        ),
                        React.createElement(
                            'p',
                            { style: this.props.config.numStyle },
                            num
                        )
                    )
                );
            }

            if (!this.props.config.hide && this.props.config.animateClass) {
                component = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { component: FirstChild,
                        transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    !this.props.config.hide ? component : null
                );
            }

            return component;
        }
    }]);

    return Clock;
}(React.Component);

exports.default = Clock;


_ComponentsFactory2.default.add(function () {
    return Clock;
}, 'Clock');

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _Consts = __webpack_require__(1);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Actions = __webpack_require__(10);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    InlineBlock = _require.InlineBlock,
    Block = _require.Block;

var Weather = function (_React$Component) {
    _inherits(Weather, _React$Component);

    function Weather(props) {
        _classCallCheck(this, Weather);

        var _this = _possibleConstructorReturn(this, (Weather.__proto__ || Object.getPrototypeOf(Weather)).call(this, props));

        var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        _this.state = {
            isCelsius: prefService.get(_Consts.UNITS_WEATHER_KEY) !== 'imperial',
            city: prefService.get(_Consts.CITY_KEY),
            icon: '',
            style: {},
            iconStyle: {}
        };
        _this.state.temperature = _this.state.isCelsius ? 24 : 75;

        _this.handleChangeDegrees = _this.handleChangeDegrees.bind(_this);
        return _this;
    }

    _createClass(Weather, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            _Actions.register.bind(this)(this.props.config.behaviours);
            _EventsService2.default.trigger(_Consts.UNITS_WEATHER_CHANGE, []);
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleChangeDegrees',
        value: function handleChangeDegrees() {
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var newUnit = !this.state.isCelsius ? 'metric' : 'imperial';
            prefService.set(_Consts.UNITS_WEATHER_KEY, newUnit);

            if (this.props.config.events.onUnitsChange) {
                _EventsService2.default.trigger(this.props.config.events.onUnitsChange.name, [{ 'unit': newUnit }]);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var component = React.createElement('div', { style: { 'display': 'none' }, key: 'emptyWeather' });
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var temperature = this.state.temperature;
            var iconStyle = _assign({}, this.props.config.iconStyle, this.state.iconStyle, { backgroundImage: this.state.icon });
            var city = this.state.city;
            var unitsProp = {
                onClick: this.handleChangeDegrees
            };

            var degrees = _BrowserService2.default.getTranslationOnlyIfExist(this.state.isCelsius ? 'C' : 'F', prefService.get(_Consts.TRANSLATION_ACTIVE_KEY));

            if (!this.props.config.hide) {
                component = React.createElement(
                    InlineBlock,
                    { style: _assign({}, this.props.config.style ? this.props.config.style : {}, this.state.style), key: 'clock',
                        onClick: this.props.onClick },
                    React.createElement(
                        Block,
                        { style: this.props.config.tempStyle },
                        React.createElement(
                            InlineBlock,
                            null,
                            temperature
                        ),
                        React.createElement(
                            InlineBlock,
                            { style: this.props.config.degStyle },
                            '\xB0'
                        ),
                        React.createElement(
                            Block,
                            { style: this.props.config.unitsStyle,
                                props: unitsProp },
                            degrees
                        )
                    ),
                    React.createElement(
                        InlineBlock,
                        { style: this.props.config.frightStyle },
                        React.createElement(Block, { style: iconStyle }),
                        React.createElement(
                            InlineBlock,
                            { style: this.props.config.cityStyle },
                            city
                        )
                    )
                );
            }

            if (!this.props.config.hide && this.props.config.animateClass) {
                component = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    component
                );
            }

            return component;
        }
    }]);

    return Weather;
}(React.Component);

exports.default = Weather;


_ComponentsFactory2.default.add(function () {
    return Weather;
}, 'Weather');

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Actions = __webpack_require__(10);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var RssFeed = function (_React$Component) {
    _inherits(RssFeed, _React$Component);

    function RssFeed(props) {
        _classCallCheck(this, RssFeed);

        var _this = _possibleConstructorReturn(this, (RssFeed.__proto__ || Object.getPrototypeOf(RssFeed)).call(this, props));

        _this.state = {
            hovered: false,
            hide: _this.props.config.hide
        };

        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
        _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);

        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        var track = _ServiceFactory2.default.get(_Consts.TRACKING_SERVICE);

        var rssFeed = _this.pref.get('rssFeed_' + _this.props.config.id);
        var rssFeedLastUpdate = _this.pref.get('rssFeed_' + _this.props.config.id + '_LastUpdate');

        _this.toggle = function (toggle) {
            this.pref.set('rssFeed_' + this.props.config.id + '_hide', !toggle);
            this.setState({ hide: !toggle });
        };

        _this.changeFeed = function (feed, cb) {
            this.pref.set('rssFeed_' + this.props.config.id + '_feed', feed);
            this.setState({ feed: feed }, cb);
        };

        _this.getFeed = function () {
            var _this2 = this;

            _HttpService2.default.doGet(this.props.config['feeds'][this.state.feed], 'text', function (response) {
                rssFeedLastUpdate = new Date().getTime();
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(response, 'text/xml');
                var rssItems = [];
                var items = Array.prototype.slice.call(xmlDoc.getElementsByTagName('item'));
                if (_this2.props.config.sort) items.sort(function (a, b) {
                    if (a.getElementsByTagName('pubDate').length == 0 && b.getElementsByTagName('pubDate').length == 0) return 0;
                    if (b.getElementsByTagName('pubDate').length == 0) return -1;
                    if (a.getElementsByTagName('pubDate').length == 0) return 1;
                    return new Date(b.getElementsByTagName('pubDate')[0].textContent) - new Date(a.getElementsByTagName('pubDate')[0].textContent);
                });
                for (var i = 0; i < items.length && i < _this2.props.config['numberOfItems']; i++) {
                    var item = items[i];
                    if (item.getElementsByTagName('title').length == 0 || item.getElementsByTagName('link').length == 0 || item.getElementsByTagName('pubDate').length == 0) continue;
                    var title = item.getElementsByTagName('title')[0].textContent;
                    var link = item.getElementsByTagName('link')[0].textContent;
                    var pubDate = item.getElementsByTagName('pubDate')[0].textContent;
                    var rssItem = {
                        title: title,
                        link: link,
                        pubDate: pubDate
                    };
                    if (item.getElementsByTagName('content').length > 0 || item.getElementsByTagName('thumbnail').length > 0) {
                        var media = item.getElementsByTagName('content').length > 0 && item.getElementsByTagName('content')[0].attributes['url'] ? item.getElementsByTagName('content')[0] : item.getElementsByTagName('thumbnail')[0];
                        if (media) {
                            rssItem.media = {};
                            if (media.attributes['url']) rssItem.media.url = media.attributes['url'].nodeValue;
                            if (media.attributes['width']) rssItem.media.width = media.attributes['width'].nodeValue + 'px';
                            if (media.attributes['height']) rssItem.media.height = media.attributes['height'].nodeValue + 'px';
                        }
                    }
                    rssItems.push(rssItem);
                }
                rssFeed = {
                    title: xmlDoc.getElementsByTagName('title')[0].textContent,
                    link: xmlDoc.getElementsByTagName('link')[0].textContent,
                    items: rssItems
                };
                if (xmlDoc.getElementsByTagName('image').length > 0) {
                    var image = xmlDoc.getElementsByTagName('image')[0];
                    rssFeed['image'] = {};
                    if (image.getElementsByTagName('url').length > 0) rssFeed['image']['url'] = image.getElementsByTagName('url')[0].textContent;
                    if (image.getElementsByTagName('title').length > 0) rssFeed['image']['title'] = image.getElementsByTagName('title')[0].textContent;
                    if (image.getElementsByTagName('width').length > 0) rssFeed['image']['width'] = image.getElementsByTagName('width')[0].textContent + 'px';
                    if (image.getElementsByTagName('height').length > 0) rssFeed['image']['height'] = image.getElementsByTagName('height')[0].textContent + 'px';
                    if (image.getElementsByTagName('link').length > 0) rssFeed['image']['link'] = image.getElementsByTagName('link')[0].textContent;
                }

                _this2.state.id = parseInt(_this2.props.config.id);
                _this2.pref.set('rssFeed_' + _this2.props.config.id + '_hide', _this2.state.hide);
                _this2.pref.set('rssFeed_' + _this2.props.config.id + '_feed', _this2.state.feed);
                _this2.pref.set('rssFeed_' + _this2.props.config.id, rssFeed);
                _this2.pref.set('rssFeed_' + _this2.props.config.id + '_LastUpdate', rssFeedLastUpdate);
                _this2.renderHTML();
                _this2.forceUpdate();
            }, function (e) {
                track.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, 'doPost error', e + ' @RssFeed constructor');
            });
        };

        _this.renderHTML = function () {
            var _this3 = this;

            function timeSince(date) {
                var now = new Date();
                var today = new Date(now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate());
                var itemDay = new Date(date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate());
                var seconds = Math.floor((now - date) / 1000);
                var interval = Math.floor(seconds / 31536000);
                if (interval > 1) return interval + ' years ago';
                if (interval == 1) return '1 year ago';
                interval = Math.floor(seconds / 2592000);
                if (interval > 1) return interval + ' months ago';
                if (interval == 1) return '1 month ago';
                interval = Math.floor(seconds / 86400);
                if (interval > 1) return interval + ' days ago';
                if (today - itemDay == 86400000) return 'yesterday';
                if (interval == 1) return '1 day ago';
                interval = Math.floor(seconds / 3600);
                if (interval > 1) return interval + ' hours ago';
                if (interval == 1) return '1 hour ago';
                interval = Math.floor(seconds / 60);
                if (interval > 1) return interval + ' minutes ago';
                if (interval == 1) return '1 minute ago';
                return 'just now';
            }

            var feed = this.pref.get('rssFeed_' + this.props.config.id);
            var Image = _ComponentsFactory2.default.createComponent('Image');
            var Link = _ComponentsFactory2.default.createComponent('Link');
            var Text = _ComponentsFactory2.default.createComponent('Text');
            var Container = _ComponentsFactory2.default.createComponent('Container');
            var DropDown = _ComponentsFactory2.default.createComponent('DropDown');
            var components = [];

            var _loop = function _loop(i) {
                var item = feed.items[i];
                var imageConfig = {
                    parentStyle: _assign({}, _this3.props.config.imageParentStyle),
                    style: _assign({}, item.media && item.media.width ? { width: item.media.width } : {}, item.media && item.media.height ? { height: item.media.height } : {}, _this3.props.config.imageStyle, item.media && item.media.url ? {} : { display: 'none' }),
                    image_location: item.media ? item.media.url : null
                };

                function htmlDecode(input) {
                    var e = document.createElement('div');
                    e.innerHTML = input;
                    return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;
                }

                var onLinkClick = function onLinkClick() {
                    _EventsService2.default.trigger(_Consts.RSS_LINK_CLICKED, [{ url: item.link }]);
                };
                var decodedTitle = htmlDecode(item.title);
                components.push(React.createElement(
                    Block,
                    { key: i, style: _this3.props.config.itemStyle },
                    React.createElement(Image, { config: imageConfig, onClick: onLinkClick }),
                    React.createElement('div', {
                        style: _assign({}, _this3.props.config.imageSeparatorStyle, item.media && item.media.url ? {} : { display: 'none' }) }),
                    React.createElement(
                        Block,
                        { style: _this3.props.config.titlePubDateStyle },
                        React.createElement(
                            'div',
                            { style: _this3.props.config.linkStyle, onClick: onLinkClick },
                            decodedTitle
                        ),
                        React.createElement(
                            Block,
                            { style: _this3.props.config.pubDateStyle },
                            timeSince(new Date(item.pubDate))
                        )
                    )
                ));
            };

            for (var i in feed.items) {
                _loop(i);
            }
            var onLogoClick = function onLogoClick() {
                _EventsService2.default.trigger(_Consts.RSS_LOGO_CLICKED, [{ url: feed.image ? feed.image.link : feed.link }]);
            };
            var onMoreClick = function onMoreClick() {
                _EventsService2.default.trigger(_Consts.RSS_MORE_CLICKED, [{ url: feed.link }]);
            };
            var imageStyle = _assign({}, feed.image && feed.image.width ? { width: feed.image.width } : {}, feed.image && feed.image.height ? { height: feed.image.height } : {}, this.props.config.feedImageStyle, { display: feed.image && feed.image.url ? 'true' : 'none' });
            var buttons = React.createElement(
                Block,
                { style: this.props.config.buttonsWrapperStyle },
                React.createElement(Container, { onClick: function onClick() {
                        _this3.toggle(false);
                        _EventsService2.default.trigger(_Consts.RSS_REMOVE_FEED_CLICKED);
                    }, config: {
                        style: this.props.config.buttonStyle,
                        hover: this.props.config.buttonHoverStyle,
                        components: [{ type: 'Text', text: 'X', style: this.props.config.removeButtonStyle }]
                    } }),
                React.createElement(DropDown, { config: {
                        style: _assign({}, this.props.config.buttonStyle, this.props.config.settingsButtonStyle),
                        hover: _assign({}, this.props.config.buttonHoverStyle, {
                            color: 'transparent'
                        }),
                        options: Object.keys(this.props.config.feeds).map(function (val) {
                            return { label: val, value: val };
                        }),
                        valueWrapperStyle: this.props.config.dropDownValueWrapperStyle,
                        optionStyle: this.props.config.dropDownOptionStyle,
                        selectedOption: Object.keys(this.props.config.feeds).findIndex(function (x) {
                            return x === _this3.state.feed;
                        }),
                        optionSeparatorStyle: this.props.config.dropDownOptionSeparatorStyle,
                        optionsContainerStyle: this.props.config.dropDownOptionsContainerStyle
                    }, onChange: function onChange(val) {
                        _this3.changeFeed(val.value, _this3.getFeed);
                    } })
            );

            function isRTL(s) {
                var rtlChars = '\u0591-\u07FF\u200F\u202B\u202E\uFB1D-\uFDFD\uFE70-\uFEFC',
                    rtlDirCheck = new RegExp('^[^' + rtlChars + ']*?[' + rtlChars + ']');

                return rtlDirCheck.test(s);
            }

            this.html = [React.createElement(Block, { key: 0, style: this.props.config.feedImageBackgroundStyle }), feed.image && feed.image.url ? React.createElement(
                Block,
                { key: 1, style: this.props.config.headerStyle },
                buttons,
                React.createElement(
                    Block,
                    { style: this.props.config.feedImageParentStyle },
                    React.createElement('img', { style: imageStyle, src: feed.image ? feed.image.url : null, onClick: onLogoClick,
                        title: feed.image.title ? feed.image.title : feed.title })
                )
            ) : React.createElement(
                Block,
                { key: 1, style: this.props.config.headerStyle },
                buttons,
                React.createElement(
                    Block,
                    { style: this.props.config.feedImageTitleWrapperStyle, onClick: onLogoClick },
                    React.createElement(
                        'span',
                        { style: this.props.config.feedImageTitleStyle,
                            title: feed.image && feed.image.title ? feed.image.title : feed.title },
                        feed.image && feed.image.title ? feed.image.title : feed.title
                    )
                )
            ), React.createElement(
                Block,
                { key: 2,
                    style: _assign({}, this.props.config.eventsWrapperStyle, { 'direction': isRTL(feed.title) ? 'rtl' : 'ltr' }) },
                components
            ), React.createElement(
                Block,
                { key: 3, style: this.props.config.moreWrapperStyle },
                React.createElement(
                    'span',
                    { style: this.props.config.moreStyle,
                        onClick: onMoreClick },
                    'More'
                )
            )];
        };

        if (!rssFeed || new Date().getTime() - rssFeedLastUpdate > _this.props.config.reloadIntervalMinutes * 60000) {
            _this.state.feed = _this.props.config.defaultFeed;
            _this.getFeed();
        } else {
            _this.state.hide = _this.pref.get('rssFeed_' + _this.props.config.id + '_hide') === 'true';
            _this.state.feed = _this.pref.get('rssFeed_' + _this.props.config.id + '_feed');
            _this.state.id = parseInt(_this.props.config.id);
            _this.renderHTML();
        }
        return _this;
    }

    _createClass(RssFeed, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var self = this;
            var handleAddFeed = function handleAddFeed(args) {
                if (self.state.hide) {
                    for (var i = 1; i < self.state.id; i++) {
                        if (typeof args['' + i] === 'string' && args['' + i] === 'true' || typeof args['' + i] !== 'string' && args['' + i]) return;
                    }self.toggle(true);
                }
            };
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
            _EventsService2.default.on(_Consts.RSS_ADD_FEED_CLICKED, handleAddFeed);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'render',
        value: function render() {
            var containerProps = {
                onClick: this.handleClick,
                onMouseEnter: this.handleMouseEnter.bind(this),
                onMouseLeave: this.handleMouseLeave.bind(this)
            };
            if (!this.state.hide) return React.createElement(
                Block,
                { style: _assign({}, this.props.config.style, this.state.style, this.state.hovered && this.props.config.hover || this.props.hover && this.props.config.parentHover ? this.props.config.hover : {}), props: containerProps },
                this.html
            );else return null;
        }
    }, {
        key: 'handleMouseEnter',
        value: function handleMouseEnter(event) {
            this.setState({ hovered: true });
        }
    }, {
        key: 'handleMouseLeave',
        value: function handleMouseLeave(event) {
            this.setState({ hovered: false });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                var addedParams = { active: this.state.active };
                addedParams = addedParams.active == undefined ? null : addedParams;
                var params = _assign({}, addedParams, this.props.config.events.onClick);
                event.stopPropagation();
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }]);

    return RssFeed;
}(React.Component);

exports.default = RssFeed;


_ComponentsFactory2.default.add(function () {
    return RssFeed;
}, 'RssFeed');

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Consts = __webpack_require__(1);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RssFeedsContainer = function (_React$Component) {
    _inherits(RssFeedsContainer, _React$Component);

    function RssFeedsContainer(props) {
        _classCallCheck(this, RssFeedsContainer);

        var _this = _possibleConstructorReturn(this, (RssFeedsContainer.__proto__ || Object.getPrototypeOf(RssFeedsContainer)).call(this, props));

        _this.state = {
            hovered: false,
            hideAddButton: _this.props.config.maxNumOfFeeds == _this.props.config.numOfFeeds
        };

        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        _this.props.config.components = [];
        var cc = _this.pref.get('cc');
        var feeds = {};
        for (var i in _this.props.config.verticals) {
            var feedsByCountry = _this.props.config.feeds[_this.props.config.verticals[i]];
            if (feedsByCountry) _assign(feeds, feedsByCountry[cc] ? feedsByCountry[cc] : feedsByCountry['US']);
        }
        var events = {
            onClick: {
                name: _Consts.RSS_ADD_FEED_CLICKED,
                local_storage: []
            }
        };
        for (var _i = 1; _i <= _this.props.config.maxNumOfFeeds; _i++) {
            _this.props.config.components.push(_assign({}, _this.props.config.feed, {
                id: _i,
                hide: _i > _this.props.config.numOfFeeds,
                defaultFeed: _this.props.config.defaultFeeds[_i - 1],
                feeds: feeds
            }));
            events.onClick.local_storage.push({
                field: '' + _i,
                key: ['rssFeed_' + _i + '_hide']
            });
        }
        _this.props.config.components.push({
            type: 'Container',
            style: _this.props.config.plusButtonWrapperStyle,
            components: [{
                type: 'Container',
                style: _this.props.config.plusButtonStyle,
                hover: _this.props.config.plusButtonHoverStyle,
                components: [{
                    type: 'Text',
                    text: '+'
                }],
                events: events
            }]
        });
        return _this;
    }

    _createClass(RssFeedsContainer, [{
        key: 'render',
        value: function render() {
            this.props.config.components = this.props.config.components || [];
            this.props.config.components[this.props.config.components.length - 1].hide = this.state.hideAddButton;
            var Container = _ComponentsFactory2.default.createComponent('Container');
            return React.createElement(Container, { config: this.props.config });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var self = this;
            var handleAddFeed = function handleAddFeed(args) {
                var hiddenFields = 0;
                for (var i = 1; i <= self.props.config.maxNumOfFeeds; i++) {
                    if (typeof args['' + i] === 'string' && args['' + i] === 'true' || typeof args['' + i] !== 'string' && args['' + i]) hiddenFields++;
                }if (hiddenFields == 1) self.setState({ hideAddButton: true });
            };
            var handleRemoveFeed = function handleRemoveFeed() {
                self.setState({ hideAddButton: false });
            };
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _EventsService2.default.on(_Consts.RSS_ADD_FEED_CLICKED, handleAddFeed);
            _EventsService2.default.on(_Consts.RSS_REMOVE_FEED_CLICKED, handleRemoveFeed);
        }
    }]);

    return RssFeedsContainer;
}(React.Component);

exports.default = RssFeedsContainer;


_ComponentsFactory2.default.add(function () {
    return RssFeedsContainer;
}, 'RssFeedsContainer');

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Actions = __webpack_require__(10);

var _Utils = __webpack_require__(2);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Countdown = function (_React$Component) {
    _inherits(Countdown, _React$Component);

    function Countdown(props) {
        _classCallCheck(this, Countdown);

        var _this = _possibleConstructorReturn(this, (Countdown.__proto__ || Object.getPrototypeOf(Countdown)).call(this, props));

        _this.state = {
            style: {}
        };
        _this.countTo = _this.props.config.countTo || '';
        _this.countTo = Date.parse(_this.countTo);
        _this.state.hide = isNaN(_this.countTo);
        _this.updateInterval = _this.props.config.updateInterval || 1000;
        _this.parentStyle = _this.props.config.parentStyle || {};
        var style = { 'display': 'none' };

        var timeElements = ['days', 'hours', 'minutes', 'seconds'];
        timeElements.forEach(function (element) {
            _this.props.config[element] = _this.props.config[element] || { 'hide': true };
            _this[element] = {};
            _this[element].style = _this.props.config[element].hide ? style : _this.props.config[element].style ? _this.props.config[element].style : {};
            _this[element].beforeText = _this.props.config[element].beforeText || '';
            _this[element].beforeStyle = _this.props.config[element].hide ? style : _this.props.config[element].beforeStyle ? _this.props.config[element].beforeStyle : {};
            _this[element].afterText = _this.props.config[element].afterText;
            _this[element].afterStyle = _this.props.config[element].hide ? style : _this.props.config[element].afterStyle ? _this.props.config[element].afterStyle : {};
            _this[element].containerStyle = _this.props.config[element].hide ? style : _this.props.config[element].containerStyle ? _this.props.config[element].containerStyle : {};
        });

        _this.handleClick = _this.handleClick.bind(_this);
        _this.tickCounter = 0;
        _this.tick();
        return _this;
    }

    _createClass(Countdown, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'render',
        value: function render() {
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            if (this.props.config.hide || this.state.hide) return null;

            return React.createElement(
                'div',
                { style: this.parentStyle, onClick: this.handleClick },
                React.createElement(
                    'div',
                    { style: this.days.containerStyle },
                    React.createElement(
                        'div',
                        { style: this.days.beforeStyle },
                        this.days.beforeText
                    ),
                    React.createElement(
                        'div',
                        { style: this.days.style },
                        this.state.days
                    ),
                    React.createElement(
                        'div',
                        { style: this.days.afterStyle },
                        this.days.afterText
                    )
                ),
                React.createElement(
                    'div',
                    { style: this.hours.containerStyle },
                    React.createElement(
                        'div',
                        { style: this.hours.beforeStyle },
                        this.hours.beforeText
                    ),
                    React.createElement(
                        'div',
                        { style: this.hours.style },
                        this.state.hours
                    ),
                    React.createElement(
                        'div',
                        { style: this.hours.afterStyle },
                        this.hours.afterText
                    )
                ),
                React.createElement(
                    'div',
                    { style: this.minutes.containerStyle },
                    React.createElement(
                        'div',
                        { style: this.minutes.beforeStyle },
                        this.minutes.beforeText
                    ),
                    React.createElement(
                        'div',
                        { style: this.minutes.style },
                        this.state.minutes
                    ),
                    React.createElement(
                        'div',
                        { style: this.minutes.afterStyle },
                        this.minutes.afterText
                    )
                ),
                React.createElement(
                    'div',
                    { style: this.seconds.containerStyle },
                    React.createElement(
                        'div',
                        { style: this.seconds.beforeStyle },
                        this.seconds.beforeText
                    ),
                    React.createElement(
                        'div',
                        { style: this.seconds.style },
                        this.state.seconds
                    ),
                    React.createElement(
                        'div',
                        { style: this.seconds.afterStyle },
                        this.seconds.afterText
                    )
                )
            );
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                event.stopPropagation();
                var params = _assign({}, this.props.config.events.onClick);
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }, {
        key: 'tick',
        value: function tick() {
            var _this2 = this;

            var tock = setInterval(function () {
                if (_this2.updateCount()) {
                    clearInterval(tock);
                    if (!_this2.props.config.events) return;
                    if (_this2.tickCounter > 2 && _this2.props.config.events.onDone) {
                        var params = _assign({}, _this2.props.config.events.onDone);
                        _EventsService2.default.trigger(_this2.props.config.events.onDone.name, [params, _assign({}, _this2.props.config)]);
                    }
                    if (_this2.tickCounter <= 2 && _this2.props.config.events.onZeroStart) {
                        var _params = _assign({}, _this2.props.config.events.onZeroStart);
                        _EventsService2.default.trigger(_this2.props.config.events.onZeroStart.name, [_params, _assign({}, _this2.props.config)]);
                    }
                }
            }, this.updateInterval);
        }
    }, {
        key: 'updateCount',
        value: function updateCount() {
            var now = Date.parse(new Date());
            var msPassed = this.countTo - now;
            var days = void 0,
                hours = void 0,
                minutes = void 0,
                seconds = void 0;
            days = hours = minutes = seconds = '00';
            if (msPassed > 0) {
                days = Math.floor(msPassed / (1000 * 60 * 60 * 24));
                days = days < 10 ? ('00' + days).slice(-2) : days;
                hours = ('00' + Math.floor(msPassed / (1000 * 60 * 60) % 24)).slice(-2);
                minutes = ('00' + Math.floor(msPassed / 1000 / 60 % 60)).slice(-2);
                seconds = ('00' + Math.floor(msPassed / 1000 % 60)).slice(-2);
            }
            this.tickCounter++;
            if (!(this.state.days === '00' && this.state.hours === '00' && this.state.minutes === '00' && this.state.seconds === '00')) {
                this.setState({ days: days, hours: hours, minutes: minutes, seconds: seconds });
                return false;
            }
            return true;
        }
    }]);

    return Countdown;
}(React.Component);

exports.default = Countdown;


_ComponentsFactory2.default.add(function () {
    return Countdown;
}, 'Countdown');

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Actions = __webpack_require__(10);

var _Utils = __webpack_require__(2);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    Block = _require.Block;

var Maps = function (_React$Component) {
    _inherits(Maps, _React$Component);

    function Maps(props) {
        _classCallCheck(this, Maps);

        var _this = _possibleConstructorReturn(this, (Maps.__proto__ || Object.getPrototypeOf(Maps)).call(this, props));

        _this.defaultMode = props.config.defaultMode || 'place';
        _this.state = {
            style: {},
            mode: _this.defaultMode,
            params: {},
            shouldUpdateIframes: false
        };
        _this.supportedIframes = {};
        _this.currentParams = {};
        _this.currentParamsAll = {};
        var modes = props.config.modes || {};
        _this.modeConfig = {};
        for (var mode in modes) {
            if (modes.hasOwnProperty(mode) && !modes[mode].hide) {
                _this.supportedIframes[mode] = true;
                _this.modeConfig[mode] = modes[mode];
            }
        }
        _this.currentMode = _this.defaultMode;
        _this.allowedParams = _assign({}, {
            'place': ['q'],
            'directions': ['origin', 'destination'],
            'search': ['q'],
            'view': ['center', 'zoom']
        }, _this.buildConfigObjectByKey('allowedParams'));
        _this.fallbaclModeParam = {
            place: { q: ' ' },
            directions: { origin: ' ', destination: ' ' },
            search: { q: ' ' },
            view: { center: '0,0', q: ' ' }
        };
        _this.defaultModeParams = _assign({}, _this.fallbaclModeParam, _this.buildConfigObjectByKey('defaultModeParams'));
        _this.fallbaclModeParam = _assign({}, _this.defaultModeParams, _this.fallbaclModeParam);
        _this.defaultParams = props.config.defaultParams || {};
        _this.iframeSettings = _this.buildConfigObjectByKey('iframeSettings');
        _this.iframeComps = _this.buildConfigObjectByKey('iframe');
        _this.iframeParentStyle = _this.buildConfigObjectByKey('iframeParentStyle');
        _this.geoData = _assign({}, {
            'city': ' ',
            'country_name': ' ',
            'state': ' ',
            'latitude': 0.0,
            'longitude': 0.0
        }, props.config.defaultGeo || {});
        _this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        var prefGeo = _this.pref.get(_Consts.GEO_DATA_KEY);
        _this.geoData = _assign({}, _this.geoData, (0, _Utils.isObject)(prefGeo) ? prefGeo : {});

        _this.apiKey = props.config.apiKey || 'AIzaSyD8-LmPff_7iYmE8syMYQJY-xZlF9a-oWY';
        _this.baseSrc = props.config.baseSrc || 'https://www.google.com/maps/embed/v1/{{mode}}?key={{apiKey}}{{params}}';
        _this.updateIframeEvent = _this.props.config.updateIframeEvent || 'MAPS_WIDGET_IFRAME_UPDATE';
        _this.iframes = {};
        for (var key in _this.supportedIframes) {
            var iframesBehaviours = {
                'behaviours': [{
                    'on': _this.updateIframeEvent,
                    'do': 'SET_CONFIG',
                    'c': {
                        'arg': 'mode',
                        'val': key,
                        'op': '='
                    }
                }]
            };
            _this.iframes[key] = _this.createIframe(_this.buildIframeObject(key, null, iframesBehaviours), key);
        }
        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    _createClass(Maps, [{
        key: 'buildConfigObjectByKey',
        value: function buildConfigObjectByKey(key) {
            var obj = {};
            for (var mode in this.supportedIframes) {
                obj[mode] = this.modeConfig[mode][key];
            }
            return obj;
        }
    }, {
        key: 'buildIframeObject',
        value: function buildIframeObject(mode, mapApiParamsObj, reactConfig) {
            var src = this.buildMapSrc(mode, mapApiParamsObj);
            if (this.iframeComps[mode]) {
                var config = this.iframeComps[mode];
                var iframeSettings = _assign({}, config.iframeSettings, { src: src });
                return _assign({}, config, { iframeSettings: iframeSettings });
            } else {
                return _assign({}, { iframeSettings: _assign({}, this.iframeSettings[mode], { src: src }) }, reactConfig || {});
            }
        }
    }, {
        key: 'buildMapSrc',
        value: function buildMapSrc(mode, paramsObj) {
            var _mode = mode || this.defaultMode;
            var src = this.baseSrc.replace('{{mode}}', _mode).replace('{{apiKey}}', this.apiKey);
            var params = '';
            var combinedParams = _assign({}, this.defaultModeParams[_mode] || {}, this.defaultParams, paramsObj || {});
            combinedParams = this.getParams(mode, combinedParams);
            for (var key in combinedParams) {
                params += '&' + key + '=' + combinedParams[key];
            }
            src = src.replace('{{params}}', params);

            return encodeURI(src);
        }
    }, {
        key: 'createIframe',
        value: function createIframe(config, key) {
            var ComponentObject = _ComponentsFactory2.default.createComponent('Iframe');
            return React.createElement(ComponentObject, { key: key, config: config, parentState: this.state[key], hover: this.state.hovered });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'buildModesButtons',
        value: function buildModesButtons() {
            var response = null;
            var containerStyle = this.props.config.modeButtonsContainerStyle || {};
            var container = { 'type': 'Container', 'style': containerStyle, 'components': [] };
            for (var mode in this.supportedIframes) {
                var button = this.modeConfig[mode]['modeButton'];
                button.style = mode === this.currentMode ? button.selectedStyle : button.notSelectedStyle;
                container.components.push(button);
            }
            if (!container.components.length) return response;

            container = { 'container': container };
            response = this.createChildrenComponents(container);
            return response;
        }
    }, {
        key: 'buildModesInputs',
        value: function buildModesInputs(mode) {
            var _mode = mode || this.currentMode;
            var config = this.buildConfigObjectByKey('paramsBoxes');
            if (!(0, _Utils.isObject)(config) || !(0, _Utils.isObject)(config[_mode])) return null;
            var inputs = this.createChildrenComponents(config[_mode]);
            return inputs;
        }
    }, {
        key: 'createChildrenComponents',
        value: function createChildrenComponents(components) {
            var self = this;
            var childrenComponents = void 0;
            if (components) {
                childrenComponents = Object.keys(components).map(function (componentKey) {
                    if ((0, _Utils.isObject)(components[componentKey]) && components[componentKey].type) {
                        var ComponentObject = _ComponentsFactory2.default.createComponent(components[componentKey].type);
                        return React.createElement(ComponentObject, { key: componentKey, config: components[componentKey],
                            hover: self.state.hovered });
                    }
                });
            }

            return childrenComponents;
        }
    }, {
        key: 'getCurrentIframe',
        value: function getCurrentIframe() {
            var divStyle = {};
            for (var key in this.iframes) {
                divStyle[key] = { display: 'none' };
            }
            divStyle[this.currentMode] = _assign({}, this.iframeParentStyle[this.currentMode]);
            var that = this;
            return Object.keys(this.iframes).map(function (componentKey) {
                return React.createElement(
                    'div',
                    { key: componentKey, style: divStyle[componentKey] },
                    that.iframes[componentKey]
                );
            });
        }
    }, {
        key: 'getParams',
        value: function getParams(mode, params) {
            var obj = this.getRelevantParams(mode, _assign({}, this.currentParams[mode], this.state.params, params));
            for (var key in obj) {
                obj[key] = obj[key] ? obj[key].trim() : obj[key];
            }
            obj = this.fillMandatoryParams(mode, obj);
            var that = this;
            var str = JSON.stringify(obj);
            Object.keys(this.geoData).map(function (key) {
                var rgx = new RegExp('{{' + key + '}}', 'g');
                str = str.replace(rgx, that.geoData[key]);
            });
            obj = JSON.parse(str);
            this.currentParams[mode] = obj;
            _assign(this.currentParamsAll, obj);
            _assign(this.state.params, obj);
            return obj;
        }
    }, {
        key: 'getRelevantParams',
        value: function getRelevantParams(mode, params) {
            var paramsObj = _assign({}, params);
            if (this.allowedParams[mode]) {
                for (var key in params) {
                    if (!this.allowedParams[mode].includes(key)) {
                        delete paramsObj[key];
                    }
                }
            }
            return paramsObj;
        }
    }, {
        key: 'fillMandatoryParams',
        value: function fillMandatoryParams(mode, params) {
            if (!mode) return params;
            var obj = _assign({}, params || {});
            for (var param in this.defaultModeParams[mode]) {
                obj[param] = obj[param] || this.fallbaclModeParam[mode][param];
            }
            return obj;
        }
    }, {
        key: 'updateIframes',
        value: function updateIframes(forceParams) {
            forceParams = forceParams || {};
            for (var mode in this.iframes) {
                var currentParams = this.currentParams[mode];
                var newParams = this.getParams(mode, _assign({}, this.state.params, forceParams.params));
                if (!(0, _Utils.areObjectsEqual)(currentParams, newParams)) {
                    _EventsService2.default.trigger(this.updateIframeEvent, [_assign({}, { 'mode': mode }, { config: this.buildIframeObject(mode, newParams) })]);
                }
            }
        }
    }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps) {}
    }, {
        key: 'render',
        value: function render() {
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            this.currentMode = this.state.mode;
            var maps = void 0;
            if (this.props.config.hide || this.state.hide) maps = null;else {
                maps = React.createElement(
                    Block,
                    { onClick: this.handleClick, style: this.props.config.style },
                    this.buildModesButtons(),
                    this.buildModesInputs(),
                    this.getCurrentIframe()
                );
            }
            if (this.props.config.animateClass) {
                maps = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionAppear: true,
                        transitionAppearTimeout: 0,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    maps
                );
            }

            return maps;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                event.stopPropagation();
                var params = _assign({}, this.props.config.events.onClick);
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, _assign({}, this.props.config)]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }]);

    return Maps;
}(React.Component);

exports.default = Maps;


_ComponentsFactory2.default.add(function () {
    return Maps;
}, 'Maps');

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _GenericReactComponentWrapper = __webpack_require__(21);

var _GenericReactComponentWrapper2 = _interopRequireDefault(_GenericReactComponentWrapper);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Actions = __webpack_require__(10);

var _Consts = __webpack_require__(1);

var _Utils = __webpack_require__(2);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _objectAssignDeep = __webpack_require__(15);

var _objectAssignDeep2 = _interopRequireDefault(_objectAssignDeep);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Image = function (_GenericReactComponen) {
    _inherits(Image, _GenericReactComponen);

    function Image(props) {
        _classCallCheck(this, Image);

        var _this = _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).call(this, props));

        _this.conditionalConfigMerge();
        _this.originalConfig = JSON.parse(JSON.stringify(props.config));
        _this.replaceConfigFunc();
        _this.state = {
            style: {}
        };

        _this.fallbackImage = 'content/image/transparent_img.png';

        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    _createClass(Image, [{
        key: 'conditionalConfigMerge',
        value: function conditionalConfigMerge() {
            var _this2 = this;

            var fromRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            try {
                if (!this.props.config.conditionalConfigMerge) return;
                var merger = function merger() {
                    var arr = (0, _Utils.isObject)(_this2.props.config.conditionalConfigMerge) ? [_this2.props.config.conditionalConfigMerge] : _this2.props.config.conditionalConfigMerge;
                    for (var i in arr) {
                        var settings = arr[i];
                        var cond = settings.c ? new _Condition2.default(settings.c) : null;
                        if ((0, _Utils.isObject)(settings.config) && (cond === null || cond && cond.check(_this2.props.config, settings, _this2.props.config))) {
                            _objectAssignDeep2.default.withOptions(_this2.props.config, [settings.config], settings.options || { arrayBehaviour: 'replace' });
                        }
                    }
                };
                if (!fromRender) {
                    merger();
                } else if (!this.props.config.conditionalConfigMerge.hasOwnProperty('onRender') || this.props.config.conditionalConfigMerge.onRender) {
                    merger();
                }
            } catch (e) {}
        }
    }, {
        key: 'replaceConfigFunc',
        value: function replaceConfigFunc() {
            var extraFuncs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            try {
                if ((0, _Utils.isArray)(this.originalConfig.placeHoldersFunctions)) {
                    var phFuncs = (0, _Utils.isArray)(extraFuncs) ? [].concat(_toConsumableArray(this.originalConfig.placeHoldersFunctions), _toConsumableArray(extraFuncs)) : this.originalConfig.placeHoldersFunctions;
                    var a = (0, _Utils.placeHolderFunctions)(this.originalConfig, phFuncs, {}, _assign({}, this.originalConfig, extraData));
                    _assign(this.props.config, a);
                }
            } catch (e) {}
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
            if (this.props.config.events && this.props.config.events.onMount) {
                _EventsService2.default.trigger(this.props.config.events.onMount.name, [_assign({}, this.props.config.events.onMount, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() })]);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var hide = this.state.hasOwnProperty('hide') ? this.state.hide : this.props.config.hasOwnProperty('hide') ? this.props.config.hide : false;
            return (0, _Utils.trueOrFalse)(hide);
        }
    }, {
        key: 'render',
        value: function render() {
            this.conditionalConfigMerge(true);
            (0, _Utils.populateFromLocalStorage)(this.props.config);
            if (this.shouldHide()) return null;
            var style = _assign({}, this.props.config.style || {}, this.state.style || {});
            var imgSrc = this.props.config.dynamic ? this.getCurrentImage() : this.props.config.image_location;
            var parentStyle = _assign({}, this.props.config.parentStyle || {}, this.state.parentStyle || {});
            if (this.props.config.options) {
                var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                var state = prefService.get(this.props.config.key);
                imgSrc = this.props.config.options[state].image_location;
            }

            var childImage = React.createElement('img', { onClick: this.handleClick, style: style });
            childImage = !imgSrc ? childImage : React.createElement('img', { onClick: this.handleClick, style: style, src: imgSrc });

            var elem = React.createElement(
                'div',
                { style: parentStyle },
                childImage
            );
            var animation = this.state.animateClass || this.props.config.animateClass;
            if (animation) {
                elem = React.createElement(
                    'div',
                    { style: parentStyle },
                    React.createElement(
                        _reactAddonsCssTransitionGroup2.default,
                        { transitionName: animation,
                            transitionAppear: true,
                            transitionAppearTimeout: 0,
                            transitionEnterTimeout: 0,
                            transitionLeaveTimeout: 0 },
                        childImage
                    )
                );
            }

            return elem;
        }
    }, {
        key: 'getCurrentImage',
        value: function getCurrentImage() {
            var image = false;
            var lsImage = localStorage[this.props.config.image_key] || '';
            var ignoreImagePath = this.props.config.ignoreImagePath || ['http', 'data:'];
            if (this.state.image && this.state.image.hasOwnProperty('src')) {
                image = this.state.image.src;
            } else if (this.props.config.image_path && lsImage !== '' && !(0, _Utils.strStartsWith)(lsImage, ignoreImagePath)) {
                image = this.props.config.image_path + lsImage;
            } else {
                image = lsImage;
            }
            if (!image && this.props.config.fallback_image) {
                image = this.props.config.fallback_image;
            }
            return (0, _Utils.imageStandard)(image, false);
            // return image;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (this.props.config.events && this.props.config.events.onClick) {
                event.stopPropagation();
                var params = _assign({}, this.props.config.events.onClick, { selfConfig: this.props.config, SelfOrigConfig: this.originalConfig, selfState: this.state, selfHideStatus: this.shouldHide() });
                _EventsService2.default.trigger(this.props.config.events.onClick.name, [params, this.props.config]);
            }
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }]);

    return Image;
}(_GenericReactComponentWrapper2.default);

exports.default = Image;


_ComponentsFactory2.default.add(function () {
    return Image;
}, 'Image');

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(6);

var React = _interopRequireWildcard(_react);

var _reactDom = __webpack_require__(7);

var ReactDOM = _interopRequireWildcard(_reactDom);

var _reactAddonsCssTransitionGroup = __webpack_require__(12);

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _Item = __webpack_require__(22);

var _Item2 = _interopRequireDefault(_Item);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _Actions = __webpack_require__(10);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Consts = __webpack_require__(1);

var _ActionTypes = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = __webpack_require__(11),
    InlineBlock = _require.InlineBlock,
    Block = _require.Block;

var SupportButton = function (_React$Component) {
    _inherits(SupportButton, _React$Component);

    function SupportButton(props) {
        _classCallCheck(this, SupportButton);

        var _this = _possibleConstructorReturn(this, (SupportButton.__proto__ || Object.getPrototypeOf(SupportButton)).call(this, props));

        if (_this.props.config.menuType == 'searchEngines') {
            _this.search = _ServiceFactory2.default.get(_Consts.SEARCH_SERVICE);
            _this.state = {
                options: _this.searchEngines2Options(),
                selectedOption: _this.search.getTempOrCurrentSearchEngineIndex(),
                isOpen: false,
                menuStyle: {},
                style: {}
            };
        } else {
            _this.state = {
                isOpen: false,
                menuStyle: {},
                style: {}
            };
        }

        return _this;
    }

    _createClass(SupportButton, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.mounted = true;
            if (this.props.config.attributes) {
                var elem = ReactDOM.findDOMNode(this);
                if (elem) {
                    for (var att in this.props.config.attributes) {
                        elem.setAttribute(att, this.props.config.attributes[att]);
                    }
                }
            }
            _Actions.register.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.mounted = false;
            _Actions.unregister.bind(this)(this.props.config.behaviours);
        }
    }, {
        key: 'handleMenuButtonClick',
        value: function handleMenuButtonClick() {
            this.setState({ isOpen: !this.state.isOpen });
        }
    }, {
        key: 'renderMenu',
        value: function renderMenu() {
            var components = {};
            if (this.props.config.menuType == 'searchEngines') {
                components = this.getSearchEnginesMenu(this.state.options);
            } else {
                components = this.props.config.components;
            }

            var menu = Object.keys(components).map(function (key, index) {
                var component = components[key];
                var ComponentObject = _ComponentsFactory2.default.createComponent(component.type);

                return React.createElement(
                    Block,
                    { key: key },
                    React.createElement(ComponentObject, { config: component })
                );
            });

            return React.createElement(
                Block,
                { style: _assign({}, this.props.config.menuStyle, this.state.menuStyle), key: 'menu' },
                menu,
                React.createElement('engines', null)
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var boundedClick = this.handleMenuButtonClick.bind(this);
            var menu = this.state.isOpen ? this.renderMenu() : null;

            if (this.props.config.animateClass) {
                menu = React.createElement(
                    _reactAddonsCssTransitionGroup2.default,
                    { transitionName: this.props.config.animateClass,
                        transitionEnterTimeout: 0,
                        transitionLeaveTimeout: 0 },
                    menu
                );
            }

            return React.createElement(
                InlineBlock,
                null,
                React.createElement(_Item2.default, { onClick: boundedClick, config: this.props.config }),
                menu
            );
        }
    }, {
        key: 'getSearchEnginesMenu',
        value: function getSearchEnginesMenu(options) {
            var component = {};
            for (var i = 0; i < options.length; i++) {
                component[options[i].value] = {};
                component[options[i].value].type = 'Input';
                component[options[i].value].inputType = 'button';
                component[options[i].value].style = _assign({}, this.props.config.menuItemStyle, options[i].style);

                if (!component[options[i].value].style.backgroundImage) {
                    component[options[i].value].text = this.capitalizeFirstLetter(options[i].value);
                }

                if (!this.props.config.displayLogos) {
                    component[options[i].value].text = this.capitalizeFirstLetter(options[i].value);
                    if (component[options[i].value].style.backgroundImage) {
                        delete component[options[i].value].style.backgroundImage;
                    }
                }

                component[options[i].value].events = {};
                component[options[i].value].events.onClick = {};
                component[options[i].value].events.onClick.name = _ActionTypes.SET_SEARCH_ENGINE;
                component[options[i].value].events.onClick.engineId = options[i].value;
            }

            return component;
        }
    }, {
        key: 'searchEngines2Options',
        value: function searchEngines2Options() {
            var options = [];
            var engines = this.search.getEngines();

            for (var i = 0; i < Object.keys(engines).length; i++) {
                options.push({
                    label: engines[i].logo ? '' : engines[i].shortName,
                    value: engines[i].id,
                    style: engines[i].logo ? {
                        backgroundImage: 'url(content/images/' + engines[i].logo + ')'
                    } : {}
                });
            }

            return options;
        }
    }, {
        key: 'capitalizeFirstLetter',
        value: function capitalizeFirstLetter(string) {
            return string.substring(0, 1).toUpperCase() + string.slice(1);
        }
    }]);

    return SupportButton;
}(React.Component);

exports.default = SupportButton;


_ComponentsFactory2.default.add(function () {
    return SupportButton;
}, 'Menu');

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _Container2 = __webpack_require__(24);

var _Container3 = _interopRequireDefault(_Container2);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabsManager = function (_Container) {
    _inherits(TabsManager, _Container);

    function TabsManager(props) {
        var _ref;

        _classCallCheck(this, TabsManager);

        props.config.components = props.config.components.sort(function (a, b) {
            var a_order = a.tabSettings && a.tabSettings.order || 0;
            var b_order = b.tabSettings && b.tabSettings.order || 0;
            return b_order - a_order;
        });
        var tabs = props.config.components.map(function (comp) {
            return comp.tabSettings ? comp : _assign({}, comp, { tabSettings: { title: comp.id } });
        });
        props.config.components = [{
            type: 'Container',
            style: props.config.tabsWrapperStyle,
            components: (_ref = []).concat.apply(_ref, _toConsumableArray(tabs.map(function (tab, i) {
                return [{
                    type: 'Text',
                    behaviours: [{
                        on: 'TAB_SELECTED',
                        do: 'SET_CONFIG',
                        config: {
                            style: props.config.selectedTabStyle
                        },
                        c: {
                            arg: 'index',
                            op: '=',
                            val: i
                        }
                    }, {
                        on: 'TAB_SELECTED',
                        do: 'SET_CONFIG',
                        config: {
                            style: props.config.tabStyle
                        },
                        c: {
                            arg: 'index',
                            op: '!=',
                            val: i
                        }
                    }],
                    text: tab.tabSettings.title,
                    style: tab.tabSettings.default ? props.config.selectedTabStyle : props.config.tabStyle,
                    hover: props.config.tabStyleHover,
                    events: {
                        onClick: {
                            name: props.config.id + 'TAB_SELECTED',
                            index: i
                        }
                    }
                }, {
                    type: 'Container',
                    style: props.config.tabSeparatorStyle
                }];
            }))).slice(0, -1)
        }, {
            type: 'Container',
            style: {
                flex: 1
            },
            components: tabs.map(function (tab, i) {
                return {
                    type: 'Container',
                    behaviours: [{
                        on: 'TAB_SELECTED',
                        do: 'SET_CONFIG',
                        config: {
                            style: {
                                display: 'unset'
                            }
                        },
                        c: {
                            arg: 'index',
                            op: '=',
                            val: i
                        }
                    }, {
                        on: 'TAB_SELECTED',
                        do: 'SET_CONFIG',
                        config: {
                            style: {
                                display: 'none'
                            }
                        },
                        c: {
                            arg: 'index',
                            op: '!=',
                            val: i
                        }
                    }],
                    style: {
                        display: tab.tabSettings.default ? 'unset' : 'none'
                    },
                    components: [tab]
                };
            })
        }];
        return _possibleConstructorReturn(this, (TabsManager.__proto__ || Object.getPrototypeOf(TabsManager)).call(this, props));
    }

    return TabsManager;
}(_Container3.default);

exports.default = TabsManager;


_ComponentsFactory2.default.add(function () {
    return TabsManager;
}, 'TabsManager');

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var GlobalService = function () {
    function GlobalService() {
        _classCallCheck(this, GlobalService);
    }

    _createClass(GlobalService, null, [{
        key: 'load',
        value: function load() {
            return new Promise(function (resolve, reject) {
                window['global'] = (0, _Utils.isObject)(window['global']) ? window['global'] : {};
                if (_BrowserService2.default.noAPIs()) resolve();else _BrowserService2.default.getCurrentWindowInfo(function (win) {
                    window['global']['windowId'] = win.id;
                    _BrowserService2.default.getCurrentTabInfo(function (tab) {
                        window['global']['tabId'] = tab ? tab.id : '';
                        resolve();
                    });
                });
            });
        }
    }]);

    return GlobalService;
}();

exports.default = GlobalService;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(72);
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__(75)(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../../../node_modules/css-loader/index.js!./all.min.css", function() {
			var newContent = require("!!../../../node_modules/css-loader/index.js!./all.min.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__(73);
exports = module.exports = __webpack_require__(74)(false);
// imports
exports.push([module.i, "@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);", ""]);

// module
exports.push([module.i, "@font-face{font-family:'neue';src:url(" + escape(__webpack_require__(32)) + ")}@font-face{font-family:'neue-bold';src:url(" + escape(__webpack_require__(33)) + ")}@font-face{font-family:'HelveticaNeue-Thin';src:url(" + escape(__webpack_require__(34)) + ")}@font-face{font-family:'HelveticaNeue';src:url(" + escape(__webpack_require__(35)) + ")}@font-face{font-family:'neue';src:url(" + escape(__webpack_require__(32)) + ")}@font-face{font-family:'neue-bold';src:url(" + escape(__webpack_require__(33)) + ")}@font-face{font-family:'HelveticaNeue-Thin';src:url(" + escape(__webpack_require__(34)) + ")}@font-face{font-family:'HelveticaNeue';src:url(" + escape(__webpack_require__(35)) + ")}body{margin:0;overflow:hidden}*{box-sizing:border-box}#root{width:100%;height:100%;position:absolute}.resize-enter{opacity:0.01;max-height:0;max-width:0}.resize-enter.resize-enter-active{opacity:1;max-height:70px;max-width:110px;transition:all 200ms linear}.resize-leave{opacity:1;max-height:70px;max-width:110px}.resize-leave.resize-leave-active{opacity:0.01;max-height:0;max-width:0;transition:all 200ms linear}.fadeout-appear,.fadeout-enter{opacity:0.01}.fadeout-appear.fadeout-appear-active,.fadeout-enter.fadeout-enter-active{opacity:1;transition:opacity 400ms ease-in}.fadeout-leave{opacity:1}.fadeout-leave.fadeout-leave-active{opacity:0.01;transition:opacity 400ms ease-out}.spin-enter,.spin-appear,.spin-appear-active,.spin-enter,.spin-enter-active,.spin-leave,.spin-leave-active{-webkit-transform:translateZ(0);-moz-transform:translateZ(0);-ms-transform:translateZ(0);transform:translateZ(0);-webkit-animation:load6 1.7s infinite ease, round 1.7s infinite ease;-moz-animation:load6 1.7s infinite ease, round 1.7s infinite ease;animation:load6 1.7s infinite ease, round 1.7s infinite ease}@-webkit-keyframes load6{0%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}5%,95%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}10%,59%{box-shadow:0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em}20%{box-shadow:0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em}38%{box-shadow:0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em}100%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}}@-moz-keyframes load6{0%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}5%,95%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}10%,59%{box-shadow:0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em}20%{box-shadow:0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em}38%{box-shadow:0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em}100%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}}@keyframes load6{0%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}5%,95%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}10%,59%{box-shadow:0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em}20%{box-shadow:0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em}38%{box-shadow:0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em}100%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}}@-webkit-keyframes round{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes round{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes round{0%{-webkit-transform:rotate(0deg);-moz-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);transform:rotate(360deg)}}\n", ""]);

// exports


/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = function escape(url) {
    if (typeof url !== 'string') {
        return url
    }
    // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        url = url.slice(1, -1);
    }
    // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url)) {
        return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"'
    }

    return url
}


/***/ }),
/* 74 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(76);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 76 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ })
],[36]);