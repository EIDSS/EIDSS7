/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		2: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var CONFIG_PATH = exports.CONFIG_PATH = 'content/asstes';
var WEATHER_API_KEY = exports.WEATHER_API_KEY = '4c48e554026a4c9e97b3b2dc8824b559'; //http://openweathermap.org/ (billingit@)

var GEO_DATA_KEY = exports.GEO_DATA_KEY = 'geodata';
var COUNTRY_CODE_KEY = exports.COUNTRY_CODE_KEY = 'cc';
var GEO_LOCATOR_KEY = exports.GEO_LOCATOR_KEY = 'geolocator';
var DATE_FORMAT_KEY = exports.DATE_FORMAT_KEY = 'date_format';
var CITY_KEY = exports.CITY_KEY = 'city';
var LATITUDE_KEY = exports.LATITUDE_KEY = 'latitude';
var LONGITUDE_KEY = exports.LONGITUDE_KEY = 'longitude';
var UNITS_WEATHER_KEY = exports.UNITS_WEATHER_KEY = 'units_weather';
var WEATHER_VALUE_KEY = exports.WEATHER_VALUE_KEY = 'weather_val';
var WEATHER_TIME_KEY = exports.WEATHER_TIME_KEY = 'weather_time';
var SELECTED_SEARCH_CATEGORY_KEY = exports.SELECTED_SEARCH_CATEGORY_KEY = 'selected_cat';
var SELECTED_SEARCH_ENGINE_KEY = exports.SELECTED_SEARCH_ENGINE_KEY = 'sengine';
var TEMP_SEARCH_ENGINE_KEY = exports.TEMP_SEARCH_ENGINE_KEY = 'sengineTemp';
var LABEL_KEY = exports.LABEL_KEY = 'label';
var TYPE_KEY = exports.TYPE_KEY = 'type';
var BACKGROUND_COLOR_KEY = exports.BACKGROUND_COLOR_KEY = 'bg_color';
var BACKGROUND_IMAGE_KEY = exports.BACKGROUND_IMAGE_KEY = 'bg_img';
var TRACK_KEY = exports.TRACK_KEY = 'track';
var VERIFIED_HOST_KEY = exports.VERIFIED_HOST_KEY = 'verified_host';
var CONFIG_SERVER_KEY = exports.CONFIG_SERVER_KEY = 'config_server';
var UNINSTALL_URL_FORMAT_KEY = exports.UNINSTALL_URL_FORMAT_KEY = 'uninstall_url_format';
var UNINSTALL_DOMAIN = exports.UNINSTALL_DOMAIN = 'uninstall_domain';
var DEFAULT_AFLT_FORMAT_KEY = exports.DEFAULT_AFLT_FORMAT_KEY = 'defualt_aflt_format';
var POPUP_DELAY_KEY = exports.POPUP_DELAY_KEY = 'popup_delay';
var FIRST_RUN_KEY = exports.FIRST_RUN_KEY = 'firstRun';
var GUID_KEY = exports.GUID_KEY = 'guid';
var XLP_PERS_GUID_KEY = exports.XLP_PERS_GUID_KEY = 'xlp_pers_guid';
var FIRST_VER_KEY = exports.FIRST_VER_KEY = 'firstVer';
var LAST_VER_KEY = exports.LAST_VER_KEY = 'lastVer';
var SRCH_MFST_KEY = exports.SRCH_MFST_KEY = 'srch.mfst';
var LFC_ALV_KEY = exports.LFC_ALV_KEY = 'lfc.alv';
var C_ALV_KEY = exports.C_ALV_KEY = 'c.alv';
var AFLT_KEY = exports.AFLT_KEY = 'aflt';
var B_AFLT_KEY = exports.B_AFLT_KEY = 'bptag';
var LFC_ITH_KEY = exports.LFC_ITH_KEY = 'lfc.ith';
var LS_TS_KEY = exports.LS_TS_KEY = 'ls_ts'; // Local storage time stamp
var UREF_KEY = exports.UREF_KEY = 'uref';
var LS_DATA_COOKIE_ID = exports.LS_DATA_COOKIE_ID = 'ls_data';
var URL_DATA_COOKIE_ID = exports.URL_DATA_COOKIE_ID = 'url_data';
var ABTEST_ID_KEY = exports.ABTEST_ID_KEY = 'abid';
var GROUP_ID_KEY = exports.GROUP_ID_KEY = 'xt_abg';
var GROUP_ID_VALIDATION_KEY = exports.GROUP_ID_VALIDATION_KEY = 'xt_abg_valid';
var SECURE_HTTP_KEY = exports.SECURE_HTTP_KEY = 'sec_http';
var COOKIE_NAME_KEY = exports.COOKIE_NAME_KEY = 'ck_name';
var ENGINE_ID_KEY = exports.ENGINE_ID_KEY = 'engine_id';
var VISUAL_ID_KEY = exports.VISUAL_ID_KEY = 'visual_id';
var CONFIG_ID_KEY = exports.CONFIG_ID_KEY = 'config_id';
var CONFIG_ID_VALIDATION_KEY = exports.CONFIG_ID_VALIDATION_KEY = 'config_id_valid';
var ENGINE_VERSION_KEY = exports.ENGINE_VERSION_KEY = 'engine_ver';
var SERVER_REQUEST_COUNTER_KEY = exports.SERVER_REQUEST_COUNTER_KEY = 'req_c';
var DTSEC_KEY = exports.DTSEC_KEY = 'dtsec';
var FIRST_CONFIG_LOAD = exports.FIRST_CONFIG_LOAD = 'firstCfgLoad';
var SERVER_REQUEST_TIMESTAMP_KEY = exports.SERVER_REQUEST_TIMESTAMP_KEY = 'req_ts';
var SERVER_REQUEST_INTERVAL_KEY = exports.SERVER_REQUEST_INTERVAL_KEY = 'req_intr';
var ENGINES_KEY = exports.ENGINES_KEY = 'engines';
var CHECKER_F_URL_KEY = exports.CHECKER_F_URL_KEY = 'checker_f_url';
var CHECKER_T_URL_KEY = exports.CHECKER_T_URL_KEY = 'checker_t_url';
var TRACKING_PROPERTIES_KEY = exports.TRACKING_PROPERTIES_KEY = 'tracking';
var TRANSLATION_ACTIVE_KEY = exports.TRANSLATION_ACTIVE_KEY = 'trans_active';
var NEW_DAY = exports.NEW_DAY = 'new_day';
var TOPSITES_FAVICON_TEMPLATE = exports.TOPSITES_FAVICON_TEMPLATE = 'topSitesFavicon';
var TOPSITES_SCREENSHOT_TEMPLATE = exports.TOPSITES_SCREENSHOT_TEMPLATE = 'topSitesScreenshot';
var TOPSITES_URL_TEMPLATE = exports.TOPSITES_URL_TEMPLATE = 'topSitesUrl';
var TOPSITES_TITLE_TEMPLATE = exports.TOPSITES_TITLE_TEMPLATE = 'topSitesTitle';
var ALIVE_DYNAMIC_REPORTS_KEY = exports.ALIVE_DYNAMIC_REPORTS_KEY = 'alv.dyn';
var THANK_YOU_PAGE_EVENT_KEY = exports.THANK_YOU_PAGE_EVENT_KEY = 'ThankUPage';
var THANK_YOU_PAGE_OPENED_KEY = exports.THANK_YOU_PAGE_OPENED_KEY = 'thank_you_page_opened';
var THANK_YOU_PAGE_TIMESTAMP = exports.THANK_YOU_PAGE_TIMESTAMP = 'typ_tsp';
var RATE_US_SHOW_TIME = exports.RATE_US_SHOW_TIME = 'rate.us.time';
var COOKIE_VALUE = exports.COOKIE_VALUE = 'lpcv'; //landing page cookie value
var YANDEX_CLID = exports.YANDEX_CLID = 'clid';
var NEWTAB_HTML = exports.NEWTAB_HTML = 'index.html';
var FORCE_FF_HP_KEY = exports.FORCE_FF_HP_KEY = 'fhpff';
var FORCE_FF_NT_KEY = exports.FORCE_FF_NT_KEY = 'fntff';
var FORCE_FF_DS_KEY = exports.FORCE_FF_DS_KEY = 'fdsff';
var FORCE_CH_HP_KEY = exports.FORCE_CH_HP_KEY = 'fhpch';
var FORCE_CH_NT_KEY = exports.FORCE_CH_NT_KEY = 'fntch';
var FORCE_CH_DS_KEY = exports.FORCE_CH_DS_KEY = 'fdsch';
var CURRENT_BACKGROUND_RUN_ID = exports.CURRENT_BACKGROUND_RUN_ID = 'bgSessionId';
var RECALCULATE_ENGINE_PREFIX = exports.RECALCULATE_ENGINE_PREFIX = 'recalcSengine_';
var LP_COOKIE_MAP_KEY = exports.LP_COOKIE_MAP_KEY = 'lp_ck_map';

var OVERRIDE_PREF_PREFIX = exports.OVERRIDE_PREF_PREFIX = 'override_';

var TOPSITES_KEY = exports.TOPSITES_KEY = 'topsites';
var TOPSITES_SCREENSHOTS_KEY = exports.TOPSITES_SCREENSHOTS_KEY = 'screenshots';

// Track events
var ALIVE_TRACK_EVENT = exports.ALIVE_TRACK_EVENT = 'alive';
var SEARCH_OB_TRACK_EVENT = exports.SEARCH_OB_TRACK_EVENT = 'search-ob';
var ERROR_TRACK_EVENT = exports.ERROR_TRACK_EVENT = 'error';
var ALIVE_DYNAMIC_TRACK_EVENT = exports.ALIVE_DYNAMIC_TRACK_EVENT = 'n.alive';

// Tracking usage
var RID_KEY = exports.RID_KEY = 'rid';
var RID_URL_KEY = exports.RID_URL_KEY = 'rid_url';
var RID_VERIFY_KEY = exports.RID_VERIFY_KEY = 'rid_verify';

// Service keys
var PREFERENCES_SERVICE = exports.PREFERENCES_SERVICE = 'PreferencesService';
var CHROME_SERVICE = exports.CHROME_SERVICE = 'ChromeService';
var SEARCH_SERVICE = exports.SEARCH_SERVICE = 'SearchService';
var TRACKING_SERVICE = exports.TRACKING_SERVICE = 'TrackingService';

// Search
var SEARCH_CAT_WEB = exports.SEARCH_CAT_WEB = 'web';
var SEARCH_CAT_IMAGE = exports.SEARCH_CAT_IMAGE = 'image';
var SEARCH_CAT_VIDEO = exports.SEARCH_CAT_VIDEO = 'video';

// Tab
var BACKGROUND_TAB_TYPE = exports.BACKGROUND_TAB_TYPE = 'backgroundTab';
var COMMON_COMPONENTS_TYPE = exports.COMMON_COMPONENTS_TYPE = 'commonComponents';
var NEW_TAB_TYPE = exports.NEW_TAB_TYPE = 'newTab';
var HTML_TYPES = exports.HTML_TYPES = {
    'client': {
        'parentType': 'newTab',
        'mainWindowId': 'mainWindow',
        'bodyStyling': false,
        'finishEvent': 'CLIENT_LOADED'
    },
    'browserActionPopup': {
        'parentType': 'browserActionWrapper',
        'mainWindowId': 'browserActionPopup',
        'bodyStyling': true,
        'rootStyling': true,
        'finishEvent': 'BROWSER_ACTION_LOADED'
    },
    'externalWindow': {
        'parentType': 'externalWindowWrapper',
        'mainWindowId': 'externalWindow',
        'bodyStyling': true,
        'rootStyling': true,
        'finishEvent': 'EXTERNAL_POPUP_LOADED'
    }
};
var HASH_ENV_PREFIX = exports.HASH_ENV_PREFIX = 'env_';

// Events
var DOCUMENT_CLICKED_EVENT = exports.DOCUMENT_CLICKED_EVENT = 'DOCUMENT_CLICKED';
var DOCUMENT_KEY_DOWN_EVENT = exports.DOCUMENT_KEY_DOWN_EVENT = 'DOCUMENT_KEY_DOWN';
var WINDOW_HASH_CHANGED_EVENT = exports.WINDOW_HASH_CHANGED_EVENT = 'WINDOW_HASH_CHANGED';
var STORAGE_UPDATED_EVENT = exports.STORAGE_UPDATED_EVENT = 'STORAGE_UPDATED';
var PREFERENCES_RELOADED_EVENT = exports.PREFERENCES_RELOADED_EVENT = 'PREFERENCES_RELOADED';
var AUTO_SUGGEST_SELECTED_CHANGE_EVENT = exports.AUTO_SUGGEST_SELECTED_CHANGE_EVENT = 'AUTO_SUGGEST_SELECTED_CHANGE';
var ON_SET_TEXT_EVENT = exports.ON_SET_TEXT_EVENT = 'onSetText';
var UNITS_WEATHER_CHANGE = exports.UNITS_WEATHER_CHANGE = 'UNITS_WEATHER_CHANGE';
var BACKGROUND_LOADED_EVENT = exports.BACKGROUND_LOADED_EVENT = 'BACKGROUND_LOADED';
var CLIENT_LOADED_EVENT = exports.CLIENT_LOADED_EVENT = 'CLIENT_LOADED';
var SELECTED_SEARCH_CATEGORY_CHANGED = exports.SELECTED_SEARCH_CATEGORY_CHANGED = 'SELECTED_SEARCH_CATEGORY_CHANGED';
var UNINSTALL_TRACK_EVENT_KEY = exports.UNINSTALL_TRACK_EVENT_KEY = 'uninstall';
var PARSE_COOKIE_FINISHED = exports.PARSE_COOKIE_FINISHED = 'PARSE_COOKIE_FINISHED';
var UPDATE_CONFIG_FINISHED = exports.UPDATE_CONFIG_FINISHED = 'UPDATE_CONFIG_FINISHED';
var ON_SEARCH_EVENT = exports.ON_SEARCH_EVENT = 'ON_SEARCH';
var SEARCH_OB_STARTED_EVENT = exports.SEARCH_OB_STARTED_EVENT = 'SEARCH_OB_STARTED';
var SEARCH_OB_DONE_EVENT = exports.SEARCH_OB_DONE_EVENT = 'SEARCH_OB_DONE';
var SEARCH_DONE = exports.SEARCH_DONE = 'SEARCH_DONE';
var SEARCH_FORCE_DONE_EVENT = exports.SEARCH_FORCE_DONE_EVENT = 'SEARCH_FORCE_DONE';
var UPDATE_CONFIG_AND_ENGINE_ID_FINISHED = exports.UPDATE_CONFIG_AND_ENGINE_ID_FINISHED = 'UPDATE_CONFIG_AND_ENGINE_ID_FINISHED';
var GET_CHROME_TOPSITES_DONE = exports.GET_CHROME_TOPSITES_DONE = 'GET_CHROME_TOPSITES_DONE';
var BUILD_TOPSITES_LOCALSTORAGE_DONE = exports.BUILD_TOPSITES_LOCALSTORAGE_DONE = 'BUILD_TOPSITES_LOCALSTORAGE_DONE';
var GET_GOOGLE_TRENDING_SEARCHES = exports.GET_GOOGLE_TRENDING_SEARCHES = 'GET_GOOGLE_TRENDING_SEARCHES';
var RSS_LINK_CLICKED = exports.RSS_LINK_CLICKED = 'RSS_LINK_CLICKED';
var RSS_LOGO_CLICKED = exports.RSS_LOGO_CLICKED = 'RSS_LOGO_CLICKED';
var RSS_MORE_CLICKED = exports.RSS_MORE_CLICKED = 'RSS_MORE_CLICKED';
var RSS_ADD_FEED_CLICKED = exports.RSS_ADD_FEED_CLICKED = 'RSS_ADD_FEED_CLICKED';
var RSS_REMOVE_FEED_CLICKED = exports.RSS_REMOVE_FEED_CLICKED = 'RSS_REMOVE_FEED_CLICKED';
var SET_CHROME_POPUP_DONE = exports.SET_CHROME_POPUP_DONE = 'SET_CHROME_POPUP_DONE';
var XT_ABG_CHANGED = exports.XT_ABG_CHANGED = 'XT_ABG_CHANGED';
var CONFIG_CHANGED = exports.CONFIG_CHANGED = 'CONFIG_CHANGED';
var CONFIG_REQUEST = exports.CONFIG_REQUEST = 'CONFIG_REQUEST';
var CONFIG_RECEIVED = exports.CONFIG_RECEIVED = 'CONFIG_RECEIVED';
var EXTENSION_INSTALLED = exports.EXTENSION_INSTALLED = 'install';
var SHOW_FEEDBACK = exports.SHOW_FEEDBACK = 'SHOW_FEEDBACK';
var SEARCH_ENGINE_CHANGED = exports.SEARCH_ENGINE_CHANGED = 'SEARCH_ENGINE_CHANGED';
var BROWSER_UNINSTALL_EVENT = exports.BROWSER_UNINSTALL_EVENT = 'browserUninstall';
var FIRST_DS_EVENT = exports.FIRST_DS_EVENT = 'FIRST_DS_EVENT';
var GENERIC_TRACKING_REQUEST = exports.GENERIC_TRACKING_REQUEST = 'GENERIC_TRACKING_REQUEST';

// Chrome events
var CHROME_NEW_TAB_CLICKED = exports.CHROME_NEW_TAB_CLICKED = 'CHROME_NEW_TAB_CLICKED';
var BROWSER_ACTION_CLICKED = exports.BROWSER_ACTION_CLICKED = 'BROWSER_ACTION_CLICKED';
var CHROME_ON_MESSAGE = exports.CHROME_ON_MESSAGE = 'CHROME_ON_MESSAGE';
var CHROME_ON_BEFORE_REQUEST = exports.CHROME_ON_BEFORE_REQUEST = 'CHROME_ON_BEFORE_REQUEST';
var CHROME_TABS_ON_UPDATE = exports.CHROME_TABS_ON_UPDATE = 'CHROME_TABS_ON_UPDATE';
var CHROME_RUNTIME_ON_INSTALLED = exports.CHROME_RUNTIME_ON_INSTALLED = 'CHROME_RUNTIME_ON_INSTALLED';
var EXTENSION_INSTALLED_EVENT = exports.EXTENSION_INSTALLED_EVENT = 'EXTENSION_INSTALLED';
var EXTENSION_UPDATED_EVENT = exports.EXTENSION_UPDATED_EVENT = 'EXTENSION_UPDATED';
var CHROME_RUNTIME_ON_MESSAGE = exports.CHROME_RUNTIME_ON_MESSAGE = 'CHROME_RUNTIME_ON_MESSAGE';
var CHROME_CREATE_TAB_EVENT = exports.CHROME_CREATE_TAB_EVENT = 'CHROME_CREATE_TAB_EVENT';
var BROWSER_CONTEXT_MENUS_CLICKED = exports.BROWSER_CONTEXT_MENUS_CLICKED = 'BROWSER_CONTEXT_MENUS_CLICKED';

var COMPONENT_MOUNTED = exports.COMPONENT_MOUNTED = 'COMPONENT_MOUNTED';

// Keys
var KEY_DOWN_CODE = exports.KEY_DOWN_CODE = 38;
var KEY_UP_CODE = exports.KEY_UP_CODE = 40;

// Secured Search
var YAHOO_SERP_REGEX = exports.YAHOO_SERP_REGEX = '^https://([a-z]+\\.)?search.yahoo.com';
var ALLOW_FOR_X_MS_CLICKED_EVENT = exports.ALLOW_FOR_X_MS_CLICKED_EVENT = 'ALLOW_FOR_X_MS_CLICKED';
var ALLOW_PERMANENTLY_CLICKED_EVENT = exports.ALLOW_PERMANENTLY_CLICKED_EVENT = 'ALLOW_PERMANENTLY_CLICKED';
var TAB_LOAD_COMPLETED_EVENT = exports.TAB_LOAD_COMPLETED_EVENT = 'TAB_LOAD_COMPLETED';

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.insertDeepValueToObj_V2 = exports.isTypeofObject = exports.calculateTimeDiffForFirstParamWithValue = exports.removeEmptyObjectsInArray = exports.isTruthy = exports.batchArraySplice = exports.getDeepValueFromObj_V2 = exports.removeDuplicatesObjectsInArrayByKey = exports.replaceInObject = exports.listCombinerByPattern = exports.arrayify = exports.arrayToObject = exports.reportGoogleAdwordConversion = exports.loadRemoteScript = exports.replaceInvalidCharsInJsonString = exports.callUtilsFunc = exports.isNodeExistInObject = exports.isFalsy = exports.isFalse = exports.isTrue = exports.isError = exports.isPlaceHolder = exports.trueOrFalse = exports.getRandomIntInclusive = exports.imageStandard = exports.checkMathConditionByOp = exports.removeItemFromArray = exports.filterArrayDeepValueAndCondition = exports.sortArrayByDeepValueAndCondition = exports.dynamicMethods = exports.isObjectEmpty = exports.stringifyBytes = exports.insertDeepValueToObj = exports.getDeepValueFromObj = exports.areObjectsEqual = exports.placeHolderFunctions = exports.randomStr = exports.cloneObject = exports.crc32 = exports.removeDuplicatesInArray = exports.isArray = exports.isStr = exports.isFunc = exports.isUndef = exports.isBool = exports.isKeyWithValueInObject = exports.isObject = exports.capitalizeFirstLetter = exports.downloadFile = exports.compVer = exports.stringToObject = exports.objectToString = exports.populateFromLocalStorage = exports.imageToB64 = exports.tryStringifyJSON = exports.tryParseJSON = exports.getParameterByName = exports.sprintf = exports.createGUID = exports.strEndsWith = exports.strStartsWith = exports.getWeekCounter = exports.getWeek = exports.yymmdd = undefined;

var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Utils = function () {
    function Utils() {
        _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
        key: 'yymmdd',
        value: function yymmdd() {
            try {
                var date = new Date();
                return (date.getUTCFullYear() + '').slice(-2) + ('0' + (date.getUTCMonth() + 1)).slice(-2) + ('0' + date.getUTCDate()).slice(-2);
            } catch (e) {
                _LoggerService2.default.track('error', 'yymmdd: ' + e.message);
            }
        }
    }, {
        key: 'getWeek',
        value: function getWeek(date) {
            var target = new Date(date.valueOf());
            var dayNr = (date.getDay() + 6) % 7;
            target.setDate(target.getDate() - dayNr + 3);
            var firstThursday = target.valueOf();
            target.setMonth(0, 1);
            if (target.getDay() != 4) {
                target.setMonth(0, 1 + (4 - target.getDay() + 7) % 7);
            }
            var week = 1 + Math.ceil((firstThursday - target) / 604800000);
            week = '0' + week;
            return week.slice(-2);
        }
    }, {
        key: 'getWeekCounter',
        value: function getWeekCounter(initWeek, initYear, toWeek, toYear) {
            var numOfYears = toYear - initYear + 1;
            var years = [];
            var totalWeeks = 0;
            try {
                for (var i = 0; i < numOfYears; i++) {
                    years.push(initYear + i);
                }for (var _i = 0; _i < years.length; _i++) {
                    var _day = 31;
                    while (parseFloat(getWeek(new Date(years[_i], 11, _day))) === 1) {
                        _day = _day - 1;
                    }

                    totalWeeks = totalWeeks + parseFloat(getWeek(new Date(years[_i], 11, _day)));
                }
                totalWeeks = totalWeeks - initWeek;
                var day = 31;
                while (parseFloat(getWeek(new Date(toYear, 11, day))) === 1) {
                    day = day - 1;
                }
                totalWeeks = totalWeeks - (parseFloat(getWeek(new Date(toYear, 11, day))) - toWeek);
                return totalWeeks;
            } catch (e) {
                return totalWeeks;
            }
        }
    }, {
        key: 'strStartsWith',
        value: function strStartsWith(str, prefix) {
            if ((typeof str === 'undefined' ? 'undefined' : _typeof(str)) === 'object') {
                try {
                    str = JSON.stringify(str);
                } catch (e) {
                    _LoggerService2.default.track('error', 'strStartsWith: ' + e.message);
                    return false;
                }
            }
            prefix = typeof prefix === 'string' ? [prefix] : prefix;
            for (var begin in prefix) {
                if (str.indexOf(prefix[begin]) === 0) return true;
            }
            return false;
        }
    }, {
        key: 'strEndsWith',
        value: function strEndsWith(str, suffix) {
            if ((typeof str === 'undefined' ? 'undefined' : _typeof(str)) === 'object') {
                try {
                    str = JSON.stringify(str);
                } catch (e) {
                    _LoggerService2.default.track('error', 'strEndsWith: ' + e.message);
                    return false;
                }
            }
            var suf = typeof suffix === 'string' ? [suffix] : suffix;
            for (var i in suf) {
                var end = suf[i];
                if (str.match(end + '$')) return true;
            }
            return false;
        }
    }, {
        key: 'createGUID',
        value: function createGUID() {
            try {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0,
                        v = c == 'x' ? r : r & 0x3 | 0x8;
                    return v.toString(16);
                });
            } catch (e) {
                _LoggerService2.default.track('error', 'createGUID: ' + e.message);
            }
        }
    }, {
        key: 'sprintf',
        value: function sprintf(str, params) {
            var formatted = str;
            for (var k in params) {
                var v = params[k];
                var regexp = new RegExp('\\{' + k + '\\}', 'gi');
                formatted = formatted.replace(regexp, v);
            }
            return formatted;
        }
    }, {
        key: 'getParameterByName',
        value: function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';

            return window.decodeURIComponent(results[2].replace(/\+/g, ' '));
        }
    }, {
        key: 'tryParseJSON',
        value: function tryParseJSON(jsonString) {
            try {
                return (typeof jsonString === 'undefined' ? 'undefined' : _typeof(jsonString)) === 'object' ? jsonString : JSON.parse(jsonString);
            } catch (e) {
                return false;
            }
        }
    }, {
        key: 'tryStringifyJSON',
        value: function tryStringifyJSON(obj) {
            try {
                var j = JSON.stringify(obj);
                if (j && typeof j === 'string') {
                    return j;
                }
                return false;
            } catch (e) {
                return false;
            }
        }
    }, {
        key: 'imageToB64',
        value: function imageToB64(url) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.responseType = 'blob';
                xhr.onload = function () {
                    var reader = new FileReader();
                    reader.onloadend = function () {
                        resolve(reader.result);
                    };
                    reader.readAsDataURL(xhr.response);
                };
                xhr.open('GET', url);
                xhr.send();
            });
        }
    }, {
        key: 'populateFromLocalStorage',
        value: function populateFromLocalStorage(obj) {
            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            if (obj && obj['local_storage']) {
                for (var i in obj['local_storage']) {
                    var local_storage = obj['local_storage'][i];
                    if (Array.isArray(local_storage['key'])) {
                        try {
                            if (typeof pref.get(local_storage['key'][0]) === 'undefined') return;
                            var value = pref.get(local_storage['key'][0]);
                            for (var _i2 = 1; _i2 < local_storage['key'].length; _i2++) {
                                if (typeof value[local_storage['key'][_i2]] === 'undefined') return;
                                value = value[local_storage['key'][_i2]];
                            }
                            obj[local_storage['field']] = value;
                        } catch (e) {
                            _LoggerService2.default.debug(e.message, '@populateFromLocalStorage');
                        }
                    } else obj[local_storage['field']] = localStorage[local_storage['key']];
                }
                if (!obj['keep_local_storage']) delete obj['local_storage'];
            }
        }
    }, {
        key: 'objToQueryString',
        value: function objToQueryString(obj) {
            var string = '';
            for (var key in obj) {
                string += key + '=' + obj[key] + '&';
            }
            string = string.slice(0, -1);

            return string;
        }
    }, {
        key: 'escapeRegExp',
        value: function escapeRegExp(str) {
            return str.replace(new RegExp('[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]', 'g'), '\\$&');
        }
    }, {
        key: 'objectToString',
        value: function objectToString(obj, delBetweenKeys, delBetweenKeyValues, prefixToAdd) {
            var str = prefixToAdd || '';
            for (var key in obj) {
                str += '' + key + delBetweenKeyValues + encodeURIComponent(obj[key]).replace(new RegExp(Utils.escapeRegExp(delBetweenKeys), 'g'), '%' + delBetweenKeys.charCodeAt(0).toString(16)).replace(new RegExp(Utils.escapeRegExp(delBetweenKeyValues), 'g'), '%' + delBetweenKeyValues.charCodeAt(0).toString(16)) + delBetweenKeys;
            }
            return str.slice(0, -1);
        }
    }, {
        key: 'escapeHtml',
        value: function escapeHtml(str) {
            var txt = document.createElement('textarea');
            txt.innerHTML = str;
            return txt.value;
        }
    }, {
        key: 'stringToObject',
        value: function stringToObject(string, delBetweenKeys, delBetweenKeyValues, prefixToRemove) {
            var obj = {};
            var internalString = string;
            if (!string || !delBetweenKeys || !delBetweenKeyValues) {
                return {};
            }

            if (prefixToRemove) {
                internalString = string.replace(prefixToRemove, '');
            }

            if (internalString.indexOf(delBetweenKeys) > -1) {
                var internalArr = internalString.split(delBetweenKeys);
                for (var i = 0; i < internalArr.length; i++) {
                    if (internalArr[i].indexOf(delBetweenKeyValues) > -1) {
                        obj[internalArr[i].split(delBetweenKeyValues)[0]] = internalArr[i].split(delBetweenKeyValues)[1];
                    } else {
                        obj[internalArr[i]] = internalArr[i];
                    }
                }
            } else if (internalString.indexOf(delBetweenKeyValues) > -1) {
                obj[internalString.split(delBetweenKeyValues)[0]] = internalString.split(delBetweenKeyValues)[1];
            } else {
                obj[internalString] = internalString;
            }
            return obj;
        }
    }, {
        key: 'compVer',
        value: function compVer(a, b) {
            a = a.toString();
            b = b.toString();
            var i = void 0,
                diff = void 0;
            var regExStrip0 = /(\.0+)+$/;
            var segmentsA = a.replace(regExStrip0, '').split('.');
            var segmentsB = b.replace(regExStrip0, '').split('.');
            var l = Math.min(segmentsA.length, segmentsB.length);

            for (i = 0; i < l; i++) {
                diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
                if (diff) {
                    return diff;
                }
            }
            return segmentsA.length - segmentsB.length;
        }
    }, {
        key: 'downloadFile',
        value: function downloadFile(downloadUrl, cb) {
            if (!downloadUrl) return;
            var iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.src = downloadUrl;
            document.body.appendChild(iframe);

            if (typeof cb === 'function') cb();
        }
    }, {
        key: 'capitalizeFirstLetter',
        value: function capitalizeFirstLetter(s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        }
    }, {
        key: 'isObject',
        value: function isObject(obj) {
            return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);
        }
    }, {
        key: 'isStr',
        value: function isStr(str) {
            return typeof str === 'string';
        }
    }, {
        key: 'isFunc',
        value: function isFunc(func) {
            return typeof func === 'function';
        }
    }, {
        key: 'isUndef',
        value: function isUndef(value) {
            return typeof value === 'undefined';
        }
    }, {
        key: 'isBool',
        value: function isBool(value) {
            return typeof value === 'boolean';
        }
    }, {
        key: 'isArray',
        value: function isArray(arr) {
            return Array.isArray(arr);
        }
    }, {
        key: 'isKeyWithValueInObject',
        value: function isKeyWithValueInObject(object, key, value) {
            //is object and has property key and the key's value matches
            return {}.constructor === object.constructor && object.hasOwnProperty(key) && object[key] === value;
        }
    }, {
        key: 'removeDuplicatesInArray',
        value: function removeDuplicatesInArray(array) {
            return array.filter(function (elem, pos, arr) {
                return arr.indexOf(elem) === pos;
            });
        }
    }, {
        key: 'crc32',
        value: function crc32(str) {
            if (!str) return str;
            var makeCRCTable = function makeCRCTable() {
                var c = void 0;
                var crcTable = [];
                for (var n = 0; n < 256; n++) {
                    c = n;
                    for (var k = 0; k < 8; k++) {
                        c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
                    }
                    crcTable[n] = c;
                }
                return crcTable;
            };

            var crcTable = makeCRCTable();
            var crc = 0 ^ -1;

            for (var i = 0; i < str.length; i++) {
                crc = crc >>> 8 ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
            }

            return (crc ^ -1) >>> 0;
        }
    }, {
        key: 'cloneObject',
        value: function cloneObject(obj) {
            if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
                return obj;
            }

            var temp = obj.constructor();
            for (var key in obj) {
                temp[key] = _cloneObject(obj[key]);
            }
            return temp;
        }
    }, {
        key: 'randomStr',
        value: function randomStr(allowedChars, length) {
            var limit = typeof length === 'number' ? length : 6;
            var chars = typeof allowedChars === 'string' ? allowedChars : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var str = '';
            for (var i = 0; i < limit; i++) {
                str += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return str;
        }
    }, {
        key: 'placeHolderFunctions',
        value: function placeHolderFunctions(baseString, functionsArray) {
            var _this = this;

            var engine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var extraData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            if (!functionsArray || !Array.isArray(functionsArray) || !baseString) return baseString;
            var stringFuncs = [];
            for (var func in functionsArray) {
                if (functionsArray.hasOwnProperty(func)) stringFuncs[func] = tryStringifyJSON(functionsArray[func]);
            }var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var searchService = _ServiceFactory2.default.get(_Consts.SEARCH_SERVICE);
            var replacedString = (typeof baseString === 'undefined' ? 'undefined' : _typeof(baseString)) === 'object' ? JSON.stringify(baseString) : baseString;
            engine.params = isObject(engine.params) ? engine.params : {};
            _assign(engine.params, extraData);
            var phFuncsHandler = function phFuncsHandler(funcName) {
                var funcArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var string = arguments[2];
                var engine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                var extraData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

                if (!funcName || !funcArgs['ph']) return string;
                var ph = funcArgs['ph'];
                var modStr = string;
                var cond = funcArgs['condition'] ? new _Condition2.default(funcArgs['condition']) : null;
                if (!(cond === null || cond && cond.check({}, {}, { engine: engine, extraData: extraData }))) return modStr;
                var count_ph = funcArgs['count_ph'];
                var calculateTimeDiff = funcArgs['calculateTimeDiff'] || false;
                var phRegEx = new RegExp(ph, 'g');
                switch (funcName) {
                    case 'engineParams':
                        if (!funcArgs['param']) break;
                        modStr = modStr.replace(phRegEx, engine['params'][funcArgs['param']] || '');
                        break;
                    case 'prefParams':
                        {
                            if (!funcArgs['param']) break;
                            var value = pref.get(funcArgs['param']) || funcArgs['default'] || '';
                            modStr = modStr.replace(phRegEx, value);
                            break;
                        }
                    case 'paramFromSource':
                        {
                            var source = funcArgs['source'];
                            var _value = funcArgs.hasOwnProperty('value') ? funcArgs.value : undefined;
                            if (source) {
                                var param = funcArgs['param'];
                                switch (source) {
                                    case 'pref':
                                        {
                                            //Multiple params
                                            if (isKeyWithValueInObject(param, 'operator', 'or')) {
                                                _value = calculateTimeDiff ? pref.calculateTimeDiffForFirstParamWithValue(param['params'], param['operator']) : pref.getFirstParamWithValue(param['params'], param['operator']);
                                                break;
                                            }

                                            //Single param
                                            _value = calculateTimeDiff ? pref.calculateTimeDiff(param) : pref.get(param);
                                            break;
                                        }
                                    case 'engine':
                                        {
                                            var _engine = !isObjectEmpty(engine) ? engine : searchService.getTempOrCurrentSearchEngine();
                                            _value = getDeepValueFromObj(_engine, param);
                                            break;
                                        }
                                    case 'extraData':
                                        {
                                            _value = getDeepValueFromObj(extraData, param);
                                            break;
                                        }
                                    case 'global':
                                        {
                                            if (calculateTimeDiff) {
                                                _value = pref.calculateTimeDiff(param, 'global');
                                            } else {
                                                _value = pref.get(param, 'global');
                                            }
                                            break;
                                        }
                                    case 'hash':
                                        {
                                            _value = getDeepValueFromObj(stringToObject(window.location.hash, '-', '_', '#'), param);
                                            _value = typeof _value === 'string' ? decodeURIComponent(_value) : _value;
                                            break;
                                        }
                                }
                            }

                            if (!isUndef(_value) && funcArgs['postDynamicMethods']) {
                                for (var i in funcArgs['postDynamicMethods']) {
                                    if (!funcArgs['postDynamicMethods'].hasOwnProperty(i)) continue;
                                    var cfg = funcArgs['postDynamicMethods'][i];
                                    _value = dynamicMethods(_value, typeof _value === 'undefined' ? 'undefined' : _typeof(_value), Object.keys(cfg)[0], cfg[Object.keys(cfg)[0]]);
                                }
                            }
                            if (!isUndef(_value) && funcArgs['map']) {
                                _value = funcArgs['map'][_value];
                            }
                            if (isTypeofObject(_value)) {
                                if (count_ph) {
                                    modStr = modStr.replace(new RegExp('' + count_ph, 'g'), Object.keys(_value).length);
                                }
                                _value = tryStringifyJSON(_value) || funcArgs['default'] || 'null';
                                modStr = modStr.replace(new RegExp('"' + ph + '"', 'g'), _value);
                            } else if (isBool(_value)) {
                                modStr = modStr.replace(new RegExp('"' + ph + '"', 'g'), _value ? 'true' : 'false');
                            } else if (isStr(_value) && isObject(baseString)) {
                                _value = _value.replace(/"/g, '\\"');
                            }

                            if (count_ph && !isObject(_value)) {
                                modStr = modStr.replace(new RegExp('' + count_ph, 'g'), 0);
                            }

                            _value = !isUndef(_value) ? _value : funcArgs.hasOwnProperty('default') ? funcArgs['default'] : '';
                            modStr = modStr.replace(phRegEx, (typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === 'object' ? JSON.stringify(_value) : _value);
                            break;
                        }
                    case 'browserData':
                        {
                            if (!funcArgs['param'] || !funcArgs['method']) break;
                            var method = funcArgs['method'];
                            var methodArgs = funcArgs['methodArgs'] || [];
                            var _param = funcArgs['param'];
                            var _value2 = false;
                            if (typeof _BrowserService2.default[method] === 'function') {
                                _value2 = _BrowserService2.default[method].apply(_BrowserService2.default, _toConsumableArray(methodArgs));
                                _value2 = getDeepValueFromObj(_value2, _param);
                            }
                            _value2 = _value2 || funcArgs['default'] || '';
                            modStr = modStr.replace(phRegEx, _value2);
                            break;
                        }
                    case 'getMappedCC':
                        modStr = modStr.replace(phRegEx, searchService.getEngineSubDomain(engine || null));
                        break;
                    case 'getBrowser':
                        {
                            var br = _BrowserService2.default.getBrowserFlavor('long').toLowerCase();
                            if (isObject(funcArgs['browserMap']) && funcArgs['browserMap'][br]) br = funcArgs['browserMap'][br];
                            modStr = modStr.replace(phRegEx, br);
                            break;
                        }
                    case 'getCC':
                        {
                            var cc = pref.get('cc') || '';
                            try {
                                cc = cc.toLowerCase();
                            } catch (e) {}
                            modStr = modStr.replace(phRegEx, cc);
                            break;
                        }
                    case 'getYear':
                        {
                            var d = new Date();
                            if (isObject(funcArgs['baseDate']) && funcArgs['baseDate']['source']) {
                                var _source = funcArgs['baseDate']['source'];
                                var key = funcArgs['baseDate']['key'];
                                if (_source === 'pref' && key) {
                                    _source = pref.get(key) || 0;
                                }
                                if (funcArgs['baseDate'].hasOwnProperty('multiplier')) {
                                    _source = _source * funcArgs['baseDate']['multiplier'];
                                }
                                d = new Date(_source);
                            }
                            var y = d.getFullYear();
                            if (funcArgs['startYear'] && !isNaN(funcArgs['startYear'])) y = y - funcArgs['startYear'];
                            if (!isNaN(y) && y < 0 && funcArgs.hasOwnProperty('negativeFallback')) y = funcArgs['negativeFallback'];
                            modStr = modStr.replace(phRegEx, y);
                            break;
                        }
                    case 'getWeek':
                        {
                            var ww = getWeek(new Date());
                            if (isObject(funcArgs['baseDate']) && funcArgs['baseDate']['source']) {
                                var _source2 = funcArgs['baseDate']['source'];
                                var _key = funcArgs['baseDate']['key'];
                                if (_source2 === 'pref' && _key) {
                                    _source2 = pref.get(_key) || 0;
                                }
                                if (funcArgs['baseDate'].hasOwnProperty('multiplier') && !isNaN(_source2)) {
                                    _source2 = _source2 * funcArgs['baseDate']['multiplier'];
                                }
                                _source2 = !isNaN(_source2) ? _source2 : 0;
                                ww = getWeek(new Date(_source2));
                            }
                            modStr = modStr.replace(phRegEx, ww);
                            break;
                        }
                    case 'phPerParam':
                        {
                            var def = funcArgs['default'] || ph;
                            if (!funcArgs['key'] || !isObject(funcArgs['map'])) {
                                modStr = modStr.replace(phRegEx, def);
                                break;
                            }
                            var val = false;
                            var _source3 = funcArgs['source'] || 'pref';
                            var _key2 = funcArgs['key'];
                            var map = funcArgs['map'];
                            switch (_source3) {
                                case 'engineParams':
                                    if (isObject(engine) && engine['params'] && engine['params'].hasOwnProperty(_key2)) val = engine['params'][_key2];
                                    break;
                                default:
                                    val = pref.get(_key2);
                            }
                            try {
                                val = val.toLowerCase();
                            } catch (e) {}
                            val = map[val];
                            if (typeof val === 'undefined') val = def;
                            modStr = modStr.replace(phRegEx, val);
                            break;
                        }
                    case 'getDate':
                        {
                            if (!isObject(funcArgs['format']) || !funcArgs['format']['full']) break;
                            var format = funcArgs['format']['full'];
                            var timeMultiplier = 1;
                            var currentDate = new Date();
                            var time = void 0,
                                date = void 0;
                            if (isObject(funcArgs['baseDate']) && funcArgs['baseDate']['source'] && funcArgs['baseDate']['key']) {
                                var baseSource = funcArgs['baseDate']['source'];
                                var _key3 = funcArgs['baseDate']['key'];
                                switch (baseSource) {
                                    case 'pref':
                                        if (!_key3) break;
                                        time = pref.get(_key3);
                                        break;
                                }
                                timeMultiplier = funcArgs['baseDate']['timeMultiplier'] || 1;
                                time = time && !isNaN(time) ? time * timeMultiplier : false;
                            }
                            var offset = 0;
                            if (time && funcArgs.hasOwnProperty('utc')) {
                                var baseOffset = 0;
                                if (funcArgs['baseDate'] && funcArgs['baseDate'].hasOwnProperty(['timeZone'])) {
                                    switch (funcArgs['baseDate']['timeZone']) {
                                        case 'clientTZ':
                                            baseOffset = currentDate.getTimezoneOffset();
                                            break;
                                        default:
                                            if (isNaN(funcArgs['baseDate']['timeZone'])) break;
                                            baseOffset = funcArgs['baseDate']['timeZone'] * 60;
                                            break;
                                    }
                                }
                                offset = (funcArgs['utc'] * 60 + baseOffset) * 60000;
                            }
                            time = time ? time + offset : false;
                            date = time ? new Date(time) : new Date();
                            if (isObject(funcArgs['format']['day']) && funcArgs['format']['day']['ph'] && funcArgs['format']['day']['length']) {
                                format = format.replace(funcArgs['format']['day']['ph'], ('0'.repeat(funcArgs['format']['day']['length']) + date.getDate().toString()).slice(-funcArgs['format']['day']['length']));
                            }
                            if (isObject(funcArgs['format']['month']) && funcArgs['format']['month']['ph'] && funcArgs['format']['month']['length']) {
                                format = format.replace(funcArgs['format']['month']['ph'], ('0'.repeat(funcArgs['format']['month']['length']) + (date.getMonth() + 1).toString()).slice(-funcArgs['format']['month']['length']));
                            }
                            if (isObject(funcArgs['format']['year']) && funcArgs['format']['year']['ph'] && funcArgs['format']['year']['length']) {
                                format = format.replace(funcArgs['format']['year']['ph'], ('0'.repeat(funcArgs['format']['year']['length']) + date.getFullYear().toString()).slice(-funcArgs['format']['year']['length']));
                            }
                            modStr = modStr.replace(phRegEx, format);
                            break;
                        }
                    case 'getCrc32':
                        {
                            if (!funcArgs['source'] || !funcArgs['key']) break;
                            var str = '';
                            switch (funcArgs['source']) {
                                case 'pref':
                                    str = pref.get(funcArgs['key']);
                                    break;
                            }
                            if (isObject(funcArgs['regexBeforeCrc']) && funcArgs['regexBeforeCrc']['exp']) {
                                try {
                                    var resInArray = funcArgs['regexBeforeCrc']['resultInArr'] || 0;
                                    str = str.match(funcArgs['regexBeforeCrc']['exp'])[resInArray] || str;
                                } catch (e) {}
                            }

                            str = crc32(str);
                            if (funcArgs['paddingValue']) {
                                str = (funcArgs['paddingValue'] + str).slice(-funcArgs['paddingValue'].length);
                            }
                            modStr = modStr.replace(phRegEx, str);
                            break;
                        }
                    case 'random':
                        modStr = modStr.replace(phRegEx, randomStr(funcArgs['allowedChars'], funcArgs['length']));
                        break;
                    case 'yBeacon':
                        modStr = modStr.replace(phRegEx, searchService.yahooParam2Beacon(engine.params.asset, true));
                        break;
                    case 'utils':
                        modStr = modStr.replace(phRegEx, Utils.callUtilsFunc(_this, funcArgs['func'], funcArgs['args'], funcArgs['default'] || ''));
                        break;
                }
                return modStr;
            };

            for (var _func = 0; _func < stringFuncs.length; _func++) {
                if (stringFuncs.hasOwnProperty(_func) && stringFuncs[_func]) {
                    // let funcObj = functionsArray[func];
                    var funcObj = void 0,
                        keys = void 0,
                        funcName = void 0,
                        funcArgs = void 0;
                    if (!(funcObj = tryParseJSON(stringFuncs[_func])) || (keys = Object.keys(funcObj)) && keys.length !== 1 || (funcName = keys[0]) && (funcArgs = funcObj[funcName]) && !isObject(funcArgs)) continue;
                    replacedString = phFuncsHandler(funcName, funcArgs, replacedString, engine, extraData);
                    for (var i = _func + 1; i < stringFuncs.length; i++) {
                        stringFuncs[i] = phFuncsHandler(funcName, funcArgs, stringFuncs[i], engine, extraData);
                    }
                }
            }
            return (typeof baseString === 'undefined' ? 'undefined' : _typeof(baseString)) === 'object' ? JSON.parse(replaceInvalidCharsInJsonString(replacedString)) : replacedString;
        }
    }, {
        key: 'areObjectsEqual',
        value: function areObjectsEqual(object1, object2) {
            var type = Object.prototype.toString.call(object1);
            if (type !== Object.prototype.toString.call(object2)) return false;
            if (['[object Array]', '[object Object]'].indexOf(type) < 0) return false;
            var valueLen = type === '[object Array]' ? object1.length : Object.keys(object1).length;
            var otherLen = type === '[object Array]' ? object2.length : Object.keys(object2).length;
            if (valueLen !== otherLen) return false;
            var comparison = function comparison(item1, item2) {

                var itemType = Object.prototype.toString.call(item1);
                if (['[object Array]', '[object Object]'].indexOf(itemType) >= 0) {
                    if (!_areObjectsEqual(item1, item2)) return false;
                } else {
                    if (itemType !== Object.prototype.toString.call(item2)) return false;
                    if (itemType === '[object Function]') {
                        if (item1.toString() !== item2.toString()) return false;
                    } else {
                        if (item1 !== item2) return false;
                    }
                }
            };

            if (type === '[object Array]') {
                for (var i = 0; i < valueLen; i++) {
                    if (comparison(object1[i], object2[i]) === false) return false;
                }
            } else {
                for (var key in object1) {
                    if (object1.hasOwnProperty(key)) {
                        if (comparison(object1[key], object2[key]) === false) return false;
                    }
                }
            }
            return true;
        }
    }, {
        key: 'getDeepValueFromObj',
        value: function getDeepValueFromObj(_object, treeArray) {
            var array = typeof treeArray === 'string' ? [treeArray] : treeArray;
            var object = (typeof _object === 'undefined' ? 'undefined' : _typeof(_object)) !== 'object' ? tryParseJSON(_object) : _object;
            if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' || !isArray(array)) return _object;
            var value = object;
            // let value = cloneObject(object);
            for (var key in array) {
                if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') break;
                value = value[array[key]];
            }
            return value;
        }
    }, {
        key: 'insertDeepValueToObj',
        value: function insertDeepValueToObj(object, array, value) {
            var _object = tryParseJSON(object) || object;
            if ((typeof _object === 'undefined' ? 'undefined' : _typeof(_object)) !== 'object') return value;
            var obj = _cloneObject(_object);

            var key = obj;
            for (var i = 0; i < array.length - 1; i++) {
                var next = _typeof(key[array[i]]) === 'object' ? key[array[i]] : {};
                key[array[i]] = next;
                key = next;
            }
            key[array[array.length - 1]] = value;
            var ret = (typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' ? tryStringifyJSON(obj) : false;
            ret = ret || obj;
            return ret;
        }
    }, {
        key: 'insertDeepValueToObj_V2',
        value: function insertDeepValueToObj_V2() {
            var rootObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var data = arguments[2];

            var _path = arrayify(path);
            var locationPointer = rootObject || {};
            if (!isObjectEmpty(path)) {
                for (var e in _path) {
                    var elem = _path[e];
                    if (_path.length - 1 == e) {
                        locationPointer[elem] = data;
                        break;
                    }
                    if (!isObject(locationPointer[elem])) {
                        locationPointer[elem] = {};
                    }
                    locationPointer = locationPointer[elem];
                }
            } else {
                locationPointer = data;
            }

            return locationPointer;
        }
    }, {
        key: 'stringifyBytes',
        value: function stringifyBytes(bytes, decimals, space) {
            var _space = space ? ' ' : '';
            if (0 == bytes) return '0' + _space + 'Bytes';
            var c = 1024,
                d = decimals || 2,
                e = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                f = Math.floor(Math.log(bytes) / Math.log(c));
            return parseFloat((bytes / Math.pow(c, f)).toFixed(d)) + _space + e[f];
        }
    }, {
        key: 'isObjectEmpty',
        value: function isObjectEmpty(object) {
            return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && Object.keys(object).length === 0;
        }
    }, {
        key: 'dynamicMethods',
        value: function dynamicMethods(source, sourceType, method) {
            var methodArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            if (!source || !sourceType || !method) return source;
            if (typeof Utils[method] !== 'undefined') return Utils[method](source);
            if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== sourceType) return source;
            if (typeof source[method] !== 'function') return source;
            return source[method].apply(source, _toConsumableArray(methodArgs));
        }
    }, {
        key: 'sortArrayByDeepValueAndCondition',
        value: function sortArrayByDeepValueAndCondition() {
            var arrayToBeSorted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var deepValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var sortLogic = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            arrayToBeSorted.sort(function (a, b) {
                var aScore = false;
                var bScore = false;
                var aValue = getDeepValueFromObj(a, deepValue);
                var bValue = getDeepValueFromObj(b, deepValue);
                for (var item in sortLogic) {
                    if (aValue === sortLogic[item]) {
                        aScore = true;
                        break;
                    }
                    if (bValue === sortLogic[item]) {
                        bScore = true;
                        break;
                    }
                }
                return aScore ? -1 : bScore ? 1 : 0;
            });
            return arrayToBeSorted;
        }
    }, {
        key: 'filterArrayDeepValueAndCondition',
        value: function filterArrayDeepValueAndCondition() {
            var arrayToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var deepValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var operator = arguments[2];
            var condition = arguments[3];

            if (typeof condition === 'undefined') return arrayToHandle;
            return arrayToHandle.filter(function (elem) {
                return checkMathConditionByOp(getDeepValueFromObj(elem, deepValue), operator, condition);
            });
        }
    }, {
        key: 'removeItemFromArray',
        value: function removeItemFromArray(arr, itemToRemove) {
            return arr.filter(function (item) {
                return item !== itemToRemove;
            });
        }
    }, {
        key: 'checkMathConditionByOp',
        value: function checkMathConditionByOp(value, operator, condition) {
            switch (operator) {
                case '=':
                    return value == condition;
                case '==':
                    return value === condition;
                case '!=':
                    return value != condition;
                case '!==':
                    return value !== condition;
                case '>':
                    return value > condition;
                case '>=':
                    return value >= condition;
                case '<':
                    return value < condition;
                case '<=':
                    return value <= condition;
                case 'includes':
                    return condition.includes(value);
                case '!includes':
                    return !condition.includes(value);
                case 'objectsEqual':
                    return _areObjectsEqual(value, condition);
                case '!objectsEqual':
                    return !_areObjectsEqual(value, condition);
                case 'isFalsy':
                    return isFalsy(value);
                case 'isTruthy':
                    return isTruthy(value);
                case '!isTruthy':
                    return !isTruthy(value);
            }
            return false;
        }
    }, {
        key: 'imageStandard',
        value: function imageStandard(imagePath) {
            var requireUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var image = imagePath;
            if (!Utils.strStartsWith(image, ['http', 'data:', 'content/', '/content/'])) image = 'content/images/' + image;
            return requireUrl ? 'url(' + image + ')' : image;
        }
    }, {
        key: 'getRandomIntInclusive',
        value: function getRandomIntInclusive(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
    }, {
        key: 'trueOrFalse',
        value: function trueOrFalse(string) {
            var str = typeof string === 'string' ? string.toLowerCase() : string;
            return str || str === 'true' ? !str || str === 'false' ? false : str : str;
        }
    }, {
        key: 'formatMs',
        value: function formatMs(ms, format) {
            var date = new Date(ms);
            var h = date.getUTCHours();
            var m = date.getUTCMinutes();
            var s = date.getUTCSeconds();
            return format.replace(/{h}/g, h).replace(/{H}/g, h < 10 ? h : '0' + h).replace(/{m}/g, m).replace(/{M}/g, m < 10 ? m : '0' + m).replace(/{s}/g, s).replace(/{S}/g, s < 10 ? s : '0' + s);
        }
    }, {
        key: 'msToString',
        value: function msToString(ms) {
            var date = new Date(ms);
            var h = date.getUTCHours();
            var m = date.getUTCMinutes();
            var s = date.getUTCSeconds();

            return [h > 0 && h + (h > 1 ? ' hours' : ' hour'), m > 0 && m + (m > 1 ? ' minutes' : ' minute'), s > 0 && s + (s > 1 ? ' seconds' : ' second')].filter(function (x) {
                return typeof x === 'string';
            }).join(', ').replace(/^(.+)(,)([^,]+)$/, '$1 and$3');
        }
    }, {
        key: 'isPlaceHolder',
        value: function isPlaceHolder(string) {
            if (!isStr(string)) return false;
            return string.length > 3 && string.indexOf('{{') === 0 && string.indexOf('}}') === string.length - 2;
        }
    }, {
        key: 'isError',
        value: function isError(err) {
            return err && err.stack && err.message;
        }
    }, {
        key: 'callUtilsFunc',
        value: function callUtilsFunc(self, funcName, args, defaultValue) {
            if (typeof Utils[funcName] === 'function') return Utils[funcName].apply(self, args || []) || defaultValue;else if (typeof window[funcName] === 'function') return window[funcName].apply(self, args || []) || defaultValue;
            return undefined;
        }
    }, {
        key: 'isScrollEnd',
        value: function isScrollEnd() {
            var e = this.findDOMNode();
            return e.scrollTop + e.clientHeight === e.scrollHeight;
        }
    }, {
        key: 'isTrue',
        value: function isTrue(t) {
            return t === true || t === 'true' || t === 'True';
        }
    }, {
        key: 'isFalse',
        value: function isFalse(f) {
            return f === false || f === 'false' || f === 'False';
        }
    }, {
        key: 'isFalsy',
        value: function isFalsy(f) {
            return isFalse(f) || f === undefined || f === null || f == false;
        }
    }, {
        key: 'isTruthy',
        value: function isTruthy(t) {
            return !!t;
        }
    }, {
        key: 'isNodeExistInObject',
        value: function isNodeExistInObject(object, nodeArray) {
            if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object' || !isArray(nodeArray) || isObjectEmpty(nodeArray)) return false;
            var count = 0;
            var _object = _assign({}, object);
            for (var i in nodeArray) {
                if (!((typeof _object === 'undefined' ? 'undefined' : _typeof(_object)) === 'object' && _object.hasOwnProperty(nodeArray[i]))) break;
                count++;
                _object = _assign({}, _object[nodeArray[i]]);
            }
            return count === nodeArray.length;
        }
    }, {
        key: 'replaceInvalidCharsInJsonString',
        value: function replaceInvalidCharsInJsonString(string) {
            /*eslint-disable no-control-regex */
            return string.replace(/\\n/g, '\\n').replace(/\\'/g, '\\\'').replace(/\\"/g, '\\"').replace(/\\&/g, '\\&').replace(/\\r/g, '\\r').replace(/\\t/g, '\\t').replace(/\\b/g, '\\b').replace(/\\f/g, '\\f').replace(/[\u0000-\u0019]+/g, '');
            /*eslint-enable no-control-regex */
        }
    }, {
        key: 'loadRemoteScript',
        value: function loadRemoteScript(url, callback) {
            var keepThisInCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var scriptElement = document.createElement('script');
            scriptElement.setAttribute('src', url);
            scriptElement.onload = keepThisInCallback ? callback.bind(this) : callback;
            document.head.appendChild(scriptElement);
        }
    }, {
        key: 'reportGoogleAdwordConversion',
        value: function reportGoogleAdwordConversion(label, id) {
            var remarketingOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var sender = function sender() {
                var goog_snippet_vars = function goog_snippet_vars() {
                    var w = window;
                    w.google_conversion_id = parseInt(id, 10);
                    w.google_conversion_label = label;
                    w.google_remarketing_only = remarketingOnly;
                };
                // DO NOT CHANGE THE CODE BELOW.
                var goog_report_conversion = function goog_report_conversion(url) {
                    goog_snippet_vars();
                    window.google_conversion_format = '3';
                    var opt = {};
                    opt.onload_callback = function () {
                        if (typeof url !== 'undefined') {
                            window.location = url;
                        }
                    };
                    var conv_handler = window['google_trackConversion'];
                    if (typeof conv_handler === 'function') {
                        conv_handler(opt);
                    }
                };
                goog_report_conversion();
            };
            if (window['google_trackConversion']) {
                sender();
            } else {
                loadRemoteScript.bind(this)('https://www.googleadservices.com/pagead/conversion_async.js', function () {
                    sender();
                }, true);
            }
        }
    }, {
        key: 'arrayToObject',
        value: function arrayToObject() {
            var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            if (!isArray(array)) return array;
            var obj = {};
            for (var i = 0; i < array.length; i += 2) {
                obj[array[i]] = array[i + 1];
            }
            return obj;
        }
    }, {
        key: 'arrayify',
        value: function arrayify() {
            var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            return isArray(array) ? array : [array];
        }
    }, {
        key: 'listCombinerByPattern',
        value: function listCombinerByPattern(listsObject, pattern, maxIterations) {
            var forcePattern = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var result = [];
            if (!pattern) {
                for (var i in listsObject) {
                    var arr = listsObject[i];
                    if (!isArray(arr)) continue;
                    result = [].concat(_toConsumableArray(result), _toConsumableArray(arr));
                }
                return result;
            }
            var patternArray = [];
            var idsInPattern = [];
            //parse string pattern into simple object
            if (isStr(pattern)) {
                var _splitted = pattern.split(':');
                for (var _i3 in _splitted) {
                    var pat = _splitted[_i3];
                    var slittedPat = pat.split('_');
                    var id = slittedPat[0];
                    var amount = slittedPat[1];
                    if (isObjectEmpty(listsObject[id])) {
                        continue;
                    }
                    patternArray.push({
                        id: id,
                        amount: amount
                    });
                }
            } else {
                patternArray = pattern;
            }
            for (var _pat in patternArray) {
                idsInPattern.push(patternArray[_pat].id);
            }
            var notAsPattern = false;
            var listsStatus = {};
            var _keys = Object.keys(listsObject);
            for (var _i4 in _keys) {
                var k = _keys[_i4];
                listsStatus[k] = { done: !idsInPattern.includes(k) };
            }
            //calculate the exact amount of items per group
            for (var _i5 in patternArray) {
                var _pat2 = patternArray[_i5];
                var _id = _pat2['id'];
                if (!listsStatus[_id]) {
                    notAsPattern = true;
                    continue;
                }
                var _amount = _pat2['amount'];
                if (!isUndef(_amount.indexOf) && _amount.indexOf('%') > 0) {
                    var per = listsObject[_id].length / 100 * _amount.slice(0, -1);
                    _pat2['amountNormalized'] = per > 1 ? Math.floor(per) : 1;
                } else {
                    _pat2['amountNormalized'] = _amount;
                }
                _pat2['amountNormalized'] = parseInt(_pat2['amountNormalized']);
            }
            var getDoneCounter = function getDoneCounter() {
                var doneCounter = 0;
                for (var s in listsStatus) {
                    listsStatus[s].done ? ++doneCounter : doneCounter;
                }
                return doneCounter;
            };
            var iterationCounter = 0;
            while (getDoneCounter() < Object.keys(listsObject).length) {
                ++iterationCounter;
                var currentIterationList = [];
                for (var _i6 in patternArray) {
                    var _pat3 = patternArray[_i6];
                    if (notAsPattern && forcePattern) {
                        break;
                    }
                    var listId = _pat3.id;
                    //list exist in pattern but not in lists
                    if (!listsStatus[listId]) {
                        notAsPattern = true;
                        continue;
                    }
                    if (!listsObject[listId]) {
                        notAsPattern = true;
                        listsStatus[listId].done = true;
                        continue;
                    }
                    var fullList = listsObject[listId];
                    var amountNormalized = _pat3.amountNormalized;
                    var startPointer = listsStatus[listId].pointer || 0;
                    var endPointer = startPointer + amountNormalized;
                    var slicedList = fullList.slice(startPointer, endPointer);
                    if (slicedList.length != amountNormalized) {
                        notAsPattern = true;
                    }
                    if (isObjectEmpty(slicedList)) {
                        listsStatus[listId].done = true;
                        continue;
                    }
                    currentIterationList = [].concat(_toConsumableArray(currentIterationList), _toConsumableArray(slicedList));
                    listsStatus[listId].pointer = endPointer;
                }
                if (notAsPattern && forcePattern) {
                    break;
                }
                result = [].concat(_toConsumableArray(result), _toConsumableArray(currentIterationList));
                if (maxIterations && iterationCounter == maxIterations) {
                    break;
                }
            }
            return result;
        }
    }, {
        key: 'replaceInObject',
        value: function replaceInObject(object, searchValue, replaceWith) {
            var str = tryStringifyJSON(object);
            if (!str) return object;
            return tryParseJSON(str.replace(new RegExp(searchValue, 'g'), replaceWith)) || object;
        }
    }, {
        key: 'removeDuplicatesObjectsInArrayByKey',
        value: function removeDuplicatesObjectsInArrayByKey(arrayOfObjects, uniqueKey) {
            if (!isArray(arrayOfObjects) || !uniqueKey) return arrayOfObjects;
            return arrayOfObjects.filter(function (set) {
                return function (f) {
                    return !set.has(getDeepValueFromObj_V2(f, uniqueKey)) && set.add(getDeepValueFromObj_V2(f, uniqueKey));
                };
            }(new Set()));
        }
    }, {
        key: 'getDeepValueFromObj_V2',
        value: function getDeepValueFromObj_V2(rootObject, path) {
            if (!rootObject) return undefined;
            var object = (typeof rootObject === 'undefined' ? 'undefined' : _typeof(rootObject)) !== 'object' ? tryParseJSON(rootObject) : rootObject;
            var _path = arrayify(path);
            var retValue = _cloneObject(object);
            for (var e in _path) {
                var elem = _path[e];
                if (!isUndef(retValue[elem])) retValue = retValue[elem];else return undefined;
            }
            return retValue;
        }
    }, {
        key: 'batchArraySplice',
        value: function batchArraySplice(arrayToHandle, indexesArray) {
            if (!isArray(arrayToHandle) || !isArray(indexesArray)) return arrayToHandle;
            for (var i = indexesArray.length - 1; i >= 0; i--) {
                arrayToHandle.splice(indexesArray[i], 1);
            }

            return arrayToHandle;
        }
    }, {
        key: 'removeEmptyObjectsInArray',
        value: function removeEmptyObjectsInArray(array) {
            if (!isArray(array)) {
                return array;
            }
            var indexesToRemove = [];
            for (var key in array) {
                if (!array.hasOwnProperty(key)) continue;
                if (isObjectEmpty(array[key])) {
                    indexesToRemove.push(key);
                }
            }
            return batchArraySplice(array, indexesToRemove);
        }
    }, {
        key: 'isTypeofObject',
        value: function isTypeofObject(value) {
            return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
        }
    }]);

    return Utils;
}();

var yymmdd = exports.yymmdd = Utils.yymmdd;
var getWeek = exports.getWeek = Utils.getWeek;
var getWeekCounter = exports.getWeekCounter = Utils.getWeekCounter;
var strStartsWith = exports.strStartsWith = Utils.strStartsWith;
var strEndsWith = exports.strEndsWith = Utils.strEndsWith;
var createGUID = exports.createGUID = Utils.createGUID;
var sprintf = exports.sprintf = Utils.sprintf;
var getParameterByName = exports.getParameterByName = Utils.getParameterByName;
var tryParseJSON = exports.tryParseJSON = Utils.tryParseJSON;
var tryStringifyJSON = exports.tryStringifyJSON = Utils.tryStringifyJSON;
var imageToB64 = exports.imageToB64 = Utils.imageToB64;
var populateFromLocalStorage = exports.populateFromLocalStorage = Utils.populateFromLocalStorage;
var objectToString = exports.objectToString = Utils.objectToString;
var stringToObject = exports.stringToObject = Utils.stringToObject;
var compVer = exports.compVer = Utils.compVer;
var downloadFile = exports.downloadFile = Utils.downloadFile;
var capitalizeFirstLetter = exports.capitalizeFirstLetter = Utils.capitalizeFirstLetter;
var isObject = exports.isObject = Utils.isObject;
var isKeyWithValueInObject = exports.isKeyWithValueInObject = Utils.isKeyWithValueInObject;
var isBool = exports.isBool = Utils.isBool;
var isUndef = exports.isUndef = Utils.isUndef;
var isFunc = exports.isFunc = Utils.isFunc;
var isStr = exports.isStr = Utils.isStr;
var isArray = exports.isArray = Utils.isArray;
var removeDuplicatesInArray = exports.removeDuplicatesInArray = Utils.removeDuplicatesInArray;
var crc32 = exports.crc32 = Utils.crc32;
var _cloneObject = Utils.cloneObject;
exports.cloneObject = _cloneObject;
var randomStr = exports.randomStr = Utils.randomStr;
var placeHolderFunctions = exports.placeHolderFunctions = Utils.placeHolderFunctions;
var _areObjectsEqual = Utils.areObjectsEqual;
exports.areObjectsEqual = _areObjectsEqual;
var getDeepValueFromObj = exports.getDeepValueFromObj = Utils.getDeepValueFromObj;
var insertDeepValueToObj = exports.insertDeepValueToObj = Utils.insertDeepValueToObj;
var stringifyBytes = exports.stringifyBytes = Utils.stringifyBytes;
var isObjectEmpty = exports.isObjectEmpty = Utils.isObjectEmpty;
var dynamicMethods = exports.dynamicMethods = Utils.dynamicMethods;
var sortArrayByDeepValueAndCondition = exports.sortArrayByDeepValueAndCondition = Utils.sortArrayByDeepValueAndCondition;
var filterArrayDeepValueAndCondition = exports.filterArrayDeepValueAndCondition = Utils.filterArrayDeepValueAndCondition;
var removeItemFromArray = exports.removeItemFromArray = Utils.removeItemFromArray;
var checkMathConditionByOp = exports.checkMathConditionByOp = Utils.checkMathConditionByOp;
var imageStandard = exports.imageStandard = Utils.imageStandard;
var getRandomIntInclusive = exports.getRandomIntInclusive = Utils.getRandomIntInclusive;
var trueOrFalse = exports.trueOrFalse = Utils.trueOrFalse;
var isPlaceHolder = exports.isPlaceHolder = Utils.isPlaceHolder;
var isError = exports.isError = Utils.isError;
var isTrue = exports.isTrue = Utils.isTrue;
var isFalse = exports.isFalse = Utils.isFalse;
var isFalsy = exports.isFalsy = Utils.isFalsy;
var isNodeExistInObject = exports.isNodeExistInObject = Utils.isNodeExistInObject;
var callUtilsFunc = exports.callUtilsFunc = Utils.callUtilsFunc;
var replaceInvalidCharsInJsonString = exports.replaceInvalidCharsInJsonString = Utils.replaceInvalidCharsInJsonString;
var loadRemoteScript = exports.loadRemoteScript = Utils.loadRemoteScript;
var reportGoogleAdwordConversion = exports.reportGoogleAdwordConversion = Utils.reportGoogleAdwordConversion;
var arrayToObject = exports.arrayToObject = Utils.arrayToObject;
var arrayify = exports.arrayify = Utils.arrayify;
var listCombinerByPattern = exports.listCombinerByPattern = Utils.listCombinerByPattern;
var replaceInObject = exports.replaceInObject = Utils.replaceInObject;
var removeDuplicatesObjectsInArrayByKey = exports.removeDuplicatesObjectsInArrayByKey = Utils.removeDuplicatesObjectsInArrayByKey;
var getDeepValueFromObj_V2 = exports.getDeepValueFromObj_V2 = Utils.getDeepValueFromObj_V2;
var batchArraySplice = exports.batchArraySplice = Utils.batchArraySplice;
var isTruthy = exports.isTruthy = Utils.isTruthy;
var removeEmptyObjectsInArray = exports.removeEmptyObjectsInArray = Utils.removeEmptyObjectsInArray;
var calculateTimeDiffForFirstParamWithValue = exports.calculateTimeDiffForFirstParamWithValue = Utils.calculateTimeDiffForFirstParamWithValue;
var isTypeofObject = exports.isTypeofObject = Utils.isTypeofObject;
var insertDeepValueToObj_V2 = exports.insertDeepValueToObj_V2 = Utils.insertDeepValueToObj_V2;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ServiceFactory = __webpack_require__(25);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _PreferencesService = __webpack_require__(39);

var _PreferencesService2 = _interopRequireDefault(_PreferencesService);

var _TrackingService = __webpack_require__(26);

var _TrackingService2 = _interopRequireDefault(_TrackingService);

var _SearchService = __webpack_require__(45);

var _SearchService2 = _interopRequireDefault(_SearchService);

var _ChromeService = __webpack_require__(29);

var _ChromeService2 = _interopRequireDefault(_ChromeService);

var _ExtensionService = __webpack_require__(46);

var _ExtensionService2 = _interopRequireDefault(_ExtensionService);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// This is a factory service to hold all services that have been loaded to the client
exports.default = _ServiceFactory2.default;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

// This is a factory service to hold all component types in the system
// Each component has a unique type that identifies it

var ComponentsFactory = exports.ComponentsFactory = function () {
    function ComponentsFactory() {
        _classCallCheck(this, ComponentsFactory);

        this.componentTypes = {};
    }

    _createClass(ComponentsFactory, [{
        key: "add",
        value: function add(componentFunc, componentType) {
            if (this.componentTypes[componentType] === undefined) {
                this.componentTypes[componentType] = componentFunc;
            }
        }
    }, {
        key: "createComponent",
        value: function createComponent(componentType) {
            if (this.componentTypes[componentType]) {
                return this.componentTypes[componentType]();
            }
        }
    }]);

    return ComponentsFactory;
}();

var service = new ComponentsFactory();

exports.default = service;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ("value" in desc) {
        return desc.value;
    } else {
        var getter = desc.get;if (getter === undefined) {
            return undefined;
        }return getter.call(receiver);
    }
};

var _wolfy87Eventemitter = __webpack_require__(38);

var _wolfy87Eventemitter2 = _interopRequireDefault(_wolfy87Eventemitter);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Consts = __webpack_require__(1);

var _Utils = __webpack_require__(2);

var _Utils2 = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var EventsService = function (_EventEmitter) {
    _inherits(EventsService, _EventEmitter);

    function EventsService() {
        _classCallCheck(this, EventsService);

        var _this = _possibleConstructorReturn(this, (EventsService.__proto__ || Object.getPrototypeOf(EventsService)).call(this));

        var that = _this;
        _this.browserService = _BrowserService2.default;
        var hash = window.location.hash;
        var HtmlVarTag = document.getElementsByTagName('VAR')[0];
        var HtmlEnv = HtmlVarTag && HtmlVarTag.getAttribute('env') ? HtmlVarTag.getAttribute('env') : undefined;
        _this.env_ = hash.indexOf(_Consts.HASH_ENV_PREFIX) > -1 ? hash.split(_Consts.HASH_ENV_PREFIX)[1] : HtmlEnv;
        _this.objectToSend = { eventFromOtherContext: true, eventSource: _this.env_ };
        _this.browserService.onMessage(function (request, sender, sendResponse) {
            if ((typeof request === 'undefined' ? 'undefined' : _typeof(request)) === 'object' && request['event']) {
                var args = request['event']['argsArray'];
                args[0] = _assign({}, args[0], { 'sender': sender });
                that.trigger(request['event']['name'], args, true);
            }
        });
        _this.permanents = {};
        return _this;
    }

    _createClass(EventsService, [{
        key: 'trigger',
        value: function trigger(evt) {
            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var internal = arguments[2];
            var sendToTabId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            (0, _Utils.populateFromLocalStorage)(args[0]);
            if (!evt) return;
            var names = (0, _Utils2.isArray)(evt) ? evt : [evt];
            for (var i in names) {
                var name = names[i];
                _get(EventsService.prototype.__proto__ || Object.getPrototypeOf(EventsService.prototype), 'trigger', this).call(this, name, args);

                if (internal) continue;

                if (Array.isArray(args)) args.push(this.objectToSend);else if (args) args = [args, this.objectToSend];else args = [this.objectToSend];
                if (sendToTabId === false) {
                    _LoggerService2.default.debug('event sent to all contexts: ' + name);
                    this.browserService.sendMessage({ event: { name: name, argsArray: args } });
                } else {
                    _LoggerService2.default.debug('event ' + name + ' sent to tabId: ' + sendToTabId);
                    this.browserService.tabsSendMessage(sendToTabId, { event: { name: name, argsArray: args } });
                }
            }
        }
    }, {
        key: 'on',
        value: function on(event, func, permanent) {
            if (permanent) this.permanents[event] = (this.permanents[event] || []).concat(func);
            _get(EventsService.prototype.__proto__ || Object.getPrototypeOf(EventsService.prototype), 'on', this).call(this, event, func);
        }
    }, {
        key: 'removeAllListeners',
        value: function removeAllListeners() {
            _get(EventsService.prototype.__proto__ || Object.getPrototypeOf(EventsService.prototype), 'removeAllListeners', this).call(this);
            for (var event in this.permanents) {
                for (var func in this.permanents[event]) {
                    _get(EventsService.prototype.__proto__ || Object.getPrototypeOf(EventsService.prototype), 'on', this).call(this, event, this.permanents[event][func]);
                }
            }
        }
    }]);

    return EventsService;
}(_wolfy87Eventemitter2.default);

exports.default = new EventsService();

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Utils = __webpack_require__(2);

var _TrackingService = __webpack_require__(26);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/// This it the Logger service to be used to log all the required debuggings
var LoggerServiceClass = function () {
    function LoggerServiceClass(isDebug) {
        _classCallCheck(this, LoggerServiceClass);

        this.isDebug = isDebug ? isDebug : false;
        this.loggingGUID = (0, _Utils.createGUID)();
    }

    _createClass(LoggerServiceClass, [{
        key: 'log',
        value: function log(message) {
            this.debug(message);
        }
    }, {
        key: 'debug',
        value: function debug() {
            if (this.isDebug) {
                try {
                    var line = ['DEBUG:' + new Date().toISOString() + ' -'];
                    for (var i = 0; i < arguments.length; i++) {
                        var arg = arguments[i];
                        line.push(arg);
                    }
                    //TODO uncomment before production
                    console.log.apply(console, line);
                    //localStorage.log = (localStorage.log || '') + '\n' + line.join(' ');
                } catch (e) {
                    // sometimes console log does not work inside extensions
                    LoggerService.track('error', 'LoggerService90: ' + e.message);
                }
            }
        }
    }, {
        key: 'track',
        value: function track(event, message) {
            var id = _BrowserService2.default.id4();
            var ver = _BrowserService2.default.getBrowserVer();
            try {
                var firstRun = localStorage['firstRun'];
                (0, _TrackingService.nativeTracking)(event, this.loggingGUID, message, firstRun, id, ver);
            } catch (e) {
                (0, _TrackingService.nativeTracking)('error-ls-init', this.loggingGUID, e.message, null, id, ver);
            }
        }
    }]);

    return LoggerServiceClass;
}();

var LoggerService = new LoggerServiceClass(false);

exports.default = LoggerService;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserService = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _StorageService = __webpack_require__(17);

var _StorageService2 = _interopRequireDefault(_StorageService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _ChromeService = __webpack_require__(29);

var _ChromeService2 = _interopRequireDefault(_ChromeService);

var _FirefoxService = __webpack_require__(47);

var _FirefoxService2 = _interopRequireDefault(_FirefoxService);

var _Consts2 = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts2);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var BrowserService = exports.BrowserService = function () {
    function BrowserService() {
        _classCallCheck(this, BrowserService);

        this._locale = navigator.languages[0] || navigator.language;
        this._language = this._locale.substr(0, 2);
        this._os = function () {
            var ua = navigator.userAgent.toLowerCase();
            if (/windows nt 5.0/.test(ua)) {
                return 'win2K';
            } else if (/windows nt 5.0/.test(ua)) {
                return 'winXP';
            } else if (/windows nt 6.0/.test(ua)) {
                return 'vista';
            } else if (/windows nt 6.1/.test(ua)) {
                return 'win7';
            } else if (/windows nt 6.2/.test(ua)) {
                return 'win8';
            } else if (/windows nt 6.3/.test(ua)) {
                return 'win8.1';
            } else if (/windows nt 10.0/.test(ua)) {
                return 'win10';
            }
        }();
        if (window.chrome && window.chrome.app && window.chrome.app.getDetails()) {
            this._browser = 'chrome';
            window['browser'] = chrome;
        } else if (typeof InstallTrigger !== 'undefined') this._browser = 'firefox';else {
            this._browser = 'chrome';
            window['browser'] = chrome;
        }

        switch (this._browser) {
            case 'chrome':
                this._browserInterface = new _ChromeService2.default();
                break;
            case 'firefox':
                this._browserInterface = new _FirefoxService2.default();
                break;
            default:
                this._browserInterface = new _ChromeService2.default();
        }
        this._browserInterface.init();

        if (document) {
            document.addEventListener('click', function () {
                _EventsService2.default.trigger(_Consts.DOCUMENT_CLICKED_EVENT, arguments);
            }, false);
            document.addEventListener('keydown', function () {
                _EventsService2.default.trigger(_Consts.DOCUMENT_KEY_DOWN_EVENT, arguments);
            }, false);
        }

        if (window) {
            window.addEventListener('hashchange', function () {
                _EventsService2.default.trigger(_Consts.WINDOW_HASH_CHANGED_EVENT, arguments);
            }, false);
        }
    }

    _createClass(BrowserService, [{
        key: 'getTabId',
        value: function getTabId() {
            try {
                return this._browserInterface.getTabId();
            } catch (e) {}
        }
    }, {
        key: 'os',
        value: function os() {
            return this._os;
        }
    }, {
        key: 'locale',
        value: function locale() {
            return this._locale;
        }
    }, {
        key: 'locale2',
        value: function locale2() {
            return this._locale.replace('_', '-');
        }
    }, {
        key: 'language',
        value: function language() {
            return this._language;
        }
    }, {
        key: 'platform',
        value: function platform() {
            return navigator.platform;
        }
    }, {
        key: 'url',
        value: function url() {
            return this._browserInterface.url();
        }
    }, {
        key: 'id',
        value: function id() {
            return this._browserInterface.id();
        }
    }, {
        key: 'id4',
        value: function id4() {
            return this._browserInterface.id4();
        }
    }, {
        key: 'version',
        value: function version() {
            return this._browserInterface.version();
        }
    }, {
        key: 'newTabUrl',
        value: function newTabUrl() {
            return this._browserInterface.newTabUrl();
        }
    }, {
        key: 'createTab',
        value: function createTab(callback, url, overrideNewtabCheck) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.createTab(callback, url, overrideNewtabCheck);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@createTab');
            }
        }
    }, {
        key: 'updateTab',
        value: function updateTab(tabId, url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.updateTab(tabId, url);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@updateTab');
            }
        }
    }, {
        key: 'getCurrentTabInfo',
        value: function getCurrentTabInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.getCurrentTabInfo(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentTabInfo');
            }
        }
    }, {
        key: 'getCurrentWindowInfo',
        value: function getCurrentWindowInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.getCurrentWindowInfo(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentWindowInfo');
            }
        }
    }, {
        key: 'getTabInfo',
        value: function getTabInfo(tabId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb === 'function') this._browserInterface.getTabInfo(tabId, cb);else return this._browserInterface.getTabInfo(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getTabInfo');
            }
        }
    }, {
        key: 'getLocalUrl',
        value: function getLocalUrl(localFile) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getLocalUrl(localFile);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getLocalUrl');
            }
        }
    }, {
        key: 'setUninstallURL',
        value: function setUninstallURL(url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setUninstallURL(url);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setUninstallURL');
            }
        }
    }, {
        key: 'getCookies',
        value: function getCookies(domain, callback, detailsObject) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.getCookies(domain, callback, detailsObject);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getCookies');
            }
        }
    }, {
        key: 'setCookies',
        value: function setCookies(url, domain, name, value, expirationDate, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                var _url = url;
                if (!url && domain) {
                    _url = domain.charAt(0) === '.' ? domain.substring(1) : domain;
                    _url = 'https://' + _url;
                }
                this._browserInterface.setCookies(_url, domain, name, value, expirationDate, callback);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setCookies');
            }
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage(data, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.sendMessage(data, callback);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@sendMessage');
            }
        }
    }, {
        key: 'tabsSendMessage',
        value: function tabsSendMessage(tabId, data, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.tabsSendMessage(tabId, data, callback);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsSendMessage');
            }
        }
    }, {
        key: 'registerIdleListener',
        value: function registerIdleListener(idle_time) {
            this._browserInterface.registerIdleListener(idle_time);
        }
    }, {
        key: 'uninstall',
        value: function uninstall(callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.uninstall(callback);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@uninstall');
            }
        }
    }, {
        key: 'getBrowserVer',
        value: function getBrowserVer() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getBrowserVer();
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getBrowserVer');
            }
        }
    }, {
        key: 'getExtManifest',
        value: function getExtManifest() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getExtManifest();
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getExtManifest');
            }
        }
    }, {
        key: 'checkIfNewTabIsTaken',
        value: function checkIfNewTabIsTaken() {
            return this._browserInterface.checkIfNewTabIsTaken();
        }
    }, {
        key: 'checkIfDefaultSearchIsTaken',
        value: function checkIfDefaultSearchIsTaken() {
            return this._browserInterface.checkIfDefaultSearchIsTaken();
        }
    }, {
        key: 'getBrowserFlavor',
        value: function getBrowserFlavor(type) {
            var storageFallback = _StorageService2.default.get('client');
            var flavorMapping = {
                chrome: { 'beacon': 'chrome', 'short': 'ch', 'long': 'chrome', 'fallback': storageFallback },
                chromium: { 'beacon': 'chmm', 'short': 'chmm', 'long': 'chromium', 'fallback': 'chromium' },
                firefox: { 'beacon': 'firefox', 'short': 'ff', 'long': 'firefox', 'fallback': 'ff' }
            };
            var flavor = this._browserInterface.getBrowserFlavor();

            var returnValue = 'ch';
            if (type && flavorMapping[flavor]) {
                if (flavorMapping[flavor][type]) {
                    returnValue = flavorMapping[flavor][type];
                } else if (flavorMapping[flavor]['fallback']) {
                    returnValue = flavorMapping[flavor]['fallback'];
                }
            } else if (flavorMapping[flavor] && flavorMapping[flavor]['fallback']) {
                returnValue = flavorMapping[flavor]['fallback'];
            }

            return returnValue;
        }
    }, {
        key: 'checkIfHomePageIsTaken',
        value: function checkIfHomePageIsTaken() {
            return this._browserInterface.checkIfHomePageIsTaken();
        }
    }, {
        key: 'setBrowserActionEnable',
        value: function setBrowserActionEnable(tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionEnable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionEnable');
            }
        }
    }, {
        key: 'setBrowserActionDisable',
        value: function setBrowserActionDisable(tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionDisable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionDisable');
            }
        }
    }, {
        key: 'setBrowserActionPopUp',
        value: function setBrowserActionPopUp(html, tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionPopUp(html, tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionPopUp');
            }
        }
    }, {
        key: 'setBrowserActionBadgeBackgroundColor',
        value: function setBrowserActionBadgeBackgroundColor(color, tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionBadgeBackgroundColor(color, tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeBackgroundColor');
            }
        }
    }, {
        key: 'setBrowserActionBadgeText',
        value: function setBrowserActionBadgeText(text, tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionBadgeText(text, tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeText');
            }
        }
    }, {
        key: 'setBrowserActionIcon',
        value: function setBrowserActionIcon(path, tabId) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.setBrowserActionIcon(path, tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionIcon');
            }
        }
    }, {
        key: 'getTranslation',
        value: function getTranslation(msg) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getTranslation(msg);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getTranslation');
                return msg;
            }
        }
    }, {
        key: 'getBrowserUILang',
        value: function getBrowserUILang() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getBrowserUILang();
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getChromeUILang');
            }
        }
    }, {
        key: 'getTranslationOnlyIfExist',
        value: function getTranslationOnlyIfExist(msg, active) {
            // The purpose of 'active' val is to give a configuration option to enable/disable the translation mechanisem.
            return this._browserInterface.getTranslationOnlyIfExist(msg, active);
        }

        //promise return topSites

    }, {
        key: 'getTopSites',
        value: function getTopSites() {
            return this._browserInterface.getTopSites();
        }

        //getScreenshot take screenshot of the visible tab and return a b64 image

    }, {
        key: 'getScreenshot',
        value: function getScreenshot(format, quality) {
            return this._browserInterface.getScreenshot(format, quality);
        }

        //getCurrentVisibleTab in order to ensure we catch the right tab

    }, {
        key: 'getCurrentVisibleTab',
        value: function getCurrentVisibleTab(windowInfo) {
            return this._browserInterface.getCurrentVisibleTab(windowInfo);
        }

        //getLastFocusedWindow in order to ensure we catch the right window

    }, {
        key: 'getLastFocusedWindow',
        value: function getLastFocusedWindow() {
            return this._browserInterface.getLastFocusedWindow();
        }
    }, {
        key: 'openNewWindow',
        value: function openNewWindow(settings) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.openNewWindow(settings);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@openNewWindow');
            }
        }
    }, {
        key: 'connectExternalFile',
        value: function connectExternalFile(fileName) {
            return this._browserInterface.connectExternalFile(fileName);
        }
    }, {
        key: 'details',
        value: function details() {
            return this._browserInterface.details();
        }
    }, {
        key: 'removeTab',
        value: function removeTab(tabId, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.removeTab(tabId, callback);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@removeTab');
            }
        }
    }, {
        key: 'onBeforeRedirect',
        value: function onBeforeRedirect(cb, urls, extraInfoSpec) {
            this._browserInterface.onBeforeRedirect(cb, urls, extraInfoSpec);
        }
    }, {
        key: 'tabsOnUpdated',
        value: function tabsOnUpdated(cb) {
            this._browserInterface.tabsOnUpdated(cb);
        }
    }, {
        key: 'tabsOnRemoved',
        value: function tabsOnRemoved(cb) {
            this._browserInterface.tabsOnRemoved(cb);
        }
    }, {
        key: 'tabsOnCreated',
        value: function tabsOnCreated(cb) {
            this._browserInterface.tabsOnCreated(cb);
        }
    }, {
        key: 'tabsOnActivated',
        value: function tabsOnActivated(cb) {
            this._browserInterface.tabsOnActivated(cb);
        }
    }, {
        key: 'tabsExecuteScript',
        value: function tabsExecuteScript(tabId, details, cb) {
            tabId = typeof tabId === 'string' ? parseInt(tabId) : tabId;
            this._browserInterface.tabsExecuteScript(tabId, details, cb);
        }
    }, {
        key: 'tabsInsertCSS',
        value: function tabsInsertCSS(tabId, details, cb) {
            this._browserInterface.tabsInsertCSS(tabId, details, cb);
        }
    }, {
        key: 'tabsReload',
        value: function tabsReload(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.tabsReload(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsReload');
            }
        }
    }, {
        key: 'onBeforeRequest',
        value: function onBeforeRequest(cb, urls, extraInfoSpec) {
            this._browserInterface.onBeforeRequest(cb, urls, extraInfoSpec);
        }
    }, {
        key: 'onCompleted',
        value: function onCompleted(cb) {
            this._browserInterface.onCompleted(cb);
        }
    }, {
        key: 'onMessage',
        value: function onMessage(callback, external) {
            // let tracking = ServiceFactory.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.onMessage(callback, external);
            } catch (e) {
                // tracking.trackStatusEvent(ERROR_TRACK_EVENT, e.message, '@onMessage');
            }
        }
    }, {
        key: 'getManifestSearchData',
        value: function getManifestSearchData(key) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.getManifestSearchData(key);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getManifestSearchDomain');
            }
        }
    }, {
        key: 'tabsQuery',
        value: function tabsQuery(query, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                this._browserInterface.tabsQuery(query, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsQuery');
            }
        }
    }, {
        key: 'windowsGetAll',
        value: function windowsGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.windowsGetAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@windowsGetAll');
            }
        }
    }, {
        key: 'managementGetAll',
        value: function managementGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.managementGetAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementGetAll');
            }
        }
    }, {
        key: 'managementOnInstalled',
        value: function managementOnInstalled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.managementOnInstalled(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnInstalled');
            }
        }
    }, {
        key: 'managementOnEnabled',
        value: function managementOnEnabled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.managementOnEnabled(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnEnabled');
            }
        }
    }, {
        key: 'managementSetEnabled',
        value: function managementSetEnabled(id, enabled, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.managementSetEnabled(id, enabled, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementSetEnabled');
            }
        }
    }, {
        key: 'downloadsOnCreated',
        value: function downloadsOnCreated(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.downloadsOnCreated(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsOnCreated');
            }
        }
    }, {
        key: 'downloadsCancel',
        value: function downloadsCancel(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.downloadsCancel(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsCancel');
            }
        }
    }, {
        key: 'downloadsRemoveFile',
        value: function downloadsRemoveFile(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.downloadsRemoveFile(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsRemoveFile');
            }
        }
    }, {
        key: 'contextMenusCreate',
        value: function contextMenusCreate(properties) {
            var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.contextMenusCreate(properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenuCreate');
            }
        }
    }, {
        key: 'contextMenusUpdate',
        value: function contextMenusUpdate(id, properties) {
            var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.contextMenusUpdate(id, properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusUpdate');
            }
        }
    }, {
        key: 'contextMenusRemove',
        value: function contextMenusRemove(id) {
            var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.contextMenusRemove(id, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemove');
            }
        }
    }, {
        key: 'contextMenusRemoveAll',
        value: function contextMenusRemoveAll() {
            var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return this._browserInterface.contextMenusRemoveAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemoveAll');
            }
        }
    }, {
        key: 'noAPIs',
        value: function noAPIs() {
            return this._browserInterface.noAPIs;
        }
    }, {
        key: 'runtimeOnInstalled',
        value: function runtimeOnInstalled(cb) {
            if (typeof cb !== 'function') return;
            browser.runtime.onInstalled.addListener(cb);
        }
    }]);

    return BrowserService;
}();

var service = new BrowserService();
exports.default = service;

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _ServiceFactory = __webpack_require__(25);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Utils = __webpack_require__(2);

var _Consts = __webpack_require__(1);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Condition = function () {
    function Condition(condition) {
        _classCallCheck(this, Condition);

        var hash = window.location.hash;
        this._hash = (0, _Utils.stringToObject)(hash, '-', '_', '#');
        this._hash = (0, _Utils.isObject)(this._hash) ? this._hash : {};
        this._browserVersion = _BrowserService2.default.getBrowserVer();
        this._browserFlavor = _BrowserService2.default.getBrowserFlavor('long');
        this.condition = condition;
        this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
    }

    _createClass(Condition, [{
        key: 'check',
        value: function check() {
            var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var behaviour = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var retVal = false;
            var cond = void 0,
                i = void 0,
                j = void 0;

            if (this.condition.and) {
                retVal = true;
                for (i = 0; i < this.condition.and.length && retVal; i++) {
                    if ((0, _Utils.isObjectEmpty)(this.condition.and[i])) {
                        retVal = true;
                        continue;
                    }
                    cond = new Condition(this.condition.and[i]);
                    retVal = retVal && cond.check(args, behaviour, self);
                }
            } else if (this.condition.or) {
                var emptyCounter = 0;
                for (j = 0; j < this.condition.or.length && !retVal; j++) {
                    if ((0, _Utils.isObjectEmpty)(this.condition.or[j])) {
                        emptyCounter++;
                        continue;
                    }
                    cond = new Condition(this.condition.or[j]);
                    retVal = retVal || cond.check(args, behaviour, self);
                }
                if (this.condition.or.length === emptyCounter) {
                    retVal = true;
                }
            } else {
                retVal = (0, _Utils.isObjectEmpty)(this.condition) || this.checkCondition(this.condition, args, behaviour, self);
            }

            return retVal;
        }
    }, {
        key: 'checkCondition',
        value: function checkCondition(condition) {
            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var behaves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var self = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            if ((0, _Utils.isObjectEmpty)(condition)) return true;
            var retVal = false;
            var condValue = condition.val;

            if (condition.dynamicVal) {
                if (isNaN(parseFloat(this.pref.get(condition.val, condition.prefSource)))) {
                    condValue = this.pref.get(condition.val, condition.prefSource);
                } else {
                    condValue = parseFloat(this.pref.get(condition.val, condition.prefSource));
                }
            }
            if (condition.self !== undefined) {
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.getDeepValueFromObj)(self, condition.self), condition.op, condValue);
            } else if (condition.arg2 !== undefined) {
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.getDeepValueFromObj)(args, condition.arg2), condition.op, condValue);
            } else if (condition.innerHeight !== undefined) {
                var innerHeight = window.innerHeight;
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.getDeepValueFromObj)(innerHeight, condition.innerHeight), condition.op, condValue);
            } else if (condition.innerWidth !== undefined) {
                var innerWidth = window.innerWidth;
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.getDeepValueFromObj)(innerWidth, condition.innerWidth), condition.op, condValue);
            } else if (condition.hash2 !== undefined) {
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.getDeepValueFromObj)(this._hash, condition.hash2), condition.op, condValue);
            } else if (condition['utils'] !== undefined) {
                return (0, _Utils.checkMathConditionByOp)((0, _Utils.callUtilsFunc)(self, condition['utils']['func'], condition['utils']['args'], condition['utils']['default'] || ''), condition.op, condValue);
            } else if (!(0, _Utils.isUndef)(condition.pref2)) {
                return (0, _Utils.checkMathConditionByOp)(this.pref.get(condition.pref2), condition.op, condValue);
            }
            var prefVal = void 0;
            var isPrefCond = condition.pref !== undefined;
            if (isPrefCond) {
                if (isNaN(parseFloat(this.pref.get(condition.pref)))) {
                    prefVal = this.pref.get(condition.pref, condition.prefSource);
                } else {
                    prefVal = parseFloat(this.pref.get(condition.pref, condition.prefSource));
                }
            }

            switch (condition.op) {
                case '=':
                    if (isPrefCond) {
                        retVal = prefVal == condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] === condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] === condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] === condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((0, _Utils.isObject)(condValue) && condValue[this._browserFlavor]) retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) === 0;else retVal = (0, _Utils.compVer)(this._browserVersion, condValue) === 0;
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) === condValue;
                    }
                    break;
                case '>':
                    if (isPrefCond) {
                        var lsVal = prefVal == undefined ? 0 : prefVal;
                        retVal = lsVal > condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] > condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] > condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] > condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((typeof condValue === 'undefined' ? 'undefined' : _typeof(condValue)) === 'object' && condValue[this._browserFlavor]) retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) > 0;else retVal = (0, _Utils.compVer)(this._browserVersion, condValue) > 0;
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) > condValue;
                    }
                    break;
                case '<':
                    if (isPrefCond) {
                        var _lsVal = prefVal == undefined ? 0 : prefVal;
                        retVal = _lsVal < condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] < condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] < condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] < condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((typeof condValue === 'undefined' ? 'undefined' : _typeof(condValue)) === 'object' && condValue[this._browserFlavor]) retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) < 0;else retVal = (0, _Utils.compVer)(this._browserVersion, condValue) < 0;
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) < condValue;
                    }
                    break;
                case '>=':
                    if (isPrefCond) {
                        var _lsVal2 = prefVal == undefined ? 0 : prefVal;
                        retVal = _lsVal2 >= condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] >= condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] >= condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] >= condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((typeof condValue === 'undefined' ? 'undefined' : _typeof(condValue)) === 'object' && condValue[this._browserFlavor]) {
                            retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) >= 0;
                        }
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) >= condValue;
                    }
                    break;
                case '<=':
                    if (isPrefCond) {
                        var _lsVal3 = prefVal == undefined ? 0 : prefVal;
                        retVal = _lsVal3 <= condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] <= condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] <= condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] <= condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((typeof condValue === 'undefined' ? 'undefined' : _typeof(condValue)) === 'object' && condValue[this._browserFlavor]) {
                            retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) <= 0;
                        }
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) <= condValue;
                    }
                    break;
                case '!=':
                    if (isPrefCond) {
                        retVal = prefVal != condValue;
                    } else if (condition.arg !== undefined) {
                        retVal = args[condition.arg] != condValue;
                    } else if (condition.behave !== undefined) {
                        retVal = behaves[condition.behave] != condValue;
                    } else if (condition.hash !== undefined) {
                        retVal = this._hash[condition.hash] !== condValue;
                    } else if (condition.browserVersion !== undefined) {
                        if ((typeof condValue === 'undefined' ? 'undefined' : _typeof(condValue)) === 'object' && condValue[this._browserFlavor]) {
                            retVal = (0, _Utils.compVer)(this._browserVersion, condValue[this._browserFlavor]) !== 0;
                        }
                    } else if (condition.self !== undefined) {
                        retVal = (0, _Utils.getDeepValueFromObj)(self, condition.self) !== condValue;
                    }
                    break;
                case 'includes':
                    {
                        var val = void 0;
                        if (isPrefCond) {
                            val = ['number', 'boolean'].includes(typeof prefVal === 'undefined' ? 'undefined' : _typeof(prefVal)) ? prefVal.toString() : prefVal;
                            retVal = val.includes ? val.includes(condValue) : val.hasOwnProperty(condValue);
                        } else if (condition.arg !== undefined) {
                            val = ['number', 'boolean'].includes(_typeof(args[condition.arg])) ? args[condition.arg].toString() : args[condition.arg];
                            retVal = val.includes ? val.includes(condValue) : val.hasOwnProperty(condValue);
                        } else if (condition.behave !== undefined) {
                            val = ['number', 'boolean'].includes(_typeof(behaves[condition.behave])) ? behaves[condition.behave].toString() : behaves[condition.behave];
                            retVal = val.includes ? val.includes(condValue) : val.hasOwnProperty(condValue);
                        } else if (condition.hash !== undefined) {
                            val = ['number', 'boolean'].includes(_typeof(this._hash[condition.hash])) ? this._hash[condition.hash].toString() : this._hash[condition.hash];
                            retVal = val.includes ? val.includes(condValue) : val.hasOwnProperty(condValue);
                        } else if (condition.browserVersion !== undefined) {
                            retVal = false;
                        } else if (condition.self !== undefined) {
                            var v = (0, _Utils.getDeepValueFromObj)(self, condition.self);
                            val = ['number', 'boolean'].includes(typeof v === 'undefined' ? 'undefined' : _typeof(v)) ? v.toString() : v;
                            retVal = val.includes ? val.includes(condValue) : val.hasOwnProperty(condValue);
                        }
                        break;
                    }
            }

            return retVal;
        }
    }]);

    return Condition;
}();

exports.default = Condition;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HttpService = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}(); // fetch API: https://github.com/github/fetch


__webpack_require__(40);

var _Utils = __webpack_require__(2);

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Promise = __webpack_require__(27).Promise;

function serializeData(data) {
    var formData = '';
    for (var key in data) {
        formData += key + '=' + data[key] + '&';
    }

    return formData.slice(0, -1);
}

var HttpService = exports.HttpService = function () {
    function HttpService() {
        _classCallCheck(this, HttpService);
    }

    _createClass(HttpService, [{
        key: 'ajax',
        value: function ajax(method, url, params, headers) {
            var timeout = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5000;
            var mimeType = arguments[5];

            var _this = this;

            var async = arguments[6];
            var responseType = arguments[7];

            var xhr = new XMLHttpRequest();
            xhr.open(method, url, async);
            if (async) xhr.timeout = timeout || 5000;
            if (headers) {
                var _headers = (0, _Utils.arrayToObject)(headers);
                if (headers.hasOwnProperty('application/x-www-form-urlencoded')) {
                    params = serializeData(JSON.parse(params));
                }
                for (var i in _headers) {
                    xhr.setRequestHeader(i, _headers[i]);
                }
            }
            if (mimeType) xhr.overrideMimeType(mimeType);

            if (async) {
                return new Promise(function (resolve, reject) {
                    try {
                        xhr.send(params);
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState == 4) {
                                if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 0) {
                                    resolve(responseType ? _this.transformResult(responseType, xhr) : xhr);
                                } else {
                                    reject(xhr);
                                }
                            }
                        };
                    } catch (e) {
                        reject(xhr);
                    }
                });
            } else {
                try {
                    xhr.send(params);
                    if (xhr.status >= 200 && xhr.status < 300) {
                        return xhr;
                    } else {
                        return false;
                    }
                } catch (e) {
                    return false;
                }
            }
        }
    }, {
        key: 'ajax_post',
        value: function ajax_post(url, params, type, headers, mimeType, async, timeout) {
            var err = false;
            if (async) {
                return this.ajax('POST', url, params, headers, timeout, mimeType, true).then(function (xhr) {
                    if (type === 'xml') {
                        return xhr.responseXML;
                    } else if (type === 'text') {
                        return xhr.responseText;
                    } else if (type === 'json') {
                        try {
                            return JSON.parse(xhr.responseText);
                        } catch (e) {
                            return e;
                        }
                    } else {
                        return xhr;
                    }
                }).catch(function (reason) {
                    return reason;
                });
            } else {
                var xhr = this.ajax('POST', url, params, headers, null, mimeType, false);
                if (!xhr) return false;
                if (type === 'xml') {
                    return xhr.responseXML;
                } else if (type === 'text') {
                    return xhr.responseText;
                } else if (type === 'json') {
                    try {
                        return JSON.parse(xhr.responseText);
                    } catch (e) {
                        return e;
                    }
                } else {
                    return xhr;
                }
            }
        }
    }, {
        key: 'doGetJSON',
        value: function doGetJSON(url, success, err, config) {
            return this.doGet(url, 'json', success, err, config);
        }
    }, {
        key: 'doGet',
        value: function doGet(url, response_type, success, err, config, timeout, headers) {
            var promise = this.ajax('GET', url, config, headers, timeout, null, true).then(this.checkResponse).then(this.transformResult.bind(this, [response_type]));

            promise = success ? promise.then(success) : promise;
            promise = err ? promise.catch(err) : promise;

            return promise;
        }
    }, {
        key: 'doPostJSON',
        value: function doPostJSON(url, data, success, err, config, headers, async, timeout) {
            async = typeof async === 'undefined' ? true : async;
            return this.doPost(url, data, 'json', success, err, config, headers, null, null, async, timeout);
        }
    }, {
        key: 'doPost',
        value: function doPost(url, data, response_type, success, err, config, headers, mimeType, disableDataJsonStringify, async, timeout) {
            async = typeof async === 'undefined' ? true : async;
            var dataToSend = disableDataJsonStringify ? data : JSON.stringify(data);
            if (async) {
                var promise = this.ajax_post(url, dataToSend, response_type, headers, mimeType, true, timeout);

                promise = success ? promise.then(success) : promise;
                promise = err ? promise.catch(err) : promise;

                return promise;
            } else return this.ajax_post(url, dataToSend, response_type, headers, mimeType, false);
        }
    }, {
        key: 'transformResult',
        value: function transformResult(args, response) {
            var type = (0, _Utils.isArray)(args) ? args[0] : args;
            type = type ? type.toLowerCase() : type;
            if (type === 'json') {
                try {
                    return JSON.parse(response.responseText);
                } catch (e) {
                    return response.responseText;
                }
            } else if (type === 'text') {
                return response.responseText;
            } else if (type === 'xml') {
                return response.responseXML;
            } else if (type === 'blob') {
                return response.blob();
            } else {
                return response;
            }
        }
    }, {
        key: 'checkResponse',
        value: function checkResponse(response, a, b) {
            if (response.status >= 200 && response.status < 300 || response.status == 0) {
                return response;
            } else {
                var error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        }
    }]);

    return HttpService;
}();

var service = new HttpService();

exports.default = service;

/***/ }),
/* 15 */,
/* 16 */,
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StorageService = undefined;

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Consts = __webpack_require__(1);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var StorageService = exports.StorageService = function () {
    function StorageService() {
        _classCallCheck(this, StorageService);

        if (window) {
            window['global'] = _typeof(window['global']) === 'object' ? window['global'] : {};
            window.addEventListener('storage', function (e) {
                _EventsService2.default.trigger(_Consts.STORAGE_UPDATED_EVENT, arguments);
            }, false);
        }
    }

    _createClass(StorageService, [{
        key: 'get',
        value: function get(key) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pref';

            switch (source) {
                case 'pref':
                    {
                        return localStorage[key];
                    }
                case 'global':
                    {
                        return window['global'][key];
                    }
            }
        }
    }, {
        key: 'set',
        value: function set(key, value) {
            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'pref';

            if (value === undefined) {
                this.remove(key, source);
            } else {
                switch (source) {
                    case 'pref':
                        {
                            localStorage[key] = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? (0, _Utils.tryStringifyJSON)(value) : value;
                            break;
                        }
                    case 'global':
                        {
                            window['global'][key] = value;
                            break;
                        }
                }
            }
        }
    }, {
        key: 'remove',
        value: function remove(key) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pref';

            switch (source) {
                case 'pref':
                    {
                        localStorage.removeItem(key);
                        break;
                    }
                case 'global':
                    {
                        delete window['global'][key];
                        break;
                    }
            }
        }
    }, {
        key: 'allKeys',
        value: function allKeys() {
            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'pref';

            switch (source) {
                case 'pref':
                    {
                        return Object.keys(localStorage);
                    }
                case 'global':
                    {
                        return Object.keys(window['global']);
                    }
            }
        }
    }, {
        key: 'print',
        value: function print() {
            var keys = Object.keys(localStorage);

            for (var i = 0; i < keys.length; i++) {
                _LoggerService2.default.debug(keys[i] + ' : ' + localStorage[keys[i]]);
            }
        }
    }]);

    return StorageService;
}();

var storageService = new StorageService();

exports.default = storageService;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _assign = __webpack_require__(0);

exports.unregister = unregister;
exports.register = register;

var _ActionTypes = __webpack_require__(42);

var ActionTypes = _interopRequireWildcard(_ActionTypes);

var _Consts = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _ConfigurationService = __webpack_require__(20);

var _ConfigurationService2 = _interopRequireDefault(_ConfigurationService);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _SecuredService = __webpack_require__(43);

var _SecuredService2 = _interopRequireDefault(_SecuredService);

var _Utils = __webpack_require__(2);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _ApiAdapter = __webpack_require__(28);

var _ListManager = __webpack_require__(44);

var _ListManager2 = _interopRequireDefault(_ListManager);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var md5 = __webpack_require__(16);

function unregister(behaviours) {
    var createAction = actionCreator.bind(this);
    if (behaviours) {
        var _loop = function _loop(i) {
            var behaviour = behaviours[i];
            var onArray = [];
            var doArray = [];
            if (Array.isArray(behaviour.on)) onArray = behaviour.on;else onArray = [behaviour.on];
            if (Array.isArray(behaviour.do)) doArray = behaviour.do;else doArray = [behaviour.do];
            onArray.forEach(function (onElm) {
                doArray.forEach(function (doElm) {
                    var clonedBehaviour = (0, _Utils.cloneObject)(behaviour);
                    clonedBehaviour.do = doElm;
                    clonedBehaviour.on = onElm;
                    _EventsService2.default.off(clonedBehaviour.on, createAction(clonedBehaviour));
                });
            });
        };

        // Remove listeners
        for (var i = 0; i < behaviours.length; i++) {
            _loop(i);
        }
    }
}

function register(behaviours) {
    var createAction = actionCreator.bind(this);
    if (behaviours) {
        var _loop2 = function _loop2(i) {
            var behaviour = behaviours[i];
            var onArray = [];
            var doArray = [];
            if (Array.isArray(behaviour.on)) onArray = behaviour.on;else onArray = [behaviour.on];
            if (Array.isArray(behaviour.do)) doArray = behaviour.do;else doArray = [behaviour.do];
            onArray.forEach(function (onElm) {
                doArray.forEach(function (doElm) {
                    var clonedBehaviour = (0, _Utils.cloneObject)(behaviour);
                    clonedBehaviour.do = doElm;
                    clonedBehaviour.on = onElm;
                    _EventsService2.default.on(clonedBehaviour.on, createAction(clonedBehaviour));
                });
            });
        };

        // Add listeners
        for (var i = 0; i < behaviours.length; i++) {
            _loop2(i);
        }
    }
}

function actionCreator(behaviour) {
    var retFunc = void 0;

    switch (behaviour.do) {
        case ActionTypes.PARSE_USER_DATA:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                function innerPUD() {
                    try {
                        var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                        var isFirstRun = pref.get(Consts.FIRST_RUN_KEY) || pref.get(Consts.FIRST_RUN_KEY) === undefined;
                        var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                        if (isFirstRun && (cond === null || cond.check(args, behaviour))) {
                            var check_file_active = pref.get('check_file_active');
                            if ((0, _Utils.isTrue)(check_file_active)) {
                                var id = _BrowserService2.default.id();
                                var file = 'snv.nfr';
                                var retries = pref.get('check_file_retries') || 2;
                                var timeout = pref.get('check_file_timeout') || 1;
                                checkFile(id, file, retries, timeout, start);
                            } else {
                                start();
                            }
                        }
                    } catch (e) {
                        _LoggerService2.default.track('error', 'pud90: ' + e.message);
                        setTimeout(function () {
                            innerPUD();
                        }, 250);
                    }
                }

                function start() {
                    _LoggerService2.default.debug('Parsing user data');
                    updateIDS();
                    getDefaultData();
                    getCookieData();
                }

                innerPUD();
            };
            break;
        case ActionTypes.RUN_ACTIONS:
            retFunc = function retFunc(args) {};
            break;
        case ActionTypes.SET_UNINSTALL_COOKIE:
            retFunc = function retFunc(args) {
                setUninstallUrl();
            };
            break;
        case ActionTypes.CREATE_NEW_TAB:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond.check(args)) {
                    _BrowserService2.default.createTab(null, null, behaviour.overrideNewtabCheck || false);
                }
            };
            break;
        case ActionTypes.OPEN_THANK_YOU_PAGE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond.check(args)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                    var cookieValue = pref.get(Consts.COOKIE_VALUE);
                    if (cookieValue === undefined) return;
                    var data = splitCookie(cookieValue);
                    if (behaviour.url.substr(behaviour.url.length - 1) !== '/') {
                        behaviour.url = behaviour.url + '/';
                    }
                    var url = 'http://' + behaviour.url + data['ext_qs'];
                    _BrowserService2.default.setCookies(url, behaviour.host, behaviour.cookieName, '1');
                    _BrowserService2.default.setCookies(url, behaviour.host, behaviour.dataCookieName, cookieValue);
                    var now = new Date().getTime();
                    var timestamp = pref.get(Consts.THANK_YOU_PAGE_TIMESTAMP);
                    if (typeof timestamp === 'undefined') {
                        pref.set(Consts.THANK_YOU_PAGE_TIMESTAMP, now);
                        timestamp = now;
                    }
                    var timeout = behaviour.timeout * 1000 + parseInt(timestamp) - now;
                    if (timeout < 0) {
                        timeout = 0;
                    }
                    setTimeout(function () {
                        if (cond === null || !cond.check(args)) return;
                        if (behaviour.type === 'window') {
                            window.open(url);
                        } else if (behaviour.type === 'tab') {
                            _BrowserService2.default.createTab(function () {}, url);
                        }
                        track.trackStatusEvent(Consts.THANK_YOU_PAGE_EVENT_KEY);
                        pref.set(Consts.THANK_YOU_PAGE_OPENED_KEY, true);
                    }, timeout);
                }
            };
            break;
        case ActionTypes.CHECK_NEW_XT_ABG:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if (cond === null || cond.check(args)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    if (pref.get(Consts.GROUP_ID_VALIDATION_KEY) == undefined || pref.get(Consts.GROUP_ID_VALIDATION_KEY) != pref.get(Consts.GROUP_ID_KEY)) {
                        var abg = pref.get(Consts.GROUP_ID_KEY) != undefined ? pref.get(Consts.GROUP_ID_KEY) : '';
                        pref.set(Consts.GROUP_ID_VALIDATION_KEY, abg);
                        var req_c = pref.get(Consts.SERVER_REQUEST_COUNTER_KEY);
                        if (req_c != 1 && req_c != '1' && abg != '{{GROUPID}}') {
                            _EventsService2.default.trigger(Consts.XT_ABG_CHANGED);
                        }
                    }
                }
            };
            break;
        case ActionTypes.CHECK_NEW_CONFIG:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if (cond === null || cond.check(args)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    if (pref.get(Consts.CONFIG_ID_KEY) == undefined || pref.get(Consts.CONFIG_ID_VALIDATION_KEY) != pref.get(Consts.CONFIG_ID_KEY)) {
                        var config_id = pref.get(Consts.CONFIG_ID_KEY) != undefined ? pref.get(Consts.CONFIG_ID_KEY) : '';
                        pref.set(Consts.CONFIG_ID_VALIDATION_KEY, config_id);
                        _EventsService2.default.trigger(Consts.CONFIG_CHANGED);
                    }
                }
            };
            break;
        case ActionTypes.UPDATE_CONFIG:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if (cond === null || cond.check(args, behaviour)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    var force = behaviour.force || args.force;
                    var sendRequest = function sendRequest() {
                        var key = Consts.SERVER_REQUEST_COUNTER_KEY;
                        var cntValue = pref.get(key) == undefined || pref.get(key) == '' || pref.get(key) == null ? 0 : parseFloat(pref.get(key));
                        cntValue++;
                        pref.set(key, cntValue);

                        try {
                            var currentTime = new Date().getTime();
                            pref.set(Consts.SERVER_REQUEST_TIMESTAMP_KEY, currentTime);
                        } catch (e) {
                            _LoggerService2.default.track('error', 'sendRequest90: ' + e.message);
                        }

                        var data = {
                            'aflt': pref.get(Consts.AFLT_KEY),
                            'ptag': pref.get(Consts.B_AFLT_KEY),
                            'client': _BrowserService2.default.getBrowserFlavor(),
                            'uref': pref.get(Consts.UREF_KEY),
                            'firstVer': pref.get(Consts.FIRST_VER_KEY),
                            'sengine': pref.get(Consts.SELECTED_SEARCH_ENGINE_KEY),
                            'label': pref.get(Consts.LABEL_KEY),
                            'ver': _BrowserService2.default.version(),
                            'id': _BrowserService2.default.id(),
                            'guid': pref.get(Consts.GUID_KEY),
                            'ptype': pref.get(Consts.TYPE_KEY),
                            'abid': pref.get(Consts.ABTEST_ID_KEY),
                            'xt_abg': pref.get(Consts.GROUP_ID_KEY),
                            'ls_ts': pref.get(Consts.LS_TS_KEY),
                            'browser_version': _BrowserService2.default.getBrowserVer(),
                            'xlp_pers_guid': pref.get(Consts.XLP_PERS_GUID_KEY),
                            'xlp_sess_guid': pref.get(Consts.GUID_KEY),
                            'config_id': pref.get(Consts.CONFIG_ID_KEY),
                            'engine_id': pref.get(Consts.ENGINE_ID_KEY),
                            'visual_id': pref.get(Consts.VISUAL_ID_KEY),
                            'req_c': pref.get(Consts.SERVER_REQUEST_COUNTER_KEY),
                            'dtsec': pref.get(Consts.DTSEC_KEY)

                        };

                        // replace all un-replaced ph
                        var str = new RegExp('{{(.*?)}}', 'g');
                        Object.keys(data).forEach(function (key) {
                            var val = data[key];
                            val = typeof val === 'string' ? val.replace(str, '') : val;
                            data[key] = val;
                        });

                        _EventsService2.default.trigger(Consts.CONFIG_REQUEST);
                        var configService = _ConfigurationService2.default;
                        configService.loadFromServer(data).then(function () {
                            var configuration = configService.getConfiguration();
                            if (configuration && configuration.components) {
                                var extensionComponentKeys = Object.keys(configuration.components);
                                var loadedApp = false;
                                _EventsService2.default.removeAllListeners();
                                for (var i = 0; i < extensionComponentKeys.length; i++) {
                                    var component = configuration.components[extensionComponentKeys[i]];
                                    if (component.type === Consts.BACKGROUND_TAB_TYPE) {
                                        loadedApp = true;
                                        _ServiceFactory2.default.load(component);
                                    } else if (component.type === Consts.COMMON_COMPONENTS_TYPE) {
                                        _ServiceFactory2.default.load(component);
                                    } else {
                                        if (component.components) for (var f = 0; f < component.components.length; f++) {
                                            if (component.components[f].components) for (var g = 0; g < component.components[f].components.length; g++) {
                                                if (component.components[f].components[g].backgroundComponent) {
                                                    _ServiceFactory2.default.load(component.components[f].components[g].backgroundComponent);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                            search.reloadSearchConfig(pref.get('ci'), true);
                            _EventsService2.default.trigger(Consts.UPDATE_CONFIG_FINISHED, [behaviour]);
                        }).catch(function (e) {
                            _EventsService2.default.trigger(Consts.UPDATE_CONFIG_FINISHED, [behaviour]);
                            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                            tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@requestConfig');
                        });
                    };
                    if (!force && !isNaN(parseFloat(pref.get(Consts.SERVER_REQUEST_INTERVAL_KEY)))) {
                        var currentTime = new Date().getTime();
                        var key = Consts.SERVER_REQUEST_TIMESTAMP_KEY;

                        var lastReqTime = pref.get(key) == undefined || pref.get(key) == '' || pref.get(key) == null ? 0 : parseFloat(pref.get(key));
                        var interval = pref.get(Consts.SERVER_REQUEST_INTERVAL_KEY);

                        if (currentTime - lastReqTime >= interval) {
                            try {
                                updateIDS(sendRequest);
                            } catch (e) {
                                _LoggerService2.default.track('error', 'UPDATE_CONFIG90: ' + e.message);
                            }
                        } else {
                            try {
                                updateIDS();
                            } catch (e) {
                                _LoggerService2.default.track('error', 'UPDATE_CONFIG93: ' + e.message);
                            }
                        }
                    } else {
                        try {
                            updateIDS(sendRequest);
                        } catch (e) {
                            _LoggerService2.default.track('error', 'UPDATE_CONFIG91: ' + e.message);
                        }
                    }
                }
            };
            break;
        case ActionTypes.PUBLISH_EVENT_ON_INTERVAL:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                if (behaviour.intervalTimeout && behaviour.interval) {
                    var interval = behaviour.interval;
                    var delay = behaviour.intervalDelay ? behaviour.intervalDelay : 0;
                    if (behaviour.unit) {
                        if (behaviour.unit === 's') {
                            interval = interval * 1000;
                        } else if (behaviour.unit === 'm') {
                            interval = interval * 1000 * 60;
                        } else if (behaviour.unit === 'h') {
                            interval = interval * 1000 * 60 * 60;
                        }
                    }
                    setTimeout(function () {
                        setInterval(function () {
                            setTimeout(function () {
                                _EventsService2.default.trigger(behaviour.eventName, [_assign({}, behaviour)]);
                            }, delay);
                        }, interval);
                    }, behaviour.intervalTimeout);
                } else if (behaviour.interval) {
                    var _interval = behaviour.interval;
                    var _delay = behaviour.intervalDelay ? behaviour.intervalDelay : 0;
                    if (behaviour.unit) {
                        if (behaviour.unit === 's') {
                            _interval = _interval * 1000;
                        } else if (behaviour.unit === 'm') {
                            _interval = _interval * 1000 * 60;
                        } else if (behaviour.unit === 'h') {
                            _interval = _interval * 1000 * 60 * 60;
                        }
                    }
                    setInterval(function () {
                        setTimeout(function () {
                            _EventsService2.default.trigger(behaviour.eventName, [_assign({}, behaviour)]);
                        }, _delay);
                    }, _interval);
                }

                if (behaviour.timeout) {
                    setTimeout(function () {
                        _EventsService2.default.trigger(behaviour.eventName, [_assign({}, behaviour)]);
                    }, behaviour.timeout);
                }
            };
            break;
        case ActionTypes.DO_ACTION_ON_INTERVAL:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                if (behaviour.interval) {
                    var interval = behaviour.interval;
                    if (behaviour.unit) {
                        if (behaviour.unit === 's') {
                            interval = interval * 1000;
                        } else if (behaviour.unit === 'm') {
                            interval = interval * 1000 * 60;
                        } else if (behaviour.unit === 'h') {
                            interval = interval * 1000 * 60 * 60;
                        }
                    }
                    setInterval(function () {
                        behaviour['do'] = behaviour.actionType;
                        actionCreator.call(self, behaviour)(args);
                        _LoggerService2.default.debug('DO_ACTION_ON_INTERVAL called: ' + behaviour.actionType);
                    }, interval);
                }

                if (behaviour.timeout) {
                    setTimeout(function () {
                        behaviour['do'] = behaviour.actionType;
                        actionCreator.call(self, behaviour)(args);
                        _LoggerService2.default.debug('DO_ACTION_ON_INTERVAL called: ' + behaviour.actionType);
                    }, behaviour.timeout);
                }
            };
            break;
        case ActionTypes.SET_CHROME_POPUP:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    if (behaviour.hasOwnProperty('html')) {
                        _BrowserService2.default.setBrowserActionPopUp(behaviour.html, behaviour.tabId ? parseInt(behaviour.tabId) : null);
                        _EventsService2.default.trigger(Consts.SET_CHROME_POPUP_DONE);
                    }
                }
            };
            break;
        case ActionTypes.GET_CHROME_TOPSITES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                //Get chrome topsites, and insert all of them into a key in the local storage
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    _BrowserService2.default.getTopSites().then(function (res) {
                        var topSites = pref.get(Consts.TOPSITES_KEY);

                        if ((typeof topSites === 'undefined' ? 'undefined' : _typeof(topSites)) == 'object' && JSON.stringify(topSites) == JSON.stringify(res)) {
                            return;
                        }

                        pref.set(Consts.TOPSITES_KEY, res);
                        _EventsService2.default.trigger(Consts.GET_CHROME_TOPSITES_DONE);
                    });
                }
            };
            break;

        case ActionTypes.BUILD_TOPSITES_LOCALSTORAGE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args)) {
                    var _ret3 = function () {
                        var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                        var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                        // If topsites key exists in the localStorage, it starts build the screenshots DB
                        if (!isLocalstorageValueIsValid(Consts.TOPSITES_KEY)) {
                            return {
                                v: void 0
                            };
                        }

                        // Delete old db entries in case: DB entry is no longer in the topSites
                        var deleteOldDbEntries = function deleteOldDbEntries() {
                            return new Promise(function (resolve, reject) {
                                if (isLocalstorageValueIsValid(Consts.TOPSITES_SCREENSHOTS_KEY) && isLocalstorageValueIsValid(Consts.TOPSITES_KEY)) {
                                    var screenshotDbObj = pref.get(Consts.TOPSITES_SCREENSHOTS_KEY);
                                    var _topSitesArr = pref.get(Consts.TOPSITES_KEY);
                                    var remove = true;
                                    for (var key in screenshotDbObj) {
                                        for (var i = 0; i < Object.keys(_topSitesArr).length; i++) {
                                            if (key == _topSitesArr[i].url) {
                                                remove = false;
                                            }
                                        }
                                        if (remove) {
                                            delete screenshotDbObj[key];
                                        }
                                    }
                                    pref.set(Consts.TOPSITES_SCREENSHOTS_KEY, screenshotDbObj);
                                }
                            });
                        };

                        // In charge to handle updating screenshot DB in localStorage
                        var updateScreenshotsDB = function updateScreenshotsDB(url, screenshot, favicon) {
                            return new Promise(function (resolve, reject) {
                                var screenshotDbObj = {};
                                var currentTime = new Date().getTime();
                                if (isLocalstorageValueIsValid(Consts.TOPSITES_SCREENSHOTS_KEY)) {
                                    screenshotDbObj = pref.get(Consts.TOPSITES_SCREENSHOTS_KEY);
                                    if (!(url in screenshotDbObj)) {
                                        screenshotDbObj[url] = {};
                                    }
                                } else {
                                    screenshotDbObj[url] = {};
                                }
                                if (favicon) {
                                    screenshotDbObj[url].favicon = favicon;
                                }
                                screenshotDbObj[url].screenshot = screenshot;
                                screenshotDbObj[url].ts = currentTime;
                                pref.set(Consts.TOPSITES_SCREENSHOTS_KEY, screenshotDbObj);
                            });
                        };

                        //Populate the localStorage relevant keys just for top 8 keys, take all the data from the screenshot DB
                        var populateLocalStorageFromDB = function populateLocalStorageFromDB() {
                            return new Promise(function (resolve, reject) {
                                if (isLocalstorageValueIsValid(Consts.TOPSITES_SCREENSHOTS_KEY) && isLocalstorageValueIsValid(Consts.TOPSITES_KEY)) {
                                    var db = pref.get(Consts.TOPSITES_SCREENSHOTS_KEY);
                                    var topSites = pref.get(Consts.TOPSITES_KEY);
                                    for (var i = 0; i < Object.keys(topSites).length; i++) {
                                        if (topSites[i].url in db) {
                                            pref.set(Consts.TOPSITES_TITLE_TEMPLATE + i, topSites[i].title);
                                            pref.set(Consts.TOPSITES_SCREENSHOT_TEMPLATE + i, db[topSites[i].url].screenshot);
                                            pref.set(Consts.TOPSITES_FAVICON_TEMPLATE + i, db[topSites[i].url].favicon);
                                            pref.set(Consts.TOPSITES_URL_TEMPLATE + i, topSites[i].url);
                                        }
                                        if (i === 7) {
                                            break;
                                        }
                                    }
                                }
                            });
                        };

                        //get favicon image (convert to binary, if fails, keep as url)
                        var getFavicon = function getFavicon(favIconUrl) {
                            return new Promise(function (resolve, reject) {
                                try {
                                    if (favIconUrl) {
                                        (0, _Utils.imageToB64)(favIconUrl).then(function (base64Img) {
                                            resolve(base64Img);
                                        }).catch(function (e) {
                                            tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getFavicon');
                                        });
                                    } else {
                                        resolve(favIconUrl);
                                    }
                                } catch (e) {
                                    resolve(favIconUrl);
                                }
                            });
                        };

                        //Get screenshot while verifying the visible tab is really the wanted one
                        var getScreenshot = function getScreenshot(url) {
                            return new Promise(function (resolve, reject) {
                                setTimeout(function () {
                                    _BrowserService2.default.getLastFocusedWindow().then(function (windowInfo) {
                                        _BrowserService2.default.getCurrentVisibleTab(windowInfo).then(function (currentTab) {
                                            if (currentTab.url == url) {
                                                _BrowserService2.default.getScreenshot('jpeg', 10).then(function (image) {
                                                    resolve(image);
                                                }).catch(function (e) {
                                                    tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@getScreenshot');
                                                });
                                            }
                                        });
                                    });
                                }, 2000);
                            });
                        };

                        //Check if new screenshot is needed: if db does not exists, or specific screenshot is missing, or last screenshot been taken more than 23h ago, than it starts:
                        //get favicon -> get screenshot -> Update screenshotDb with the data -> populate the localStorage from the DB data -> remove old DB data
                        //In case it does not match the following, it just repopulate the local storage, and remove old DB entries.
                        var handleScreenshotsProcess = function handleScreenshotsProcess(favIconUrl, screenShotUrl, localStorageUrl) {
                            return new Promise(function (resolve, reject) {
                                var screenshotDbObj = pref.get(Consts.TOPSITES_SCREENSHOTS_KEY);
                                if (screenshotDbObj && screenshotDbObj.hasOwnProperty(localStorageUrl)) {
                                    var currentTime = new Date().getTime();
                                    if (screenshotDbObj[localStorageUrl].screenshot == '') {
                                        process();
                                    } else if (currentTime - screenshotDbObj[localStorageUrl].ts > 82800000) {
                                        process();
                                    } else {
                                        populateLocalStorageFromDB().then(deleteOldDbEntries());
                                    }
                                } else {
                                    process();
                                }

                                function process() {
                                    return new Promise(function (resolve, reject) {
                                        getFavicon(favIconUrl).then(function (favicon) {
                                            getScreenshot(screenShotUrl).then(function (screenshot) {
                                                updateScreenshotsDB(localStorageUrl, screenshot, favicon).then(populateLocalStorageFromDB()).then(deleteOldDbEntries());
                                            });
                                        });
                                    });
                                }
                            });
                        };

                        var topSitesArr = pref.get(Consts.TOPSITES_KEY);
                        var getFavDomain = 'http://www.google.com/s2/favicons?domain_url=';

                        // Go over all new topsites

                        var _loop3 = function _loop3(i) {
                            // Check if screenshot Db already exists
                            if (isLocalstorageValueIsValid(Consts.TOPSITES_SCREENSHOTS_KEY)) {
                                var screenshotDbObj = pref.get(Consts.TOPSITES_SCREENSHOTS_KEY);
                                // If encounter with a topSite which does not exists in the DB, create a new DB entry
                                if (!(topSitesArr[i].url in screenshotDbObj)) {
                                    (0, _Utils.imageToB64)(getFavDomain + topSitesArr[i].url).then(function (base64Favicon) {
                                        updateScreenshotsDB(topSitesArr[i].url, '', base64Favicon).then(populateLocalStorageFromDB()).then(deleteOldDbEntries()).catch(function (e) {
                                            tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@topSites1');
                                        });
                                    });
                                }
                            } else {
                                // Check if screenshot Db does not exists yet, create a DB entry from scratch
                                (0, _Utils.imageToB64)(getFavDomain + topSitesArr[i].url).then(function (base64Favicon) {
                                    updateScreenshotsDB(topSitesArr[i].url, '', base64Favicon).then(populateLocalStorageFromDB()).then(deleteOldDbEntries()).catch(function (e) {
                                        tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@topSites2');
                                    });
                                });
                            }
                        };

                        for (var i = 0; i < Object.keys(topSitesArr).length; i++) {
                            _loop3(i);
                        }

                        var urlToScreenshotsMapping = {};
                        var serverRedirectMapping = {};
                        for (var i = 0; i < Object.keys(topSitesArr).length; i++) {
                            urlToScreenshotsMapping[topSitesArr[i].url] = topSitesArr[i].url;
                        }

                        // Listen to redirects, and switch the url in case it in the topSites array
                        _BrowserService2.default.onBeforeRedirect(function (data) {
                            if (data.url in urlToScreenshotsMapping) {
                                urlToScreenshotsMapping[data.redirectUrl] = urlToScreenshotsMapping[data.url];
                            }
                        }, { urls: ['<all_urls>'] });

                        // Listen to tab updates, in case it match one of the urlToScreenshotsMapping list, it start working on it
                        _BrowserService2.default.tabsOnUpdated(function (tabId, details, tab) {
                            if (tab.active == true && details.status == 'complete') {
                                var currentTime = new Date().getTime();
                                if (tab.url in urlToScreenshotsMapping) {
                                    handleScreenshotsProcess(tab.favIconUrl, tab.url, urlToScreenshotsMapping[tab.url]).catch(function (e) {
                                        tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@topSites3');
                                    });
                                } else {
                                    //use serverRedirectMapping for determaine if the server redirect the page
                                    for (var key in serverRedirectMapping) {
                                        if (serverRedirectMapping[key].id == tabId && serverRedirectMapping[key].windowId == tab.windowId && currentTime - serverRedirectMapping[key].ts < 3000) {
                                            handleScreenshotsProcess(tab.favIconUrl, tab.url, key).catch(function (e) {
                                                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@topSites4');
                                            });
                                        }
                                    }
                                }
                                //Build object for server-side redirect huristic,
                            } else if (tab.active == true && details.status == 'loading') {
                                var _currentTime = new Date().getTime();
                                if (tab.url in urlToScreenshotsMapping) {
                                    serverRedirectMapping[tab.url] = {
                                        'id': tab.id,
                                        'windowId': tab.windowId,
                                        'ts': _currentTime
                                    };
                                }
                                for (var _i in serverRedirectMapping) {
                                    if (_currentTime - serverRedirectMapping[_i].ts > 3000) {
                                        delete serverRedirectMapping[_i];
                                    }
                                }
                            }
                        });

                        _EventsService2.default.trigger(Consts.BUILD_TOPSITES_LOCALSTORAGE_DONE);
                    }();

                    if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
                }
            };
            break;
        case ActionTypes.TRIGGER_GET_GOOGLE_TRENDING_SEARCHES:
            retFunc = function retFunc(args) {
                _EventsService2.default.trigger(Consts.GET_GOOGLE_TRENDING_SEARCHES);
            };
            break;
        case ActionTypes.GET_GOOGLE_TRENDING_SEARCHES:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                var cc = pref.get('cc');
                if (cc == null || cc.length != 2) cc = 'US';
                if (behaviour['countryCodes'] != null && behaviour['countryCodes'][cc] != null) cc = behaviour['countryCodes'][cc];
                var url = behaviour.url;
                var params = behaviour.params;
                params[behaviour['countryCodeParam']] = cc;
                _HttpService2.default.doPostJSON(url, params, function (response) {
                    if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object') {
                        try {
                            var getTrends = function getTrends(obj, i) {
                                var trends = [];
                                var node = behaviour['jsonPath'][i];
                                if (i < behaviour['jsonPath'].length - 1) {
                                    var key = node['name'];
                                    var type = node['type'];
                                    if (type == 'list') {
                                        for (var j = 0; j < obj[key].length; j++) {
                                            trends = trends.concat(getTrends(obj[key][j], i + 1));
                                        }
                                    } else if (type == 'obj') trends = trends.concat(getTrends(obj[key], i + 1));else tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, 'Error in JSON path: no such type "' + type + '"', '@GET_GOOGLE_TRENDING_SEARCHES');
                                } else {
                                    trends = [{
                                        title: obj[node['titleName']],
                                        imageUrl: obj[node['imageUrlName']]
                                    }];
                                }
                                return trends;
                            };

                            var trends = getTrends(response, 0);
                            if (trends != null && trends.length > 0) {
                                var map = new Map();
                                for (var i in trends) {
                                    if (!map.has(trends[i].title)) map.set(trends[i].title, trends[i]);
                                }pref.set('trends', Array.from(map.values()).slice(0, behaviour['numOfTrends']));
                            }
                        } catch (e) {
                            tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@GET_GOOGLE_TRENDING_SEARCHES');
                        }
                    } else {
                        tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, response, '@GET_GOOGLE_TRENDING_SEARCHES');
                    }
                }, function (e) {
                    tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, 'doPost error', e + ' @GET_GOOGLE_TRENDING_SEARCHES');
                }, null, ['content-type', 'application/x-www-form-urlencoded']);
            };
            break;
        case ActionTypes.TRACK_AND_DO_SEARCH:
            retFunc = function retFunc(args) {
                var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                tracking.trackStatusEvent(behaviour['eventType'], args['extra1'], args['extra2'], function (res) {
                    _LoggerService2.default.debug('Track res:', res);
                    behaviour['do'] = ActionTypes.DO_SEARCH;
                    actionCreator(behaviour)(args);
                });
            };
            break;
        case ActionTypes.TRACK:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond.check(args, behaviour))) return;
                var extra1 = {};
                if (args.clickLocation) {
                    extra1.click_location = args.clickLocation;
                }
                if (args.extra1) {
                    if ((0, _Utils.isObject)(args.extra1)) {
                        extra1 = _assign(extra1, args.extra1);
                    } else {
                        extra1 = { extra1: args.extra1 };
                    }
                }
                var extraData = {};
                var extraDataBuilder = behaviour.extraDataBuilder || args.extraDataBuilder || false;
                if ((0, _Utils.isObject)(extraDataBuilder) && (0, _Utils.isArray)(extraDataBuilder['placeHoldersFunctions']) && (0, _Utils.isObject)(extraDataBuilder['object'])) {
                    extraData = (0, _Utils.placeHolderFunctions)(extraDataBuilder['object'], extraDataBuilder['placeHoldersFunctions'], {}, {
                        self: self,
                        args: args
                    });
                } else if ((0, _Utils.isObject)(args.tracking)) {
                    _assign(extraData, args.tracking);
                }

                var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                var eventType = args.eventType || behaviour.eventType || 'missingEvt';
                var delay = behaviour.delay || args.delay || 0;
                setTimeout(function () {
                    tracking.trackStatusEvent(eventType, _assign({}, extra1, behaviour.extra1), behaviour.extra2, function (res) {
                        var event = args.doneEvent || behaviour.doneEvent || eventType + '_TRACK_SENT';
                        _EventsService2.default.trigger(event, []);
                    }, null, null, extraData);
                }, delay);
            };
            break;
        case ActionTypes.SET_PREFERENCES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var lsKey = behaviour.key || args.key || false;
                if (!lsKey) return;
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var val = behaviour.hasOwnProperty('val') ? behaviour.val : args.hasOwnProperty('val') ? args.val : '';
                var randomVal = args.randomVal || behaviour.randomVal || false;
                if (randomVal) {
                    val = (0, _Utils.randomStr)('0123456789', 9);
                }
                var source = args.source || behaviour.source || 'pref';
                var relevantKeys = [];
                var allKeys = [];
                if (behaviour.wildcard === true) {
                    allKeys = pref.getAllKeys();
                    allKeys.forEach(function (key) {
                        if (key.indexOf(lsKey) >= 0) {
                            relevantKeys.push(key);
                        }
                    });
                } else {
                    relevantKeys.push(lsKey);
                }

                relevantKeys.forEach(function (key) {
                    if (behaviour.op) {
                        var lsValue = pref.get(key) == undefined || pref.get(key) == '' ? 0 : parseFloat(pref.get(key));
                        switch (behaviour.op) {
                            case '*':
                                lsValue *= val;
                                pref.set(key, lsValue, source);
                                break;
                            case '-':
                                lsValue -= val;
                                pref.set(key, lsValue, source);
                                break;
                            case '/':
                                if (lsValue != 0) {
                                    lsValue /= val;
                                    pref.set(key, lsValue, source);
                                }
                                break;
                            case '+':
                                lsValue += val;
                                pref.set(key, lsValue, source);
                                break;
                        }
                    } else {
                        pref.set(key, val, source);
                    }
                });
            };
            break;
        case ActionTypes.ADD_SEARCH_REDIRECT:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var blocking = !behaviour.noneBlocking;
                var domainSource = behaviour.domainSource ? behaviour.domainSource : 'fallback';
                var domain = false;
                var searchUrl = false;
                switch (domainSource) {
                    case 'fallback':
                        domain = pref.get(Consts.SRCH_MFST_KEY);
                        break;
                    case 'manifest':
                        domain = _BrowserService2.default.getManifestSearchData('hostname');
                        searchUrl = _BrowserService2.default.getManifestSearchData('href');
                        if (searchUrl) {
                            searchUrl = searchUrl.replace('{searchTerms}', '').replace('%7BsearchTerms%7D', '');
                        }
                        if (!domain) return;
                        break;
                    default:
                        domain = pref.get(Consts.SRCH_MFST_KEY);
                        break;
                }
                if (blocking) {
                    _BrowserService2.default.onBeforeRequest(function (details) {
                        return searchRedirect(details, null, null, searchUrl, behaviour.disableRedirect);
                    }, { urls: ['*://' + domain + '/*'] }, ['blocking']);
                } else {
                    _BrowserService2.default.onBeforeRequest(function (details) {
                        return searchRedirect(details, null, null, searchUrl, behaviour.disableRedirect);
                    }, { urls: ['*://' + domain + '/*'] });
                }
            };
            break;
        case ActionTypes.SET_SEARCH_COOKIE:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var searchService = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                var domain = behaviour.domain ? behaviour.domain : false;
                var cookieMap = behaviour.cookieMap ? behaviour.cookieMap : false;
                if (!domain || (typeof domain === 'undefined' ? 'undefined' : _typeof(domain)) !== 'object' || !domain['source'] || !cookieMap || (typeof cookieMap === 'undefined' ? 'undefined' : _typeof(cookieMap)) !== 'object') return;
                var url = false;
                switch (domain['source']) {
                    case 'localstorage':
                        if (!domain['key']) return;
                        url = pref.get(domain['key']);
                        if (!url) return;
                        break;
                    case 'manifest':
                        url = _BrowserService2.default.getManifestSearchData('origin');
                        if (!url) return;
                        break;
                    default:
                        url = _BrowserService2.default.getManifestSearchData('origin');
                        if (!url) return;
                        break;
                }
                var asset = 'ds';
                var a = document.createElement('a');
                a.href = url;
                var host = a['hostname'];
                var cookieData = JSON.stringify(cookieMap);
                cookieData = searchService.buildSearchUrl(cookieData, null, asset);
                cookieData = cookieData.replace('{{asset}}', asset || '').replace('{{browser}}', _BrowserService2.default.getBrowserFlavor('beacon') || '').replace('{{sengine}}', pref.get(Consts.SELECTED_SEARCH_ENGINE_KEY) || '').replace('{{funnel}}', asset == 'nt' ? 2 : asset == 'hp' ? 1 : 4).replace('{{xlp_sess_guid}}', pref.get('guid') || '').replace('{{xlp_pers_guid}}', pref.get('xlp_pers_guid') || '').replace('{{xt_ver}}', _BrowserService2.default.version()).replace('{{pa}}', pref.get('pa') || 'search-manager').replace('{{os}}', _BrowserService2.default.platform()).replace('{{uref}}', pref.get('uref') || '').replace('{{abid}}', pref.get('abid') && pref.get('abid') != '{{ABTESTID}}' ? pref.get('abid') : '').replace('{{xt_abg}}', pref.get('xt_abg') && pref.get('xt_abg') != '{{GROUPID}}' ? pref.get('xt_abg') : '');

                _BrowserService2.default.setCookies(url, host, 'ex_data', cookieData);
            };
            break;
        case ActionTypes.ADD_FORCE_SEARCH_REDIRECT:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    var lastForce = 0;
                    var redirectManager = behaviour.rules || {};
                    var delay = behaviour.delay || 500;
                    _BrowserService2.default.onBeforeRequest(function (details) {
                        var now = new Date().getTime();
                        if (now - lastForce > delay) {
                            var searchTerm = getSearchRedirectQuery(details.url, redirectManager);
                            var bl = [pref.get(Consts.AFLT_KEY), pref.get(Consts.B_AFLT_KEY)];
                            var shouldRedirect = true;
                            for (var val in bl) {
                                shouldRedirect = details.url.indexOf(bl[val]) > -1 ? false : shouldRedirect;
                                if (!shouldRedirect) break;
                            }
                            if (searchTerm && shouldRedirect) {
                                lastForce = now;
                                return searchRedirect(details, searchTerm, true);
                            }
                        }
                    }, null, ['blocking']);

                    if (_typeof(behaviour.pref) === 'object') {
                        var _pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                        for (var key in behaviour.pref) {
                            _pref.set(key, behaviour.pref[key]);
                        }
                    }
                }

                function getSearchRedirectQuery(url, redirectManager) {
                    if (!url || (typeof redirectManager === 'undefined' ? 'undefined' : _typeof(redirectManager)) !== 'object') return false;
                    var a = document.createElement('a');
                    a.href = url;
                    var searchTerm = false;
                    var cond = true;
                    for (var _key in redirectManager) {
                        if (_typeof(redirectManager[_key]) !== 'object') return false;
                        if (!redirectManager[_key].redirectRules && Array.isArray(redirectManager[_key].redirectRules)) return false;

                        for (var i = 0; i < redirectManager[_key].redirectRules.length; i++) {
                            searchTerm = false;
                            cond = true;
                            var rule = redirectManager[_key].redirectRules[i];
                            if (_typeof(rule.query) !== 'object' || _typeof(rule.rules) !== 'object') return false;

                            //go over all rules
                            for (var place in rule.rules) {
                                if (!Array.isArray(rule.rules[place])) return false;
                                for (var j = 0; j < rule.rules[place].length; j++) {
                                    if (a[place].indexOf(rule.rules[place][j]) === -1) {
                                        cond = false;
                                        break;
                                    }
                                }
                            }

                            //find the query param
                            if (cond) for (var place2 in rule.query) {
                                var obj = (0, _Utils.stringToObject)(a[place2], '&', '=');
                                if (!obj[rule.query[place2]]) searchTerm = false;else searchTerm = obj[rule.query[place2]];
                            }

                            if (searchTerm && cond) break;
                        }

                        if (_typeof(redirectManager[_key]['blacklist']) === 'object') {
                            for (var place3 in redirectManager[_key]['blacklist']) {
                                if (!Array.isArray(redirectManager[_key]['blacklist'][place3])) return false;
                                var bl = redirectManager[_key]['blacklist'][place3];
                                for (var k = 0; k < bl.length; k++) {
                                    if (a[place3].indexOf(bl[k]) > -1) cond = false;
                                }
                            }
                        }

                        if (_typeof(redirectManager[_key]['paramsObjectBlacklist']) === 'object') {
                            var urlObj = (0, _Utils.stringToObject)(a['href'], '&', '=');
                            var paramsBl = redirectManager[_key]['paramsObjectBlacklist'];
                            for (var rul in paramsBl) {
                                if (urlObj[rul] && urlObj[rul].indexOf(paramsBl[rul]) > -1) cond = false;
                            }
                        }

                        if (searchTerm && cond) break;
                    }

                    if (cond && searchTerm) return searchTerm;
                    return false;
                }
            };
            break;
        case ActionTypes.ADD_TABS_EVENTS_REDIRECT:
            retFunc = function retFunc(args) {
                if (!behaviour.rules || !behaviour.redirect) return;
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    (function () {
                        var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                        var delay = behaviour.delay || 500;

                        var _loop4 = function _loop4(event) {
                            switch (event) {
                                case 'tabsOnUpdated':
                                    {
                                        var lastForce1 = new Date().getTime() - delay;
                                        _BrowserService2.default.tabsOnUpdated(function (tabId, changeInfo, tab) {
                                            if (new Date().getTime() - lastForce1 >= delay) {
                                                var forced = redirectFunc(behaviour.rules[event], behaviour.redirect, tabId, tab);
                                                if (forced) lastForce1 = new Date().getTime();
                                            }
                                        });
                                        break;
                                    }
                                case 'tabsOnCreated':
                                    {
                                        var lastForce2 = new Date().getTime() - delay;
                                        _BrowserService2.default.tabsOnCreated(function (tab) {
                                            if (new Date().getTime() - lastForce2 >= delay) {
                                                var forced = redirectFunc(behaviour.rules[event], behaviour.redirect, tab.id, tab);
                                                if (forced) lastForce2 = new Date().getTime();
                                            }
                                        });
                                        break;
                                    }
                                default:
                                    break;
                            }

                            for (var i = 0; i < behaviour.rules[event].length; i++) {
                                if (behaviour.rules[event][i]['pref']) {
                                    for (var key in behaviour.rules[event][i]['pref']) {
                                        pref.set(key, behaviour.rules[event][i]['pref'][key]);
                                    }
                                }
                            }
                        };

                        for (var event in behaviour.rules) {
                            _loop4(event);
                        }
                    })();
                }

                function redirectFunc(rules, redirectInfo, tabId, tab) {
                    var redirect = true;
                    for (var i = 0; i < rules.length; i++) {
                        redirect = true;
                        for (var key in rules[i]['rule']) {
                            if (!tab.hasOwnProperty(key) || !rules[i]['rule'].hasOwnProperty(key)) redirect = false;else if (tab[key] !== rules[i]['rule'][key]) redirect = false;
                        }if (redirect) {
                            break;
                        }
                    }
                    if (!redirect) return;
                    if (redirectInfo && redirectInfo.url) {
                        var url = redirectInfo.local ? _BrowserService2.default.getLocalUrl(redirectInfo.url) : redirectInfo.url;
                        _BrowserService2.default.updateTab(tabId, url);
                        return true;
                    }
                    return false;
                }
            };
            break;
        case ActionTypes.PING_ALIVE:
            retFunc = function retFunc(args) {
                var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);

                tracking.markDay(Consts.LFC_ALV_KEY, Consts.ALIVE_TRACK_EVENT, true, function (isNewDay) {
                    if (isNewDay) {
                        pref.count(Consts.C_ALV_KEY);
                    }
                });
            };
            break;
        case ActionTypes.PING_DYNAMIC_ALIVE:
            retFunc = function retFunc(args) {
                var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if ((cond === null || cond.check(args)) && pref.get(Consts.ALIVE_DYNAMIC_REPORTS_KEY) != true && pref.get(Consts.ALIVE_DYNAMIC_REPORTS_KEY) != 'true' && behaviour.rules) {
                    pref.set(Consts.ALIVE_DYNAMIC_REPORTS_KEY, true);
                    var reportsCounter = 1;
                    var handleTimeoutAndInterval = function handleTimeoutAndInterval(timeout, interval, counter) {
                        setTimeout(function () {
                            var currentCount = 0;
                            var intervalFunc = setInterval(function () {
                                sendAlive(counter);
                            }, interval);

                            function sendAlive(counter) {
                                if (currentCount < counter) {
                                    track.trackStatusEvent(Consts.ALIVE_DYNAMIC_TRACK_EVENT, reportsCounter);
                                    reportsCounter++;
                                    currentCount++;
                                } else {
                                    clearInterval(intervalFunc);
                                }
                            }
                        }, timeout);
                    };
                    for (var i = 0; i < Object.keys(behaviour.rules).length; i++) {
                        if (behaviour.rules[i].hasOwnProperty('startTime') && behaviour.rules[i].hasOwnProperty('interval') && behaviour.rules[i].hasOwnProperty('limit')) {
                            handleTimeoutAndInterval(behaviour.rules[i].startTime * 1000, behaviour.rules[i].interval * 1000, behaviour.rules[i].limit);
                        }
                    }
                }
            };
            break;
        case ActionTypes.DO_SEARCH:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);

                if (args.keyCode === undefined || args.keyCode && args.keyCode === 13) {
                    var asset = behaviour.asset || args.asset || false;
                    args.stringId = args.stringId || '';
                    var searchObject = args.searchObject || search.searchObjects[args.stringId] || {};
                    var query = args.text || searchObject['text'] || search.searchStrings[args.stringId];
                    if (args.stringId.toLowerCase() !== 'ds') {
                        var url = args.url || args.clickUrl || searchObject['clickUrl'] || false;
                        var hashObj = (0, _Utils.stringToObject)(window.location.hash, '-', '_', '#');
                        var fallbackAsset = hashObj['page'] === 'hp' ? 'hp' : 'nt';
                        var addSearchString = args.hasOwnProperty('ignoreSearchString') && !args.ignoreSearchString;
                        search.doSearch(query, asset || fallbackAsset, url, args.newtab, addSearchString, searchObject);
                    } else {
                        search.doSearch(query, asset || 'ds');
                    }
                }
            };
            break;
        case ActionTypes.CHANGE_ENGINE:
            retFunc = function retFunc(args, sender) {
                var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                search.config.selectedCategory = sender.id;
            };
            break;
        case ActionTypes.UPDATE_SEARCH_TEXT:
            retFunc = function retFunc(args) {
                var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                if (args.stringId) {
                    search.setSearchString(args.stringId, args.text);
                    search.setSearchObject(args.stringId, args.searchObject || {});
                }
            };
            break;
        case ActionTypes.UPDATE_SEARCH_CATEGORY:
            retFunc = function retFunc(args, sender) {
                var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                var category = sender && sender.id ? sender.id : behaviour.category ? behaviour.category : args && args.category ? args.category : 'web';
                search.setSelectedSearchCategory(category);
                var extra1 = {
                    'extra1': {
                        'extra1': search.config.sengineTemp || null
                    }
                };
                _EventsService2.default.trigger(Consts.SELECTED_SEARCH_CATEGORY_CHANGED, [_assign({}, args, extra1)]);
            };
            break;
        case ActionTypes.RELOAD_PREFERENCES:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                pref.reloadAll();
            };
            break;
        case ActionTypes.READ_DS_HASH:
            retFunc = function retFunc(args) {
                var searchText = (0, _Utils.getParameterByName)('terms');
                _EventsService2.default.trigger('HASH_URL', [{ hash: window.location.hash, stringId: 'ds', text: searchText }]);
            };
            break;
        case ActionTypes.INIT_SSE:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var active = pref.get('secured_active');
                if (active === true || active === 'true') {
                    var url = _BrowserService2.default.getLocalUrl('/lib/background/index.js');
                    _HttpService2.default.doGet(url, '', function (response) {
                        if (response.status == 200 && response.readyState == 4) {
                            var script = document.createElement('script');
                            script.setAttribute('src', url);
                            document.head.appendChild(script);
                        }
                    });
                }
            };
            break;
        case ActionTypes.INIT_NEW_SSE:
            retFunc = function retFunc(args) {
                _SecuredService2.default.init(behaviour.options);
            };
            break;
        case ActionTypes.UPDATE_CONFIG_SSE:
            retFunc = function retFunc(args) {
                _SecuredService2.default.updateConfig(behaviour.options);
            };
            break;
        case ActionTypes.CHECK_NEW_DAY:
            retFunc = function retFunc(args) {};
            break;
        case ActionTypes.MARK_IF_NT_IS_TAKEN:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    if (behaviour.localStorageKey) {
                        pref.set(behaviour.localStorageKey, _BrowserService2.default.checkIfNewTabIsTaken());
                    }
                }
            };
            break;
        case ActionTypes.OPEN_WEB_PAGE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                var url = behaviour.url ? behaviour.url : args.url ? args.url : '';
                if ((cond === null || cond && cond.check(args, behaviour)) && url != '') {
                    // This action can recieve params from both behavior and args. behavior is stronger than args.
                    var windowFeatures = behaviour.windowFeatures || args.windowFeatures || '';
                    var center = behaviour.center || args.center || false;
                    var triggerEvent = behaviour.triggerEvent || args.triggerEvent || false;
                    var delay = behaviour.delay || args.delay || 0;
                    var delayKey = behaviour.delayKey || args.delayKey || false;
                    var removeTab = function removeTab() {
                        if (behaviour.removeNewTab || behaviour.removeCurrentTab) {
                            _BrowserService2.default.getLastFocusedWindow().then(function (windowDetails) {
                                _BrowserService2.default.getCurrentVisibleTab(windowDetails).then(function (tab) {
                                    if (behaviour.removeNewTab) _BrowserService2.default.removeTab(tab.id);
                                    if (behaviour.removeCurrentTab) {
                                        _BrowserService2.default.getCurrentTabInfo(function (currentTab) {
                                            _BrowserService2.default.removeTab(currentTab.id);
                                        });
                                    }
                                }).catch(function (e) {
                                    tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE3@service');
                                });
                            });
                        }
                    };
                    if (delayKey) {
                        pref.set(delayKey, delay);
                    }
                    var dynamicUrlBuilder = behaviour.dynamicUrlBuilder || args.dynamicUrlBuilder || false;
                    if ((0, _Utils.isObject)(dynamicUrlBuilder) && (0, _Utils.isArray)(dynamicUrlBuilder.placeHoldersFunctions)) {
                        url = (0, _Utils.placeHolderFunctions)(dynamicUrlBuilder.baseUrl, dynamicUrlBuilder.placeHoldersFunctions);
                    }
                    if (args.hasOwnProperty('dynamic') && args.hasOwnProperty('url_key') || behaviour.hasOwnProperty('dynamic') && behaviour.hasOwnProperty('url_key')) {
                        var urlKey = behaviour.url_key ? behaviour.url_key : args.url_key;
                        url = pref.get(urlKey) != undefined ? pref.get(urlKey) : url;
                    }

                    if (args.hasOwnProperty('localPage') || behaviour.hasOwnProperty('localPage')) {
                        var localPage = behaviour.localPage ? behaviour.localPage : args.localPage;
                        if (localPage !== 'false') url = _BrowserService2.default.getLocalUrl(localPage);
                    }

                    if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object') {
                        try {
                            if (windowFeatures.width) {
                                windowFeatures.width = parseInt(windowFeatures.width);
                            }
                            if (windowFeatures.height) {
                                windowFeatures.height = parseInt(windowFeatures.height);
                            }
                            if (center && windowFeatures.width && windowFeatures.height) {
                                var left = screen.width / 2 - windowFeatures.width / 2;
                                var top = screen.height / 2 - windowFeatures.height / 2;
                                windowFeatures['top'] = Math.round(top);
                                windowFeatures['left'] = Math.round(left);
                            }
                        } catch (e) {
                            tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE4@service', null, windowFeatures['top'] + '|' + windowFeatures['left']);
                        }
                    }
                    var currentTabId = void 0;

                    if (args && args.hasOwnProperty('updateTab') && args.updateTab == true || behaviour.hasOwnProperty('updateTab') && behaviour.updateTab == true) {
                        setTimeout(function () {
                            _BrowserService2.default.getLastFocusedWindow().then(function (windowDetails) {
                                _BrowserService2.default.getCurrentVisibleTab(windowDetails).then(function (tab) {
                                    currentTabId = tab.id;
                                    _BrowserService2.default.updateTab(currentTabId, url);
                                }).catch(function (e) {
                                    tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE2@service');
                                });
                            });
                            removeTab();
                        }, delay);
                    } else if (args && args.hasOwnProperty('createNewTab') && args.createNewTab == true || behaviour.hasOwnProperty('createNewTab') && behaviour.createNewTab == true) {
                        setTimeout(function () {
                            _BrowserService2.default.createTab(null, url);
                            removeTab();
                        }, delay);
                    } else if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object' && windowFeatures.hasOwnProperty('type')) {
                        windowFeatures['url'] = url;
                        setTimeout(function () {
                            _BrowserService2.default.openNewWindow(windowFeatures);
                            removeTab();
                        }, delay);
                    } else {
                        if ((typeof windowFeatures === 'undefined' ? 'undefined' : _typeof(windowFeatures)) === 'object') {
                            try {
                                windowFeatures = JSON.stringify(windowFeatures);
                                windowFeatures = windowFeatures.replace(/{/g, '').replace(/}/g, '').replace(/"/g, '').replace(/:/g, '=');
                            } catch (e) {
                                windowFeatures = '';
                                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@OPEN_WEB_PAGE@service');
                            }
                        }
                        setTimeout(function () {
                            window.open(url, '', windowFeatures);
                            removeTab();
                        }, delay);
                    }

                    if (triggerEvent) {
                        for (var event in triggerEvent) {
                            _EventsService2.default.trigger(event, [_assign({}, args, triggerEvent[event])]);
                        }
                    }
                }
            };
            break;
        case ActionTypes.PREFERENCES_DUPLICATOR:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var keyFrom = args.keyFrom || behaviour.keyFrom || false;
                var keyTo = args.keyTo || behaviour.keyTo || false;
                var source = args.source || behaviour.source || 'pref';
                if (keyFrom && keyTo) {
                    pref.set(keyTo, pref.get(keyFrom), source);
                }
            };
            break;
        case ActionTypes.SHOW_RATE_US_POPUP:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    var timeKey = behaviour && behaviour.timeKey && behaviour.timeKey != 'false' ? behaviour.timeKey : false;
                    var interval = behaviour && behaviour.interval ? behaviour.interval : 0;

                    var currentTime = Math.floor(new Date().getTime() / 1000);
                    if (timeKey && interval) {
                        if (pref.get(timeKey) == undefined || currentTime - pref.get(timeKey) >= interval) {
                            pref.set(Consts.RATE_US_SHOW_TIME, currentTime);
                            _EventsService2.default.trigger(Consts.SHOW_FEEDBACK, [args]);
                        }
                    } else {
                        pref.set(Consts.RATE_US_SHOW_TIME, currentTime);
                        _EventsService2.default.trigger(Consts.SHOW_FEEDBACK, [args]);
                    }
                }
            };
            break;
        case ActionTypes.SET_SEARCH_ENGINE:
            retFunc = function retFunc(args) {
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;

                if ((cond === null || cond && cond.check(args)) && args.engineId) {
                    var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                    var setEngine = function setEngine() {
                        search.setCurrentSearchEngine(args.engineId);
                        _EventsService2.default.trigger(Consts.SEARCH_ENGINE_CHANGED, [_assign(args)]);
                    };
                    if (search.isEnginePersist(args.engineId)) {
                        if (args.engineId != pref.get(Consts.SELECTED_SEARCH_ENGINE_KEY)) {
                            setEngine();
                        }
                    } else {
                        if (args.engineId != pref.get(Consts.TEMP_SEARCH_ENGINE_KEY)) {
                            setEngine();
                        }
                    }
                }
            };
            break;
        case ActionTypes.RESET_TEMP_SEARCH_ENGINE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var searchService = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
                searchService.resetTempEngine();
            };
            break;
        case ActionTypes.EXTERNAL_EVENT_FROM_COOKIE:
            retFunc = function retFunc(args) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                if (!(0, _Utils.isObject)(behaviour.config)) return;
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                var config = behaviour.config;
                var domainSource = config['cookie_domain_source'] || 'hardcoded';
                var domain = false;
                var cookieName = config['cookie_name'];
                var url = config['url_key_in_cookie'];
                var params = config['params_key_in_cookie'] || '';
                var reqMethod = config['request_method'] || 'post';
                switch (domainSource.toLowerCase()) {
                    case 'pref':
                        domain = config['cookie_domain'] ? pref.get(config['cookie_domain']) : false;
                        break;
                    default:
                        domain = config['cookie_domain'];
                }
                if (!domain || !url || !cookieName) return;
                _BrowserService2.default.getCookies(domain, function (cookies) {
                    try {
                        if (!cookies || !cookies.length) return;
                        var ckData = splitCookie(cookies[0].value);
                        if (!Array.isArray(ckData) && !(0, _Utils.isObject)(ckData)) return;
                        try {
                            params = ckData[params] ? decodeURIComponent(ckData[params]) : '';
                            url = ckData[url] ? decodeURIComponent(ckData[url]) : '';
                        } catch (e) {
                            var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
                            track.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@EXTERNAL_EVENT_FROM_COOKIE');
                        }

                        if (!url) return;
                        switch (reqMethod.toLowerCase()) {
                            case 'post':
                                _HttpService2.default.doPost(url, params, null, null, null, null, null, null, true);
                                break;
                            case 'get':
                                _HttpService2.default.doGet(url);
                                break;
                        }
                    } catch (e) {}
                }, { domain: domain, name: cookieName });
            };
            break;
        case ActionTypes.SEND_GOOGLE_ADWORD_TRACK_FROM_COOKIE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var domainSource = behaviour.domainSource || 'hardcoded';
                var domain = false;
                switch (domainSource) {
                    case 'pref':
                        {
                            var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                            domain = behaviour.cookieDomain ? pref.get(behaviour.cookieDomain) : false;
                            break;
                        }
                    default:
                        domain = behaviour.cookieDomain;
                }
                if (!behaviour.cookieName || !domain) return;

                _BrowserService2.default.getCookies(domain, function (cookies) {
                    if (!cookies || !cookies.length) return;
                    var ckData = splitCookie(cookies[0].value);
                    if (!Array.isArray(ckData) && !(0, _Utils.isObject)(ckData) || !ckData['id'] || !ckData['label']) return;
                    (0, _Utils.reportGoogleAdwordConversion)(ckData['label'], ckData['id']);
                }, { domain: domain, name: behaviour.cookieName });
            };
            break;
        case ActionTypes.DEBUG:
            retFunc = function retFunc(args, args2, args3) {
                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                _LoggerService2.default.debug('~~~~~DEBUG-START~~~~~');
                _LoggerService2.default.debug('args: ' + JSON.stringify(args));
                _LoggerService2.default.debug('args2: ' + JSON.stringify(args2));
                _LoggerService2.default.debug('args3: ' + JSON.stringify(args3));
                _LoggerService2.default.debug('behave: ' + JSON.stringify(behaviour));
                _LoggerService2.default.debug('~~~~~DEBUG-END~~~~~');
            };
            break;
        case ActionTypes.OVERRIDE_PREF_VALUE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var key = behaviour.key || false;
                if (!key) return;
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                if (behaviour.removeKeyBefore) {
                    pref.remove(behaviour.removeKeyBefore);
                }
                var value = pref.get(key);
                var template = behaviour.template || false;
                if (!template) return;
                var phFunctions = behaviour.placeholderFunctions && Array.isArray(behaviour.placeholderFunctions) ? behaviour.placeholderFunctions : false;
                if (phFunctions) {
                    value = (0, _Utils.placeHolderFunctions)(template, phFunctions);
                    pref.set(Consts.OVERRIDE_PREF_PREFIX + key, value);
                }
            };
            break;
        case ActionTypes.REMOVE_PREFERENCES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var key = behaviour.key || false;
                if (!key) return;
                var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                pref.remove(key);
            };
            break;
        case ActionTypes.REMOTE_IMAGE_TO_LS:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var lsKey = behaviour.lsKey;
                var imageUrl = behaviour.imageUrl;
                if (!lsKey || !imageUrl) return;
                (0, _Utils.imageToB64)(imageUrl).then(function (b64) {
                    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
                    pref.set(lsKey, b64);
                });
            };
            break;
        case ActionTypes.CONVERT_API_RESPONSE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                var _config = behaviour.config || args.config || false;
                if (!_config) return;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var events = (0, _Utils.isObject)(behaviour.events) ? behaviour.events : {
                    success: 'CONVERT_API_SUCCESS',
                    failure: 'CONVERT_API_FAIL'
                };
                if (!_config.listConfigs) {
                    _config = { listConfigs: _config };
                }
                if (_config.predefinedLists && _config.removeEmptyObjectsInPredefinedLists) {
                    for (var listName in _config.predefinedLists) {
                        if (!_config.predefinedLists.hasOwnProperty(listName)) continue;
                        if (!(0, _Utils.isArray)(_config.predefinedLists[listName])) {
                            delete _config.predefinedLists[listName];
                        } else {
                            _config.predefinedLists[listName] = (0, _Utils.removeEmptyObjectsInArray)(_config.predefinedLists[listName]);
                        }
                    }
                }
                (0, _ApiAdapter.apiAdaptersManager)(_config, _config.predefinedLists || false).then(function (list) {
                    _EventsService2.default.trigger(events.success, [{ val: list }]);
                }).catch(function (error) {
                    _EventsService2.default.trigger(events.failure, [{ error: error }]);
                });
            };
            break;
        case ActionTypes.INIT_LIST_MANAGER:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var config = behaviour.config || false;
                if (!config) return;
                _ListManager2.default.initList(config).then(_ListManager2.default.minItemsCheck.bind(_ListManager2.default)).then(function (listName) {
                    _ListManager2.default.getItemFromList.bind(_ListManager2.default)(listName, args);
                });
            };
            break;
        case ActionTypes.SET_LIST:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(args && (cond === null || cond && cond.check(args, behaviour)))) return;
                var config = args.config || behaviour.config || false;
                var listKey = args.listKey || behaviour.listKey || false;
                if (!config || !listKey) {
                    return;
                }
                var list = args[listKey] || behaviour[listKey] || false;
                if (!list) return;
                _ListManager2.default.initList(config, list);
            };
            break;
        case ActionTypes.DISABLE_BROWSER_ACTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    _BrowserService2.default.setBrowserActionDisable(behaviour.tabId);
                }
            };
            break;
        case ActionTypes.ENABLE_BROWSER_ACTION:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (cond === null || cond && cond.check(args, behaviour)) {
                    _BrowserService2.default.setBrowserActionEnable(behaviour.tabId);
                }
            };
            break;
        case ActionTypes.CONTEXT_MENUS_CREATE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var properties = args.properties || behaviour.properties || false;
                if (!(0, _Utils.isObject)(properties)) return;
                var phFunctions = args.placeHolderFunctions || behaviour.placeHolderFunctions || false;
                if ((0, _Utils.isArray)(phFunctions)) {
                    properties = (0, _Utils.placeHolderFunctions)(properties, phFunctions, {}, { args: args });
                }
                var doneEvent = args.doneEvent || behaviour.doneEvent || false;
                var id = _BrowserService2.default.contextMenusCreate(properties);
                if (!id) return;
                _EventsService2.default.trigger(doneEvent || 'CONTEXT_MENUS_CREATED_' + id, [{ id: id }]);
            };
            break;
        case ActionTypes.CONTEXT_MENUS_UPDATE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var properties = args.properties || behaviour.properties || false;
                var id = args.id || behaviour.id || false;
                if (!(0, _Utils.isObject)(properties) || !id) return;
                var phFunctions = args.placeHolderFunctions || behaviour.placeHolderFunctions || false;
                if ((0, _Utils.isArray)(phFunctions)) {
                    properties = (0, _Utils.placeHolderFunctions)(properties, phFunctions, {}, { args: args });
                }
                var doneEvent = args.doneEvent || behaviour.doneEvent || false;
                _BrowserService2.default.contextMenusUpdate(id, properties, function () {
                    _EventsService2.default.trigger(doneEvent || 'CONTEXT_MENUS_UPDATED_' + id, [{ id: id }]);
                });
            };
            break;
        case ActionTypes.CONTEXT_MENUS_REMOVE:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var id = args.id || behaviour.id || false;
                if (!id) return;
                var phFunctions = args.placeHolderFunctions || behaviour.placeHolderFunctions || false;
                if ((0, _Utils.isArray)(phFunctions)) {
                    id = (0, _Utils.placeHolderFunctions)(id, phFunctions, {}, { args: args });
                }
                var doneEvent = args.doneEvent || behaviour.doneEvent || false;
                _BrowserService2.default.contextMenusRemove(id, function () {
                    _EventsService2.default.trigger(doneEvent || 'CONTEXT_MENUS_REMOVED_' + id, [{ id: id }]);
                });
            };
            break;
        case ActionTypes.CONTEXT_MENUS_REMOVE_ALL:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var doneEvent = args.doneEvent || behaviour.doneEvent || 'CONTEXT_MENUS_REMOVED_ALL';
                _BrowserService2.default.contextMenusRemoveAll(function () {
                    _EventsService2.default.trigger(doneEvent);
                });
            };
            break;
        case ActionTypes.ALERT:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var alertMessage = args.alertMessage || behaviour.alertMessage || false;
                if (!alertMessage) return;
                var phFunctions = args.placeHolderFunctions || behaviour.placeHolderFunctions || false;
                if ((0, _Utils.isArray)(phFunctions)) {
                    alertMessage = (0, _Utils.placeHolderFunctions)(alertMessage, phFunctions, {}, { args: args });
                }
                window.alert(alertMessage);
            };
            break;
        case ActionTypes.SET_COOKIES:
            retFunc = function retFunc() {
                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                var cond = behaviour.c ? new _Condition2.default(behaviour.c) : null;
                if (!(cond === null || cond && cond.check(args, behaviour))) return;
                var cks = args.cookies || behaviour.cookies || false;
                if (!cks || !cks.length) return;
                args = (0, _Utils.placeHolderFunctions)(args, args.placeHolderFunctions, {}, { args: args, behaviour: behaviour });
                behaviour = (0, _Utils.placeHolderFunctions)(behaviour, behaviour.placeHolderFunctions, {}, {
                    args: args,
                    behaviour: behaviour
                });
                var doneEvent = args.doneEvent || behaviour.doneEvent || 'SET_COOKIES_DONE';
                var allCookies = [];
                var doneCounter = 0;
                for (var cki in cks) {
                    var cke = cks[cki];
                    _BrowserService2.default.setCookies(cke.url, cke.domain, cke.name, cke.value, cke.expirationDate, function (ck) {
                        allCookies.push(ck);
                        if (++doneCounter !== cks.length) return;
                        _EventsService2.default.trigger(doneEvent, { args: args, behaviour: behaviour, cookies: allCookies });
                    });
                }
            };
            break;
        default:
            retFunc = function retFunc() {};
    }

    return function () {
        (0, _Utils.populateFromLocalStorage)(behaviour);
        (0, _Utils.populateFromLocalStorage)(arguments[0]);
        var phFunctions = arguments[0] && arguments[0].placeHolderFunctions || behaviour.placeHolderFunctions || false;
        if ((0, _Utils.isArray)(phFunctions)) {
            behaviour = (0, _Utils.placeHolderFunctions)(behaviour, phFunctions, {}, { behaviour: behaviour, args: arguments[0] });
        }
        var env_ = _EventsService2.default.env_;
        var argsObj = {};
        for (var i in arguments) {
            argsObj = _assign(argsObj, arguments[i]);
        }
        // if trigger force cross events, don't take into consideration the listener
        if (argsObj.forceCrossContextEvent === true) {
            retFunc.apply(this, arguments);
            // if trigger force cross event for certain targets, check if it matches
        } else if (_typeof(argsObj.forceCrossContextEvent) === 'object' && env_) {
            if (argsObj.forceCrossContextEvent[env_]) {
                retFunc.apply(this, arguments);
            }
            // if no force involved, keep checking the regular flow
        } else if (argsObj.eventFromOtherContext) {
            // check if listener accept events from other context
            if (behaviour.crossContextListener === true) {
                // check if trigger define desired targets
                if (_typeof(argsObj.crossContextEventTargets) === 'object') {
                    if (argsObj.crossContextEventTargets[env_]) {
                        retFunc.apply(this, arguments);
                    }
                } else {
                    retFunc.apply(this, arguments);
                }
            }
            // check if listener accept only events from certain sources, if so check if the sources match
            else if (_typeof(behaviour.crossContextListener) === 'object' && argsObj.eventSource) {
                    if (behaviour.crossContextListener[argsObj.eventSource]) {
                        retFunc.apply(this, arguments);
                    }
                }
        } else if (_typeof(argsObj.crossContextEventTargets) === 'object') {
            if (argsObj.crossContextEventTargets[env_]) {
                retFunc.apply(this, arguments);
            }
        }
        // event come from the same context, and there is not filtering in the trigger
        else retFunc.apply(this, arguments);
    };
}

function createSess() {
    return 'yxxx-zzzzzzzzzzzz'.replace(/[xyz]/g, function (a) {
        var b = 16 * Math.random() | 0;
        return ('y' == a ? b & 3 | 8 : b).toString(16);
    });
}

function getDefaultData() {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);

    pref.set(Consts.GUID_KEY, (0, _Utils.createGUID)());
    pref.set(Consts.FIRST_VER_KEY, _BrowserService2.default.version());
    pref.set(Consts.LAST_VER_KEY, _BrowserService2.default.version());

    // install time in hours GMT, according to client, may be fixed later by server time
    try {
        var ith = Math.floor(new Date().getTime() / 1000 / 60 / 60);
        pref.set(Consts.LFC_ITH_KEY, ith);
    } catch (e) {
        _LoggerService2.default.track('error', 'getDefaultData90: ' + e.message);
    }

    if (pref.get(Consts.AFLT_KEY) == '') {
        pref.set(Consts.AFLT_KEY, getDefaultAflt());
        pref.set(Consts.B_AFLT_KEY, 'ICO-' + md5(pref.get(Consts.AFLT_KEY)).substr(0, 8).toLowerCase());
    }
}

function getDefaultAflt() {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var format = pref.get(Consts.DEFAULT_AFLT_FORMAT_KEY);
    var d = new Date();

    return format.replace('{{yy}}', ('0' + d.getYear()).slice(-2)).replace('{{ww}}', (0, _Utils.getWeek)(d));
}

function getCookieData() {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);

    if (pref.get(Consts.VERIFIED_HOST_KEY) != null) {
        _BrowserService2.default.getCookies(pref.get(Consts.VERIFIED_HOST_KEY), processCookieData);
    }
}

function getRid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }

    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

function processCookieData(c) {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);

    try {
        // map data keys from jmbextts cookie to "user" (localStorage)
        var localUser = [],
            var_map = {
            aflt: Consts.AFLT_KEY,
            'xlp_sess_guid': Consts.GUID_KEY,
            'xlp_pers_guid': 'xlp_pers_guid',
            'cookie_ts': Consts.LS_TS_KEY,
            'extension_id': 'extension_id',
            'tsrc': 'tsrc'
        };

        var prefMap = pref.get(Consts.LP_COOKIE_MAP_KEY);
        if ((0, _Utils.isObject)(prefMap)) {
            _assign(var_map, prefMap);
        }

        for (var i in c) {
            var cookie = c[i];
            if (cookie.name === pref.get(Consts.COOKIE_NAME_KEY)) {
                pref.set(Consts.COOKIE_VALUE, cookie.value);
                var o = splitCookie(decodeURIComponent(cookie.value));

                for (var key in var_map) {
                    localUser[var_map[key]] = o[key];
                }
            }

            if (cookie.name === Consts.AFLT_KEY) localUser[Consts.AFLT_KEY] = cookie.value.substr(0, 12);
            if (cookie.name === Consts.UREF_KEY) localUser[Consts.UREF_KEY] = cookie.value.substr(0, 12);else if (cookie.name === 'itag') {
                var _val = cookie.value.substr(0, 2);
                if (_val >= 'A0' && _val <= 'A7') localUser['itag'] = _val;
            }
        }

        if (localUser[Consts.AFLT_KEY] === '' || localUser[Consts.AFLT_KEY] === undefined) {
            localUser[Consts.AFLT_KEY] = getDefaultAflt();
        }

        localUser[Consts.B_AFLT_KEY] = 'ICO-' + md5(localUser[Consts.AFLT_KEY]).substr(0, 8).toLowerCase();
        // check if cookie data is newer then LS
        localUser[Consts.LS_TS_KEY] = Math.floor(localUser[Consts.LS_TS_KEY] / 1000);
        if (pref.get(Consts.LS_TS_KEY) < localUser[Consts.LS_TS_KEY] && _BrowserService2.default.id() === localUser['extension_id']) {
            var keys = ['cd', 'cr', 'c_ver', 'param2'];
            keys.forEach(function (key) {
                pref.set(key, undefined);
            });

            /*
             ['cd', 'cr', 'c_ver', 'param2'].map(function (key) {
             pref.set(key, undefined);
             return key;
             });*/

            for (var _key2 in var_map) {
                pref.set(var_map[_key2], undefined);
            }

            for (var _key3 in localUser) {
                pref.set(_key3, localUser[_key3]);
            }
        } else if (pref.get(Consts.LS_TS_KEY) == 0) {
            pref.set(Consts.LS_TS_KEY, Math.floor(new Date().getTime() / 1000));
        }

        track.trackStatusEvent(Consts.EXTENSION_INSTALLED);
        _EventsService2.default.trigger(Consts.PARSE_COOKIE_FINISHED);
        setTimeout(function () {
            _LoggerService2.default.debug(Consts.FIRST_RUN_KEY);
            // ee.trigger(Consts.PARSE_COOKIE_FINISHED);
            track.trackStatusEvent(Consts.FIRST_RUN_KEY, pref.get(Consts.POPUP_DELAY_KEY), pref.get(Consts.RID_KEY), function (res) {
                pref.set(Consts.FIRST_RUN_KEY, false);
                _LoggerService2.default.debug('firstRunSent');

                try {
                    // make install time accurate server time
                    var date = new Date(res.getResponseHeader('Date'));
                    var hours = Math.floor(date.getTime() / 1000 / 60 / 60);
                    // check discrepancy with time
                    var lfc_ith = pref.get(Consts.LFC_ITH_KEY);

                    if (lfc_ith != null && Math.abs(lfc_ith - hours) > 1) {
                        pref.set('client.td', lfc_ith - hours); // client time discrepancy
                    }
                    pref.set(Consts.LFC_ITH_KEY, hours);
                } catch (e) {
                    _LoggerService2.default.track('error', 'processCookieData: ' + e.message);
                }
            });
        }, 3000);

        _LoggerService2.default.debug('Finish parsing user data');
    } catch (e) {
        _LoggerService2.default.debug('error: ' + e.message);
        track.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@udata');
    }
}

function splitCookie(value) {
    var vars = [],
        hash = void 0;
    var hashes = value.split('&');

    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split('=');
        if (!(hash[0] == '' || typeof hash[0] == 'undefined' || hash[1] == '' || typeof hash[1] == 'undefined')) {
            vars[hash[0]] = hash[1];
        }
    }

    return vars;
}

function runRidCheck() {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    return pref.get(Consts.RID_VERIFY_KEY) && pref.get(Consts.RID_URL_KEY) && pref.get(Consts.RID_VERIFY_KEY) != '0' && pref.get(Consts.RID_URL_KEY) != '0';
}

function setUninstallUrl() {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
    var verifiedHost = pref.get(Consts.VERIFIED_HOST_KEY);
    var uninstallHost = pref.get(Consts.UNINSTALL_DOMAIN);
    var host = uninstallHost && uninstallHost.indexOf('{{') == -1 ? uninstallHost : verifiedHost;
    var uninstallFormatUrl = pref.get(Consts.UNINSTALL_URL_FORMAT_KEY);
    var protocol = pref.get(Consts.SECURE_HTTP_KEY) == '1' ? 'https://' : 'http://';
    var lsData = btoa(JSON.stringify(track.trackStatusEventGetDataObject(Consts.UNINSTALL_TRACK_EVENT_KEY)));
    var uninstallUrl = uninstallFormatUrl.replace('{{' + 'UNINSTALL_URL' + '}}', host).replace('{{' + 'verified_host' + '}}', host);
    var a = document.createElement('a');
    a.href = uninstallUrl;
    host = a.hostname;
    _BrowserService2.default.setUninstallURL(uninstallUrl);
    _BrowserService2.default.setCookies(uninstallUrl, host, Consts.URL_DATA_COOKIE_ID, protocol + pref.get(Consts.TRACK_KEY));
    _BrowserService2.default.setCookies(uninstallUrl, host, Consts.LS_DATA_COOKIE_ID, lsData);
}

function searchRedirect(details, forceSearchTerm, forceSearch, searchUrl, disableRedirect) {
    var url = details.url;

    var method = '';
    var search_terms = void 0;
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var track = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
    var search = _ServiceFactory2.default.get(Consts.SEARCH_SERVICE);
    var a = document.createElement('a');

    a.href = url;

    if (a.pathname == '/' || a.pathname == '') {
        var type = a.search.substr(1, 1);
        switch (type) {
            case 's':
                method = 'SuggestUrl';
                break;
            case 'u':
            case 'h':
                return { redirectUrl: 'chrome://newtab' };
            case 'q':
                method = 'SearchUrl';
                pref.set(Consts.SELECTED_SEARCH_CATEGORY_KEY, Consts.SEARCH_CAT_WEB);
                break;
            default:
                break;
        }

        search_terms = forceSearchTerm || a.search.substr(3);
    } else {
        try {
            method = 'SearchUrl';
            search_terms = forceSearchTerm || a.pathname.substring(1);
            pref.set(Consts.SELECTED_SEARCH_CATEGORY_KEY, Consts.SEARCH_CAT_WEB);
        } catch (e) {
            _LoggerService2.default.track('error', 'searchRedirect90: ' + e.message);
        }
    }

    search_terms = search_terms || '';
    search_terms = decodeURIComponent(search_terms.replace(/\+/g, ' '));

    function markSearch(prefKeyToCount, prefKeyToMarkTime, objPrefValidationToSendEvent, event) {
        setTimeout(function () {
            if (prefKeyToCount) pref.count(prefKeyToCount); // count search query from omni box
            if (prefKeyToMarkTime) pref.markTime(prefKeyToMarkTime); // mark search query from omni box activity time
            track.markActive(); // mark general user activity
            if (objPrefValidationToSendEvent && (typeof objPrefValidationToSendEvent === 'undefined' ? 'undefined' : _typeof(objPrefValidationToSendEvent)) === 'object' && event) {
                if (pref.get(Object.keys(objPrefValidationToSendEvent)[0]) !== a[Object.keys(objPrefValidationToSendEvent)[0]]) {
                    _EventsService2.default.trigger(event);
                }
            } else if (event) {
                _EventsService2.default.trigger(event);
            }
        }, 100);
    }

    function countAsSearch() {
        if (!searchUrl) return true;
        return details.url.indexOf(searchUrl) === 0;
    }

    var methodIsSuggest = method === 'SuggestUrl';
    var locale = '';
    try {
        url = methodIsSuggest ? (0, _Utils.sprintf)(search.getSuggestParam(false, 'default', 'url'), {
            searchTerms: search_terms,
            lang: locale
        }) : search.getSearchUrl(search_terms);
        if (url === '' || !url) {
            _LoggerService2.default.track('error', 'searchRedirect91: ' + 'empty_url');
        }
    } catch (e) {
        _LoggerService2.default.track('error', 'searchRedirect92: ' + e.message);
    }

    var search_url = url;

    if (methodIsSuggest && !disableRedirect) {
        return { 'redirectUrl': search_url };
    }

    if (!_BrowserService2.default.checkIfNewTabIsTaken() || !_BrowserService2.default.checkIfDefaultSearchIsTaken()) {
        pref.set('ds1', 0);
    }
    try {
        if (!methodIsSuggest) {
            var checker_t_url = pref.get(Consts.CHECKER_T_URL_KEY);
            checker_t_url = checker_t_url && checker_t_url !== 'false' ? checker_t_url : false;
            if (checker_t_url && details.type !== 'image') {
                var checker_f_url = pref.get(Consts.CHECKER_F_URL_KEY);
                checker_f_url = checker_f_url && checker_f_url !== 'false' ? checker_f_url : false;
                var checker_f_fullURL = a.origin + checker_f_url;
                var checker_t_fullURL = a.origin + checker_t_url;
                // Verify the checker False file url and redirect it to True file
                if (checker_f_url && checker_f_fullURL === details.url) {
                    return { 'redirectUrl': checker_t_fullURL };
                }
                // Does not initiate a redirect in case trying to reach checker True file
                else if (checker_t_fullURL === details.url) {
                        return;
                    }
            }
            if (details.type !== 'image' && !forceSearch && pref.get('ds1') == 1) {
                search_url = _BrowserService2.default.newTabUrl() + '?terms=' + encodeURIComponent(search_terms) + '#ds1';
                _EventsService2.default.trigger(Consts.FIRST_DS_EVENT);
                if (!disableRedirect) {
                    _BrowserService2.default.updateTab(details.tabId, search_url);
                } else {
                    markSearch('c.sob', 'act.sob', { ds1: 1 }, Consts.SEARCH_OB_DONE_EVENT);
                }
                return;
            }
        }
        if ((_BrowserService2.default.checkIfDefaultSearchIsTaken() || forceSearch) && (countAsSearch() || !methodIsSuggest)) {
            var shouldRedirect = details.url !== search_url && details.type !== 'image';
            if (shouldRedirect) {
                if (!methodIsSuggest) {
                    if (forceSearch) {
                        markSearch('c.sfor', 'act.sfor', null, Consts.SEARCH_FORCE_DONE_EVENT);
                    } else {
                        markSearch('c.sob', 'act.sob', { ds1: 1 }, Consts.SEARCH_OB_DONE_EVENT);
                    }
                }
                if (!disableRedirect) {
                    return { 'redirectUrl': search_url };
                }
            }
        }
    } catch (e) {
        _LoggerService2.default.track('error', 'searchRedirect93: ' + e.message);
    }
}

function checkFile(extId, fileName, retries, timeout, cb, checkOverride) {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var url = _BrowserService2.default.getLocalUrl(fileName);

    _HttpService2.default.doGetJSON(url, insertToStorage, retryXhr);

    function insertToStorage(result) {
        try {
            if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
                for (var key in result) {
                    if (checkOverride && result.hasOwnProperty(key) && checkOverride.indexOf(key) > -1) {
                        if (pref.get(key) === undefined || (0, _Utils.strStartsWith)(pref.get(key).toString(), '{{')) {
                            pref.set(key, result[key]);
                        }
                    } else if (result.hasOwnProperty(key)) {
                        pref.set(key, result[key]);
                    }
                }
            }
            cb();
        } catch (e) {
            cb();
        }
    }

    function retryXhr() {
        if (retries > 0) {
            retries--;
            setTimeout(function () {
                _HttpService2.default.doGetJSON(url, insertToStorage, retryXhr);
            }, timeout * 1000);
        } else {
            cb();
        }
    }
}

function isLocalstorageValueIsValid(key) {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var value = pref.get(key);
    if (value && value != undefined && value != null && value != '') {
        return true;
    } else {
        return false;
    }
}

function updateIDS(cb) {
    var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
    var id = _BrowserService2.default.id();
    var file = 'e_.json';
    var retries = 0;
    var timeout = 0.5;
    var checkOverride = ['config_id'];
    if (!pref.get(Consts.CONFIG_ID_KEY) || (0, _Utils.strStartsWith)(pref.get(Consts.CONFIG_ID_KEY).toString(), '{{')) checkFile(id, file, retries, timeout, function () {
        idsOverrideByConfig(cb);
    });else idsOverrideByConfig(cb);

    function idsOverrideByConfig(cb) {
        try {
            if (pref.config_.properties.config_id) {
                pref.set(Consts.CONFIG_ID_KEY, pref.config_.properties.config_id);
            }
        } catch (e) {
            _LoggerService2.default.track('error', 'idsOverrideByConfig90: ' + e.message);
        }
        if (cb) {
            cb();
        }
    }
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _StorageService = __webpack_require__(17);

var _StorageService2 = _interopRequireDefault(_StorageService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Promise = __webpack_require__(27).Promise;
var md5 = __webpack_require__(16);

var CONFIG_KEY = 'ci';
var TEST_CONFIG_KEY = 't.ci';
var CONFIG_HASH_KEY = 'ci.h';
var FALLBACK_CONFIG = 'responseConfig.json';

var ConfigurationService = function () {
    function ConfigurationService() {
        _classCallCheck(this, ConfigurationService);

        this.config = null;
    }

    _createClass(ConfigurationService, [{
        key: 'load',
        value: function load() {
            var self = this;
            // TODO: load the configuration of the extension from the server
            // After loading the configuration should bootstrap the extension components
            var promise = new Promise(function (resolve, reject) {
                // Load from local storage
                self.reload();

                // Works only in dev mode
                self.loadFromHash();

                if (self.config !== null && _typeof(self.config) === 'object' && !(0, _Utils.isObjectEmpty)(self.config)) {
                    resolve(self.config);
                } else {
                    // Load from server, in case of timeout
                    self.loadFromLocal().then(function () {
                        resolve(self.config);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            });

            return promise;
        }
    }, {
        key: 'loadFromServer',
        value: function loadFromServer(data) {
            var self = this;

            // Try to load config_server url from local storage:
            var prefService = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);

            if (prefService.get(TEST_CONFIG_KEY)) {
                self.config = self.buildConfigFromResponse(prefService.get(TEST_CONFIG_KEY));
                prefService.remove(TEST_CONFIG_KEY);
                _EventsService2.default.trigger(_Consts.CONFIG_RECEIVED);
                self.save();
                return new Promise(function (resolve, reject) {
                    resolve();
                });
            }

            // Load from server, in case of timeout
            return _HttpService2.default.doPostJSON(prefService.get(_Consts.CONFIG_SERVER_KEY), data).then(function (json) {
                _LoggerService2.default.debug('received config from server:' + json);
                var jsonIsObject = (typeof json === 'undefined' ? 'undefined' : _typeof(json)) === 'object';
                if (jsonIsObject && (json.placeholders || json.config)) {
                    self.config = self.buildConfigFromResponse(json);
                    _EventsService2.default.trigger(_Consts.CONFIG_RECEIVED);
                } else if (jsonIsObject && !json.readyState && !(0, _Utils.isError)(json)) {
                    self.config = json;
                    _EventsService2.default.trigger(_Consts.CONFIG_RECEIVED);
                } else {
                    prefService.set(_Consts.FIRST_CONFIG_LOAD, true);
                }
                self.save();
                return self;
            }).catch(function (e) {
                return self;
            });
        }
    }, {
        key: 'loadFromLocal',
        value: function loadFromLocal() {
            var self = this;

            // Load from server, in case of timeout
            return _HttpService2.default.doGet(FALLBACK_CONFIG, 'json').then(function (json) {
                if (json.placeholders || json.config) {
                    self.config = self.buildConfigFromResponse(json);
                } else {
                    self.config = json;
                }
                self.save(true);
            }.bind(this));
        }
    }, {
        key: 'buildConfigFromResponse',
        value: function buildConfigFromResponse(response) {
            var config = {};
            var configStr = JSON.stringify(response.config);

            if (!response.placeholders) {
                response.placeholders = {
                    'COUNTRY_CODE': 'US',
                    'UNITS_WEATHER': 'imperial',
                    'DATE_FORMAT': '{{m}}.{{d}}.{{y}}'
                };
            }

            // Replace all the placeholders in the config
            for (var key in response.placeholders) {
                var placeholder = '{{' + key + '}}';
                var value = _typeof(response.placeholders[key]) === 'object' ? JSON.stringify(response.placeholders[key]) : response.placeholders[key];

                if (typeof response.placeholders[key] === 'number' || typeof response.placeholders[key] === 'boolean' || _typeof(response.placeholders[key]) === 'object') {
                    placeholder = '"' + placeholder + '"';
                }

                configStr = configStr.replace(placeholder, value);
            }

            var responseConfig = JSON.parse(configStr);
            var nodes = {};

            for (var i = 0; i < responseConfig.length; i++) {
                nodes[responseConfig[i].compId] = responseConfig[i];

                if (responseConfig[i].parId === 0) {
                    config = nodes[responseConfig[i].compId];
                }
            }

            for (var j = 0; j < responseConfig.length; j++) {
                if (responseConfig[j].parId && responseConfig[j].parId !== 0) {
                    var parId = responseConfig[j].parId;
                    var node = nodes[parId];
                    //check if node is missing (config issue), and then report it
                    if (!node) {
                        _LoggerService2.default.track('error-load-comp', 'missing_parent_id_' + parId);
                        continue;
                    }
                    nodes[parId].components.push(nodes[responseConfig[j].compId]);
                }
            }

            return config;
        }
    }, {
        key: 'loadFromHash',
        value: function loadFromHash() {
            if (false) {
                var json = void 0;
                if (location.hash.length > 1) {
                    try {
                        json = JSON.parse(window.decodeURIComponent(location.hash.substr(1)));
                    } catch (e) {
                        _LoggerService2.default.log('Loading from hash error:' + e.message);
                        // LoggerService.track('error', 'loadFromHash90: ' + e.message);
                    }
                }

                if (json) {
                    if (json.placeholders || json.config) {
                        this.config = this.buildConfigFromResponse(json);
                    } else {
                        this.config = json;
                    }
                }
            }
        }
    }, {
        key: 'save',
        value: function save() {
            var forceSave = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var configStr = JSON.stringify(this.config);
            var configHash = md5(configStr);

            if (forceSave || _StorageService2.default.get(CONFIG_HASH_KEY) !== configHash) {
                _StorageService2.default.set(CONFIG_HASH_KEY, configHash);
                _StorageService2.default.set(CONFIG_KEY, configStr);
                var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                if (pref !== undefined) pref.setConfig(configStr);
            }
        }
    }, {
        key: 'reload',
        value: function reload() {
            var configHash = _StorageService2.default.get(CONFIG_HASH_KEY);
            var configStr = _StorageService2.default.get(CONFIG_KEY);

            if (configHash !== undefined && configStr !== undefined) {
                this.config = (typeof configStr === 'undefined' ? 'undefined' : _typeof(configStr)) === 'object' ? configStr : JSON.parse(configStr);
            }
        }
    }, {
        key: 'getConfiguration',
        value: function getConfiguration() {
            return this.config;
        }
    }]);

    return ConfigurationService;
}();

var service = new ConfigurationService();
exports.default = service;

/***/ }),
/* 21 */,
/* 22 */,
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var PolyfillService = function PolyfillService() {
    _classCallCheck(this, PolyfillService);

    if (!Array.prototype.includes) {
        Object.defineProperty(Array.prototype, 'includes', {
            value: function value(searchElement, fromIndex) {
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }
                var o = Object(this);
                var len = o.length >>> 0;
                if (len === 0) {
                    return false;
                }
                var n = fromIndex | 0;
                var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
                function sameValueZero(x, y) {
                    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
                }
                while (k < len) {
                    if (sameValueZero(o[k], searchElement)) {
                        return true;
                    }
                    k++;
                }
                return false;
            }
        });
    }
};

var service = new PolyfillService();
exports.default = service;

/***/ }),
/* 24 */,
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServiceFactory = undefined;

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var ServiceFactory = exports.ServiceFactory = function () {
    function ServiceFactory() {
        _classCallCheck(this, ServiceFactory);

        this.services = {};
    }

    _createClass(ServiceFactory, [{
        key: 'load',
        value: function load(config, env_) {
            for (var serviceKey in config.components) {
                var _service = _ComponentsFactory2.default.createComponent(config.components[serviceKey].type);
                this.services[config.components[serviceKey].id] = new _service(config.components[serviceKey], env_);
            }
        }
    }, {
        key: 'add',
        value: function add(serviceInstance, serviceName) {
            if (this.services[serviceName] === undefined) {
                this.services[serviceName] = serviceInstance;
            }
        }
    }, {
        key: 'get',
        value: function get(serviceName) {
            if (this.services[serviceName]) {
                return this.services[serviceName];
            }
        }
    }]);

    return ServiceFactory;
}();

var service = new ServiceFactory();

exports.default = service;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

exports.nativeTracking = nativeTracking;

var _Consts = __webpack_require__(1);

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Utils = __webpack_require__(2);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _Actions = __webpack_require__(19);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function nativeTracking(evtName, guid, message3, message2, id, ver) {
    var trackingUrl = 'asset=&ptag=&click_location=&evt={{evtType}}&aflt=&uref=&firstver=&itag=&client=&pver=&ptype=&label=&ver={{ver}}&id={{id}}&guid=&extra={{extra}}&extra2={{extra2}}&extra3={{extra3}}&z=&xlp_pers_guid=&xlp_sess_guid=&cd=&cr=&sengine=&ext_cc=&xt_abg=&abid=';

    var trackObj = {
        table: 'extensions_b64',
        data: btoa(trackingUrl.replace('{{evtType}}', evtName).replace('{{extra}}', guid.substring(0, 80)).replace('{{extra3}}', message3 ? typeof message3 == 'string' ? message3.substring(0, 500) : message3 : '').replace('{{extra2}}', message2 ? typeof message2 == 'string' ? message2.substring(0, 80) : message2 : '').replace('{{id}}', id ? id : '').replace('{{ver}}', ver ? ver : ''))
    };

    var protocol = localStorage['sec_http'] == '1' ? 'https://' : 'http://';
    var url = localStorage['track'];
    if (!url) {
        protocol = 'https://';
        url = 'ib.srch.bar';
    }
    return _HttpService2.default.doPost(protocol + url, trackObj, '').catch(function (err) {
        _LoggerService2.default.debug('error sending native track: ' + err);
    });
}

var TrackingService = function () {
    function TrackingService(config) {
        _classCallCheck(this, TrackingService);

        var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
        this.browser = _BrowserService2.default;
        this.properties = _assign({}, config.properties);
        this.behaviours = config.behaviours;
        (0, _Actions.register)(this.behaviours);
        pref.set(_Consts.TRACKING_PROPERTIES_KEY, this.properties);
    }

    _createClass(TrackingService, [{
        key: 'markActive',
        value: function markActive() {
            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            // lfc_act = lifecycle active date
            this.markDay('lfc.act', 'active', true, function (newday) {
                if (newday) {
                    pref.count('c.act'); // count new day activity
                }
            });
        }
    }, {
        key: 'markDay',
        value: function markDay(key, evt, stEvt, callback) {
            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var dayStr = (0, _Utils.yymmdd)();
            var isNewDay = false;

            if (pref.get(key) == null || pref.get(key) != dayStr) {
                pref.set(key, dayStr);
                isNewDay = true;
                if (stEvt) {
                    this.trackStatusEvent(evt);
                }
            }

            if (typeof callback === 'function') {
                callback(isNewDay);
            }
        }
    }, {
        key: 'trackStatusEventGetData',
        value: function trackStatusEventGetData(evtType, extra1, extra2, extra3) {
            var extraData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            // TODO: use a dynamic object instead of pre-defined variables
            var assets = '',
                click_location = '';
            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);

            if ((0, _Utils.isObject)(extra1) && extra1 != null) {
                click_location = extra1['click_location'] || '';
                assets = extra1['assets'] || '';

                if ((0, _Utils.isObject)(extra1['extra2'])) {
                    if (extra1['extra2'].hasOwnProperty('localStorage')) {
                        extra2 = pref.get(extra1['extra2']['localStorage']);
                    }
                } else {
                    extra2 = extra1['extra2'] || extra2 || '';
                }
                if ((0, _Utils.isObject)(extra1['extra3'])) {
                    if (extra1['extra3'].hasOwnProperty('localStorage')) {
                        extra3 = pref.get(extra1['extra3']['localStorage']);
                    }
                } else {
                    extra3 = extra1['extra3'] || extra3 || '';
                }

                //extra1 must kept the last in order to avoid overriding it
                if ((0, _Utils.isObject)(extra1['extra1'])) {
                    if (extra1['extra1'].hasOwnProperty('localStorage')) {
                        extra1 = pref.get(extra1['extra1']['localStorage']);
                    }
                } else {
                    extra1 = extra1['extra1'] || '';
                }
            }
            extra1 = extraData.hasOwnProperty('extra1') ? extraData['extra1'] : extra1;
            extra2 = extraData.hasOwnProperty('extra2') ? extraData['extra2'] : extra2;
            extra3 = extraData.hasOwnProperty('extra3') ? extraData['extra3'] : extra3;
            var data = this.properties.trackingUrlFormat;
            // eslint-disable-next-line no-control-regex
            var nonLatin = /[^\x00-\x7F]/;
            var extraLimit = {
                extra1: 80,
                extra2: 80,
                extra3: 500
            };
            var extraValues = {
                extra1: typeof extra1 === 'string' ? extra1.replace(/&/g, '%26').substring(0, extraLimit['extra1']) : extra1 != undefined ? extra1 : '',
                extra2: typeof extra2 === 'string' ? extra2.replace(/&/g, '%26').substring(0, extraLimit['extra2']) : extra2 != undefined ? extra2 : '',
                extra3: typeof extra3 === 'string' ? extra3.replace(/&/g, '%26').substring(0, extraLimit['extra3']) : extra3 != undefined ? extra3 : ''
            };

            for (var ext in extraValues) {
                if (extraValues[ext] && nonLatin.test(extraValues[ext])) {
                    var strArr = extraValues[ext].split('');
                    var finalStr = '';
                    for (var char in strArr) {
                        var encodedChar = nonLatin.test(strArr[char]) ? encodeURIComponent(strArr[char]) : strArr[char];
                        if (finalStr.length + encodedChar.length > extraLimit[ext]) break;
                        finalStr += encodedChar;
                    }
                    extraValues[ext] = finalStr;
                }
            }
            try {
                var placeholders = {
                    click_location: click_location,
                    assets: assets,
                    evtType: extraData.evt || evtType || 'missingEvt',
                    client: _BrowserService2.default.getBrowserFlavor(),
                    ver: _BrowserService2.default.version(),
                    id4: _BrowserService2.default.id4(),
                    extra1: extraValues.extra1,
                    extra2: extraValues.extra2,
                    extra3: extraValues.extra3,
                    z: 1000000000 + Math.floor(Math.random() * (2147483647 - 1000000000))
                };

                for (var key in placeholders) {
                    var str = new RegExp('{{' + key + '}}', 'g');
                    data = data.replace(str, placeholders[key]);
                }

                var regex = new RegExp('{{(.*?)}}', 'g');
                var arr = data.match(regex);

                for (var i in arr) {
                    var k = arr[i];
                    var prefVal = pref.get(k.substring(2, k.length - 2));
                    data = data.replace(new RegExp(k, 'g'), prefVal === undefined ? '' : prefVal);
                }

                if (evtType.indexOf('search-') === 0 && evtType.indexOf('search-set') === -1) {
                    data = data + '&scategory=' + pref.get('selected_cat').toLowerCase();
                }
                data = data.replace('&extra3=&', '&');

                arr = data.match(regex);
                for (var _i in arr) {
                    var _k = arr[_i];
                    var _prefVal = pref.get(_k.substring(2, _k.length - 2));
                    data = data.replace(new RegExp(_k, 'g'), _prefVal === undefined || (0, _Utils.isPlaceHolder)(_prefVal) ? '' : _prefVal);
                }

                return btoa(data);
            } catch (e) {
                _LoggerService2.default.track('error', 'trackStatusEventGetData: ' + e.message);
            }
        }
    }, {
        key: 'trackStatusEventGetDataObject',
        value: function trackStatusEventGetDataObject(evtType, extra1, extra2, extra3, extraData) {
            return {
                'table': this.properties.trackTable,
                'data': this.trackStatusEventGetData(evtType, extra1, extra2, extra3, extraData)
            };
        }
    }, {
        key: 'trackStatusEvent',
        value: function trackStatusEvent(evtType, extra1, extra2, callbackSuccess, extra3, callbackError, extraData) {
            var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
            var protocol = pref.get(_Consts.SECURE_HTTP_KEY) == '1' ? 'https://' : 'http://';
            return _HttpService2.default.doPost(protocol + pref.get(_Consts.TRACK_KEY), this.trackStatusEventGetDataObject(evtType, extra1, extra2, extra3, extraData), '', callbackSuccess, callbackError);
        }
    }]);

    return TrackingService;
}();

exports.default = TrackingService;

_ComponentsFactory2.default.add(function () {
    return TrackingService;
}, 'TrackingService');

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.4+314e4831
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var TRY_CATCH_ERROR = { error: null };

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    TRY_CATCH_ERROR.error = error;
    return TRY_CATCH_ERROR;
  }
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === TRY_CATCH_ERROR) {
      reject(promise, TRY_CATCH_ERROR.error);
      TRY_CATCH_ERROR.error = null;
    } else if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = void 0,
      failed = void 0;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (failed) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = getThen(entry);

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        handleMaybeThenable(promise, entry, _then);
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    return promise.then(function (value) {
      return constructor.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      return constructor.resolve(callback()).then(function () {
        throw reason;
      });
    });
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(41)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.apiAdaptersManager = undefined;

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Utils = __webpack_require__(2);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _Condition = __webpack_require__(13);

var _Condition2 = _interopRequireDefault(_Condition);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Consts = __webpack_require__(1);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else {
        obj[key] = value;
    }return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var md5 = __webpack_require__(16);

var ApiAdapter = function () {
    function ApiAdapter(config) {
        _classCallCheck(this, ApiAdapter);

        this.config = config;
        this.list = [];
    }

    // getInitList can get array of objects, each object api should return an array. each array will be pushed to the main this.list


    _createClass(ApiAdapter, [{
        key: 'getInitList',
        value: function getInitList() {
            var _this = this;

            var extraData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return new Promise(function (resolve, reject) {
                var baseConfig = _this.config['getBaseList'];
                if (!baseConfig || (0, _Utils.isObjectEmpty)(baseConfig)) {
                    resolve(_this.list);
                    return;
                }
                var initListManager = function initListManager() {
                    resolve(_this.list);
                };
                var configArray = (0, _Utils.arrayify)(baseConfig);
                var reqCounter = configArray.length;
                var doneCounter = 0;
                var handleResponse = function handleResponse(fail, res) {
                    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                    if (fail) {
                        reject('get init list failed');
                        return;
                    }
                    if (res) {
                        var list = (0, _Utils.arrayify)((0, _Utils.getDeepValueFromObj_V2)(res.response || res, config['responseResultsLocation']));
                        list.length = config.maxItems && list.length > config.maxItems ? config.maxItems : list.length;
                        for (var it in list) {
                            var item = list[it];
                            _this.list.push(_defineProperty({}, config['nodeName'], item));
                        }
                    }
                    if (++doneCounter === reqCounter) {
                        initListManager();
                    }
                };

                var _loop = function _loop(i) {
                    if (!configArray.hasOwnProperty(i)) return 'continue';
                    var config = configArray[i];
                    var apiConfig = config['apiGetConfig'] || {};
                    var responseType = apiConfig['response_type'] || config['response_type'] || config['responseType'] || false;
                    var apiGet = (0, _Utils.placeHolderFunctions)(config['apiGet'], config['apiGetBuilder'], {}, extraData);
                    var apiHeaders = config['apiHeaders'] || {};
                    var apiTimeout = config['apiTimeout'] || false;
                    var apiPost = (0, _Utils.placeHolderFunctions)(config['apiPost'], config['apiPostBuilder'], {}, extraData) || false;
                    _HttpService2.default.ajax(apiPost ? 'POST' : 'GET', apiGet, apiPost, apiHeaders, apiTimeout, undefined, true, responseType).then(function (res) {
                        handleResponse(false, res, config);
                    }).catch(function (e) {
                        handleResponse(true, false, config);
                    });
                };

                for (var i in configArray) {
                    var _ret = _loop(i);

                    if (_ret === 'continue') continue;
                }
            });
        }
    }, {
        key: 'removeDuplicates',
        value: function removeDuplicates(_list, _config) {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                var config = _config || _this2.config['initListManager'] || {};
                var list = _list || _this2.list;
                if (config['filterConfig']) {
                    var filters = config['filterConfig']['excludeListPrefPath'];
                    var masterIdPath = config['filterConfig']['masterIdPath'];
                    // filter out duplicates in the list
                    if ((0, _Utils.isArray)(masterIdPath)) {
                        for (var it in list) {
                            var item = list[it];
                            if (item['id']) continue;
                            item['id'] = (0, _Utils.getDeepValueFromObj_V2)(item, masterIdPath) || md5(JSON.stringify(item));
                        }
                    }
                    // filter out duplicates ids from existing localStorage list
                    if ((0, _Utils.isArray)(filters) && !(0, _Utils.isObjectEmpty)(filters)) {
                        var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                        filters = (0, _Utils.isArray)(filters[0]) ? filters : [filters];
                        for (var i in filters) {
                            var listPath = filters[i];
                            _this2.list = (0, _Utils.filterArrayDeepValueAndCondition)(list, ['id'], '!includes', pref.get(listPath));
                        }
                    }
                }
                return resolve(_this2.list);
            });
        }
    }, {
        key: 'limitList',
        value: function limitList(_list, _config) {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                var config = _config || _this3.config['initListManager'];
                var list = _list || _this3.list;
                if (config) {
                    var maxItems = config['maxItems'];
                    var newItemOrder = config['removeItemOrder'] || 'first';
                    if (newItemOrder === 'first') {
                        list.reverse();
                    }
                    if (maxItems && list.length > maxItems) {
                        if (newItemOrder === 'random') list.sort(function () {
                            return .5 - Math.random();
                        });
                        list = list.slice(-maxItems);
                    }
                    _this3.list = list;
                }
                return resolve(_this3.list);
            });
        }
    }, {
        key: 'fetchChainApi',
        value: function fetchChainApi(_list, _config) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
                var config = _config || _this4.config['chainApiRequests'];
                var list = _list || _this4.list;
                if (!config || (0, _Utils.isObjectEmpty)(config)) {
                    return resolve(list);
                }
                setTimeout(function () {
                    return reject('timeout');
                }, 10000);
                var reqCounter = 0;
                var doneCounter = 0;
                if (Object.keys(list).length > 0) {
                    var _loop2 = function _loop2(i) {
                        if (!list.hasOwnProperty(i)) return 'continue';
                        var item = list[i];

                        var _loop3 = function _loop3(c) {
                            if (!config.hasOwnProperty(c)) return 'continue';
                            var cfg = config[c];
                            var apiGet = cfg['apiGet'];
                            apiGet = (0, _Utils.placeHolderFunctions)(apiGet, cfg['apiGetBuilder'], {}, item);
                            var apiPost = (0, _Utils.placeHolderFunctions)(cfg['apiPost'] || false, config['apiPostBuilder']) || false;
                            var apiTimeout = config['apiTimeout'] || false;
                            reqCounter++;
                            var apiHeaders = cfg['apiHeaders'] || {};
                            var handleResponse = function handleResponse(res) {
                                var apiRes = (0, _Utils.getDeepValueFromObj_V2)(res.response, cfg['responseResultsLocation']);
                                _assign(list[i], _defineProperty({}, cfg['nodeName'], apiRes));
                                if (++doneCounter === reqCounter) return resolve(list);
                            };
                            _HttpService2.default.ajax(apiPost ? 'POST' : 'GET', apiGet, apiPost, apiHeaders, apiTimeout, undefined, true).then(function (res) {
                                handleResponse(res);
                            }).catch(function (e) {
                                if (++doneCounter === reqCounter) {
                                    return resolve(list);
                                }
                            });
                        };

                        for (var c in config) {
                            var _ret3 = _loop3(c);

                            if (_ret3 === 'continue') continue;
                        }
                    };

                    for (var i in list) {
                        var _ret2 = _loop2(i);

                        if (_ret2 === 'continue') continue;
                    }
                } else if (Array.isArray(config[0])) {
                    var _loop4 = function _loop4(i) {
                        if (!config.hasOwnProperty(i)) return 'continue';
                        list[i] = {};
                        var arr = config[i];

                        var _loop5 = function _loop5(apiObj) {
                            if (!arr.hasOwnProperty(apiObj)) return 'continue';
                            var cfg = arr[apiObj];
                            var apiGet = cfg['apiGet'];
                            apiGet = (0, _Utils.placeHolderFunctions)(apiGet, cfg['apiGetBuilder'], {}, list[i]);
                            reqCounter++;
                            _HttpService2.default.doGet(apiGet).then(function (res) {
                                var apiRes = (0, _Utils.getDeepValueFromObj_V2)(res.response, cfg['responseResultsLocation']);
                                _assign(list[i], _defineProperty({}, cfg['nodeName'], apiRes));
                                if (++doneCounter === reqCounter) {
                                    return resolve(list);
                                }
                            }).catch(function (e) {
                                if (++doneCounter === reqCounter) return resolve(list);
                            });
                        };

                        for (var apiObj in arr) {
                            var _ret5 = _loop5(apiObj);

                            if (_ret5 === 'continue') continue;
                        }
                    };

                    for (var i in config) {
                        var _ret4 = _loop4(i);

                        if (_ret4 === 'continue') continue;
                    }
                } else {
                    reject('ListIsEmpty');
                }
            });
        }
    }, {
        key: 'manipulateData',
        value: function manipulateData(_list, _config) {
            var _this5 = this;

            return new Promise(function (resolve, reject) {
                try {
                    var _config2 = _config || _this5.config['manipulateData'];
                    var list = _list || _this5.list;
                    if (!_config2 || (0, _Utils.isObjectEmpty)(_config2)) {
                        resolve(list);
                        return;
                    }
                    for (var i in list) {
                        if (!list.hasOwnProperty(i)) continue;
                        for (var ph in _config2) {
                            if (!_config2.hasOwnProperty(ph)) continue;
                            var phConfig = _config2[ph];
                            if (phConfig['condition']) {
                                var settings = phConfig['condition'];
                                var cond = settings.c ? new _Condition2.default(settings.c) : null;
                                if (!(cond && cond.check(phConfig['condition'], null, list[i]))) {
                                    continue;
                                }
                            }
                            list[i] = (0, _Utils.insertDeepValueToObj)(list[i], phConfig['insertInto'], (0, _Utils.placeHolderFunctions)(phConfig['value'], phConfig['functions'], {}, list[i]));
                        }
                        var baseConfig = _this5.config['getBaseList'];
                        var configArray = Array.isArray(baseConfig) ? baseConfig : [baseConfig];
                        for (var cfgElem in configArray) {
                            var conf = configArray[cfgElem];
                            if (conf['nodeName']) delete list[i][conf['nodeName']];
                        }
                    }
                    resolve(list);
                } catch (e) {
                    reject(e);
                }
            });
        }
    }, {
        key: 'filterList',
        value: function filterList(_list, _config) {
            var _this6 = this;

            return new Promise(function (resolve, reject) {
                try {
                    var _config3 = _config || _this6.config['filterBy'];
                    var list = _list || _this6.list;
                    if (!_config3 || (0, _Utils.isObjectEmpty)(_config3)) {
                        resolve(list);
                        return;
                    }
                    for (var i in list) {
                        if (!list.hasOwnProperty(i)) continue;
                        for (var _i in _config3) {
                            if (!_config3.hasOwnProperty(_i)) continue;
                            var _cfg = _config3[_i];
                            list = (0, _Utils.filterArrayDeepValueAndCondition)(list, _cfg['val'], _cfg['condition']['op'], _cfg['condition']['val']);
                        }
                    }
                    resolve(list);
                } catch (e) {
                    reject(e);
                }
            });
        }
    }]);

    return ApiAdapter;
}();

var apiAdaptersManager = exports.apiAdaptersManager = function apiAdaptersManager(managerConfig, existingListsObject) {
    return new Promise(function (resolve, reject) {
        if (!managerConfig) {
            return reject('no managerConfig');
        }
        var listConfigs = managerConfig.listConfigs;
        if (!listConfigs) {
            return reject('no listConfigs');
        }

        var maxTotalTimeout = !managerConfig.maxTotalTimeout || managerConfig.maxTotalTimeout === '0' ? false : managerConfig.maxTotalTimeout;
        if (maxTotalTimeout) {
            setTimeout(function () {
                return reject('maxTotalTimeout');
            }, maxTotalTimeout);
        }
        var listsConfigs = (0, _Utils.arrayify)(listConfigs);
        listsConfigs = (0, _Utils.removeEmptyObjectsInArray)(listsConfigs);

        var existingListsCount = existingListsObject ? 1 : 0;
        var requestCounter = listsConfigs.length + existingListsCount;
        var doneCounter = existingListsCount;
        var failCounter = 0;
        var allLists = {};
        var doneLogic = function doneLogic(fail, list, listConfig) {
            if (fail) {
                ++failCounter;
            } else {
                var listId = listConfig.id || md5((0, _Utils.tryStringifyJSON)(listConfig));
                allLists[listId] = list;
                ++doneCounter;
            }
            if (doneCounter + failCounter === requestCounter) {
                if (failCounter === requestCounter) {
                    return reject('fetching all lists failed');
                } else {
                    // done process
                    var combinedList = [];
                    _assign(allLists, existingListsObject || {});
                    var combinationConfig = managerConfig.combinationConfig || false;
                    if (!combinationConfig || !combinationConfig.pattern) {
                        for (var k in allLists) {
                            var singleList = allLists[k];
                            if (!(0, _Utils.isArray)(singleList)) continue;
                            combinedList = [].concat(_toConsumableArray(combinedList), _toConsumableArray(singleList));
                        }
                    } else {
                        var _pattern = combinationConfig.pattern && !(0, _Utils.isObjectEmpty)(combinationConfig.pattern) ? combinationConfig.pattern : false;
                        combinedList = (0, _Utils.listCombinerByPattern)(allLists, _pattern, combinationConfig.maxIterations, combinationConfig.forcePattern);
                    }

                    combinedList.length = managerConfig.maxItems && combinedList.length > managerConfig.maxItems ? managerConfig.maxItems : combinedList.length;
                    return resolve(combinedList);
                }
            }
        };
        var apiAdapterLogic = function apiAdapterLogic(config, counter) {
            var maxRetries = config.maxRetries || 20;
            var adapter = new ApiAdapter(config);
            adapter.getInitList({ counter: counter }).then(adapter.filterList.bind(adapter)).then(adapter.limitList.bind(adapter)).then(adapter.removeDuplicates.bind(adapter)).then(adapter.fetchChainApi.bind(adapter)).then(adapter.filterList.bind(adapter)).then(adapter.manipulateData.bind(adapter)).then(adapter.filterList.bind(adapter)).then(function (list) {
                doneLogic(false, list, config);
            }).catch(function (e) {
                if (++counter === maxRetries) {
                    doneLogic(e);
                } else {
                    apiAdapterLogic(config, counter, maxRetries);
                }
            });
        };
        for (var _config in listsConfigs) {
            var _config4 = listsConfigs[_config];
            apiAdapterLogic(_config4, 1);
        }
    });
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// This file should include all the required chorme specific abilities that are available in the extension

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Consts = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var ChromeService = function () {
    function ChromeService() {
        _classCallCheck(this, ChromeService);

        if (!chrome.tabs) this.noAPIs = true;
        this.isChromeExtension = false;
        this.isNewTabTaken = false;
        this.isDefaultSearchTaken = false;
        this.browserFlavor = 'chrome';
        if (window.chrome && window.chrome.app && window.chrome.app.getDetails() && typeof InstallTrigger === 'undefined') {
            this.tabId = 0;
            this.isChromeExtension = true;
            this._details = chrome.app.getDetails();
            this._version = this._details.version;
            this._id = this._details.id;
            this._defaultSearchManifestObject = '';
            this._newTabUrl = false;
            try {
                this._newTabUrl = chrome.extension.getURL(chrome.app.getDetails().chrome_url_overrides.newtab);
                this.isNewTabTaken = true;
            } catch (e) {}
            try {
                this._defaultSearchManifestObject = chrome.app.getDetails().chrome_settings_overrides.search_provider;
                this.isDefaultSearchTaken = true;
            } catch (e) {}

            var i = void 0,
                p = window.navigator.plugins;
            for (i = 0; i < p.length; i++) {
                if (p[i].name.indexOf('PDF') > -1 && p[i].name.indexOf('Chromium') > -1) {
                    this.browserFlavor = 'chromium';
                }
            }

            if (chrome.browserAction) chrome.browserAction.onClicked.addListener(function (tab) {
                _EventsService2.default.trigger(Consts.BROWSER_ACTION_CLICKED, [tab]);
                _EventsService2.default.trigger(Consts.CHROME_NEW_TAB_CLICKED, [tab]);
            });

            // tabId, details, tab
            if (chrome.tabs) chrome.tabs.onUpdated.addListener(function (tabId, details, tab) {
                _EventsService2.default.trigger(Consts.CHROME_TABS_ON_UPDATE, [tabId, details, tab]);
            });

            if (chrome.contextMenus) chrome.contextMenus.onClicked.addListener(function () {
                var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var tab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _EventsService2.default.trigger(Consts.BROWSER_CONTEXT_MENUS_CLICKED, [_assign({}, { info: info, tab: tab })]);
            });

            if (chrome.runtime.onInstalled) chrome.runtime.onInstalled.addListener(function (e) {
                _LoggerService2.default.log('chrome.runtime.onInstalled');
                _LoggerService2.default.log(JSON.stringify(arguments));
                setTimeout(function () {
                    _LoggerService2.default.log(JSON.stringify(arguments));
                    _EventsService2.default.trigger(Consts.CHROME_RUNTIME_ON_INSTALLED, [e]);
                    _EventsService2.default.trigger(e.reason === 'update' ? Consts.EXTENSION_UPDATED_EVENT : Consts.EXTENSION_INSTALLED_EVENT, [e]);
                }, 1000);
            });
        }
    }

    _createClass(ChromeService, [{
        key: 'init',
        value: function init() {
            var _this = this;

            if (chrome.tabs) chrome.tabs.getCurrent(function (tabInfo) {
                _this.tabId = tabInfo ? tabInfo.id : 0;
            });
        }
    }, {
        key: 'getTabId',
        value: function getTabId() {
            return this.tabId;
        }
    }, {
        key: 'url',
        value: function url() {
            return chrome.extension.getURL('');
        }
    }, {
        key: 'id',
        value: function id() {
            return this._id;
        }
    }, {
        key: 'details',
        value: function details() {
            return this._details = chrome.app.getDetails();
        }
    }, {
        key: 'id4',
        value: function id4() {
            return this._id ? this._id.substring(0, 4) : undefined;
        }
    }, {
        key: 'version',
        value: function version() {
            return this._version;
        }
    }, {
        key: 'newTabUrl',
        value: function newTabUrl() {
            return this._newTabUrl;
        }
    }, {
        key: 'createTab',
        value: function createTab(callback, url) {
            var overrideNewtabCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (url) {
                    chrome.tabs.create({ url: url }, callback);
                } else if (this.isNewTabTaken || overrideNewtabCheck) {
                    _EventsService2.default.trigger(Consts.CHROME_CREATE_TAB_EVENT);
                    var ntUrl = this.getLocalUrl(Consts.NEWTAB_HTML) || false;
                    if (ntUrl) {
                        if (ntUrl.indexOf('#') > -1) {
                            ntUrl = ntUrl + '-ref_ext';
                        } else {
                            ntUrl = ntUrl + '#ref_ext';
                        }
                        chrome.tabs.create({ url: ntUrl }, callback);
                    }
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@createTabCH');
            }
        }
    }, {
        key: 'removeTab',
        value: function removeTab(tabId, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.remove(tabId, callback);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@removeTabCH');
            }
        }
    }, {
        key: 'updateTab',
        value: function updateTab(tabId, url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.update(tabId, { 'url': url }, null);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@updateTabCH');
            }
        }
    }, {
        key: 'getCurrentWindowInfo',
        value: function getCurrentWindowInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.windows.getCurrent(cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentWindowInfoCH');
            }
        }
    }, {
        key: 'getCurrentTabInfo',
        value: function getCurrentTabInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.getCurrent(cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentTabIdCH');
            }
        }
    }, {
        key: 'getTabInfo',
        value: function getTabInfo(tabId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.get(tabId, cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getTabInfoCH');
            }
        }
    }, {
        key: 'setUninstallURL',
        value: function setUninstallURL(url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.runtime.setUninstallURL(url);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setUninstallURLCH');
            }
        }
    }, {
        key: 'getCookies',
        value: function getCookies(domain, callback, detailsObject) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var obj = (0, _Utils.isObject)(detailsObject) ? detailsObject : { domain: domain };
            try {
                if (this.isChromeExtension) {
                    chrome.cookies.getAll(obj, callback);
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCookiesCH');
            }
        }
    }, {
        key: 'setCookies',
        value: function setCookies(url, domain, name, value, expirationDate, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (!expirationDate) {
                    expirationDate = new Date().getTime() + 60 * 60 * 24 * 365;
                }

                if (!callback) {
                    callback = function callback() {
                        if (chrome.runtime.lastError) {
                            tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, chrome.runtime.lastError.message + ' @setCookiesCH');
                        }
                    };
                }
                var c = _assign({ url: url }, domain ? { domain: domain } : {}, name ? { name: name } : {}, value ? { value: value } : {}, expirationDate ? { expirationDate: expirationDate } : {});
                chrome.cookies.set(c, callback);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setCookiesCH');
            }
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.runtime.sendMessage.apply(chrome.runtime, arguments);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@sendMessageCH');
            }
        }
    }, {
        key: 'tabsSendMessage',
        value: function tabsSendMessage() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.sendMessage.apply(chrome.tabs, arguments);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@tabsSendMessageCH');
            }
        }
    }, {
        key: 'onMessage',
        value: function onMessage(callback, external) {
            // let tracking = ServiceFactory.get(Consts.TRACKING_SERVICE);
            try {
                if (external) chrome.runtime.onMessageExternal.addListener(callback);else chrome.runtime.onMessage.addListener(callback);
            } catch (e) {
                // tracking.trackStatusEvent(ERROR_TRACK_EVENT, e.message, '@onMessageCH');
            }
        }
    }, {
        key: 'registerIdleListener',
        value: function registerIdleListener(idle_time) {
            if (this.isChromeExtension) {
                chrome.idle.setDetectionInterval(idle_time);
                chrome.idle.onStateChanged.addListener(function (newState) {
                    if (newState == 'active') {
                        _EventsService2.default.trigger('IDLE_IS_ACTIVE');
                    }
                });
            }
        }
    }, {
        key: 'uninstall',
        value: function uninstall(callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (this.isChromeExtension) {
                    _EventsService2.default.trigger(Consts.BROWSER_UNINSTALL_EVENT);
                    chrome.management.uninstallSelf({ showConfirmDialog: true }, callback);
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@uninstallCH');
            }
        }
    }, {
        key: 'getBrowserVer',
        value: function getBrowserVer() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return (/Chrome\/([0-9.]+)/.exec(navigator.userAgent)[1]
                );
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getBrowserVerCH');
            }
        }
    }, {
        key: 'getExtManifest',
        value: function getExtManifest() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.runtime.getManifest();
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getExtManifestCH');
            }
        }
    }, {
        key: 'checkIfNewTabIsTaken',
        value: function checkIfNewTabIsTaken() {
            return this.isNewTabTaken;
        }
    }, {
        key: 'checkIfDefaultSearchIsTaken',
        value: function checkIfDefaultSearchIsTaken() {
            return this.isDefaultSearchTaken;
        }
    }, {
        key: 'checkIfHomePageIsTaken',
        value: function checkIfHomePageIsTaken() {
            //TODO: Check if real implementation is needed
            return false;
        }
    }, {
        key: 'setBrowserActionEnable',
        value: function setBrowserActionEnable(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.browserAction.enable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionEnableCH');
            }
        }
    }, {
        key: 'setBrowserActionDisable',
        value: function setBrowserActionDisable(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.browserAction.disable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionDisableCH');
            }
        }
    }, {
        key: 'setBrowserActionPopUp',
        value: function setBrowserActionPopUp(html, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var htmlReplacer = (0, _Utils.isFalsy)(html) ? '' : html;
            try {
                chrome.browserAction.setPopup({
                    popup: htmlReplacer,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionPopUpCH');
            }
        }
    }, {
        key: 'setBrowserActionBadgeBackgroundColor',
        value: function setBrowserActionBadgeBackgroundColor(color, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.browserAction.setBadgeBackgroundColor({
                    color: color,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeBackgroundColorCH');
            }
        }
    }, {
        key: 'setBrowserActionBadgeText',
        value: function setBrowserActionBadgeText(text, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.browserAction.setBadgeText({
                    text: text,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeTextCH');
            }
        }
    }, {
        key: 'setBrowserActionIcon',
        value: function setBrowserActionIcon(path, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.browserAction.setIcon({
                    path: path,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionIconCH');
            }
        }
    }, {
        key: 'getTranslation',
        value: function getTranslation(msg) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.i18n.getMessage(msg);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getTranslationCH');
                return msg;
            }
        }
    }, {
        key: 'getBrowserUILang',
        value: function getBrowserUILang() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.i18n.getUILanguage();
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getChromeUILangCH');
            }
        }
    }, {
        key: 'getTranslationOnlyIfExist',
        value: function getTranslationOnlyIfExist(msg, active) {
            // The purpose of 'active' val is to give a configuration option to enable/disable the translation mechanisem.
            var activeN = false;
            if ((0, _Utils.isTrue)(active)) {
                activeN = true;
            }
            var msg_trans = msg;
            if (activeN && (0, _Utils.isStr)(msg_trans)) {
                msg_trans = msg_trans.replace(/[^a-zA-Z0-9]+/g, '_');
            }
            if (activeN && msg_trans != undefined && this.getTranslation(msg_trans) != '') {
                return this.getTranslation(msg_trans);
            } else {
                return msg;
            }
        }

        //promise return topSites

    }, {
        key: 'getTopSites',
        value: function getTopSites() {
            return new Promise(function (resolve, reject) {
                chrome.topSites.get(function (res) {
                    resolve(res);
                });
            });
        }

        //getScreenshot take screenshot of the visible tab and return a b64 image

    }, {
        key: 'getScreenshot',
        value: function getScreenshot(format, quality) {
            return new Promise(function (resolve, reject) {
                chrome.tabs.captureVisibleTab(null, {
                    format: format,
                    quality: quality
                }, function (image) {
                    resolve(image);
                });
            });
        }

        //getCurrentVisibleTab in order to ensure we catch the right tab

    }, {
        key: 'getCurrentVisibleTab',
        value: function getCurrentVisibleTab(windowInfo) {
            return new Promise(function (resolve, reject) {
                chrome.tabs.query({
                    active: true,
                    windowId: windowInfo.id
                }, function (tabs) {
                    resolve(tabs[0]);
                });
            });
        }

        //getLastFocusedWindow in order to ensure we catch the right window

    }, {
        key: 'getLastFocusedWindow',
        value: function getLastFocusedWindow() {
            return new Promise(function (resolve, reject) {
                chrome.windows.getLastFocused(null, function (windowInfo) {
                    resolve(windowInfo);
                });
            });
        }
    }, {
        key: 'openNewWindow',
        value: function openNewWindow(settings) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) == 'object') {
                    chrome.windows.create(settings);
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@openNewWindowCH');
            }
        }
    }, {
        key: 'getLocalUrl',
        value: function getLocalUrl(localFile) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.runtime.getURL(localFile);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getLocalUrlCH');
            }
        }
    }, {
        key: 'connectExternalFile',
        value: function connectExternalFile(fileName) {
            return chrome.runtime.connect({ name: fileName });
        }
    }, {
        key: 'onBeforeRedirect',
        value: function onBeforeRedirect(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            chrome.webRequest.onBeforeRedirect.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'tabsOnUpdated',
        value: function tabsOnUpdated(cb) {
            if (typeof cb !== 'function') return;
            chrome.tabs.onUpdated.addListener(cb);
        }
    }, {
        key: 'tabsOnRemoved',
        value: function tabsOnRemoved(cb) {
            if (typeof cb !== 'function') return;
            chrome.tabs.onRemoved.addListener(cb);
        }
    }, {
        key: 'tabsOnCreated',
        value: function tabsOnCreated(cb) {
            if (typeof cb !== 'function') return;
            chrome.tabs.onCreated.addListener(cb);
        }
    }, {
        key: 'tabsOnActivated',
        value: function tabsOnActivated(cb) {
            if (typeof cb !== 'function') return;
            chrome.tabs.onActivated.addListener(cb);
        }
    }, {
        key: 'tabsExecuteScript',
        value: function tabsExecuteScript(tabId, details, cb) {
            if (tabId) chrome.tabs.executeScript(tabId, details, cb);else chrome.tabs.executeScript(details, cb);
        }
    }, {
        key: 'tabsInsertCSS',
        value: function tabsInsertCSS(tabId, details, cb) {
            if (typeof cb !== 'function') return;
            if (tabId) chrome.tabs.insertCSS(tabId, details, cb);else chrome.tabs.insertCSS(details, cb);
        }
    }, {
        key: 'tabsReload',
        value: function tabsReload(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.tabs.reload(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsReloadCH');
            }
        }
    }, {
        key: 'onBeforeRequest',
        value: function onBeforeRequest(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            chrome.webRequest.onBeforeRequest.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'onCompleted',
        value: function onCompleted(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            chrome.webRequest.onCompleted.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'getBrowserFlavor',
        value: function getBrowserFlavor() {
            return this.browserFlavor;
        }
    }, {
        key: 'getManifestSearchData',
        value: function getManifestSearchData(key) {
            if (!key) return false;
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);

            var manifest = this.getExtManifest();
            if (!manifest) return false;
            try {
                var url = false;
                if ((0, _Utils.isNodeExistInObject)(manifest, ['chrome_settings_overrides', 'search_provider', 'search_url'])) {
                    url = manifest['chrome_settings_overrides']['search_provider']['search_url'];
                }
                if (!url) return false;
                var a = document.createElement('a');
                a.href = url;
                var value = a[key];
                if (value && value !== '') {
                    return value;
                }
                return false;
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getManifestSearchDomainCH');
                return false;
            }
        }
    }, {
        key: 'tabsQuery',
        value: function tabsQuery(query, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (!query || !cb || typeof cb !== 'function') return;
                chrome.tabs.query(query, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsQueryCH');
            }
        }
    }, {
        key: 'windowsGetAll',
        value: function windowsGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                chrome.windows.getAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@windowsGetAllCH');
            }
        }
    }, {
        key: 'managementGetAll',
        value: function managementGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                chrome.management.getAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementGetAllCH');
            }
        }
    }, {
        key: 'managementOnInstalled',
        value: function managementOnInstalled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                chrome.management.onInstalled.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnInstalledCH');
            }
        }
    }, {
        key: 'managementOnEnabled',
        value: function managementOnEnabled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                chrome.management.onEnabled.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnEnabledCH');
            }
        }
    }, {
        key: 'managementSetEnabled',
        value: function managementSetEnabled(id, enabled, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.management.setEnabled(id, enabled, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementSetEnabledCH');
            }
        }
    }, {
        key: 'downloadsOnCreated',
        value: function downloadsOnCreated(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.downloads.onCreated.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsOnCreatedCH');
            }
        }
    }, {
        key: 'downloadsCancel',
        value: function downloadsCancel(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.downloads.cancel(downloadId, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsCancelCH');
            }
        }
    }, {
        key: 'downloadsRemoveFile',
        value: function downloadsRemoveFile(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                chrome.downloads.removeFile(downloadId, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsRemoveFileCH');
            }
        }
    }, {
        key: 'contextMenusCreate',
        value: function contextMenusCreate(properties, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.contextMenus.create(properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenuCreateCH');
            }
        }
    }, {
        key: 'contextMenusUpdate',
        value: function contextMenusUpdate(id, properties, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.contextMenus.create(id, properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusUpdateCH');
            }
        }
    }, {
        key: 'contextMenusRemove',
        value: function contextMenusRemove(id, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.contextMenus.create(id, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemoveCH');
            }
        }
    }, {
        key: 'contextMenusRemoveAll',
        value: function contextMenusRemoveAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return chrome.contextMenus.removeAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemoveAllCH');
            }
        }
    }]);

    return ChromeService;
}();

// let service = new ChromeService();
// export default service;


exports.default = ChromeService;

/***/ }),
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * EventEmitter v5.2.4 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */

;(function (exports) {
    'use strict';

    /**
     * Class for managing events.
     * Can be extended to provide event functionality in other classes.
     *
     * @class EventEmitter Manages event registering and emitting.
     */
    function EventEmitter() {}

    // Shortcuts to improve speed and size
    var proto = EventEmitter.prototype;
    var originalGlobalValue = exports.EventEmitter;

    /**
     * Finds the index of the listener for the event in its storage array.
     *
     * @param {Function[]} listeners Array of listeners to search through.
     * @param {Function} listener Method to look for.
     * @return {Number} Index of the specified listener, -1 if not found
     * @api private
     */
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }

        return -1;
    }

    /**
     * Alias a method while keeping the context correct, to allow for overwriting of target method.
     *
     * @param {String} name The name of the target method.
     * @return {Function} The aliased method
     * @api private
     */
    function alias(name) {
        return function aliasClosure() {
            return this[name].apply(this, arguments);
        };
    }

    /**
     * Returns the listener array for the specified event.
     * Will initialise the event object and listener arrays if required.
     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
     * Each property in the object response is an array of listener functions.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Function[]|Object} All listener functions for the event.
     */
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;

        // Return a concatenated array of all matching events if
        // the selector is a regular expression.
        if (evt instanceof RegExp) {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        }
        else {
            response = events[evt] || (events[evt] = []);
        }

        return response;
    };

    /**
     * Takes a list of listener objects and flattens it into a list of listener functions.
     *
     * @param {Object[]} listeners Raw listener objects.
     * @return {Function[]} Just the listener functions.
     */
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;

        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }

        return flatListeners;
    };

    /**
     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
     *
     * @param {String|RegExp} evt Name of the event to return the listeners from.
     * @return {Object} All listener functions for an event in an object.
     */
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;

        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }

        return response || listeners;
    };

    function isValidListener (listener) {
        if (typeof listener === 'function' || listener instanceof RegExp) {
            return true
        } else if (listener && typeof listener === 'object') {
            return isValidListener(listener.listener)
        } else {
            return false
        }
    }

    /**
     * Adds a listener function to the specified event.
     * The listener will not be added if it is a duplicate.
     * If the listener returns true then it will be removed after it is called.
     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListener = function addListener(evt, listener) {
        if (!isValidListener(listener)) {
            throw new TypeError('listener must be a function');
        }

        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === 'object';
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }

        return this;
    };

    /**
     * Alias of addListener
     */
    proto.on = alias('addListener');

    /**
     * Semi-alias of addListener. It will add a listener that will be
     * automatically removed after its first execution.
     *
     * @param {String|RegExp} evt Name of the event to attach the listener to.
     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };

    /**
     * Alias of addOnceListener.
     */
    proto.once = alias('addOnceListener');

    /**
     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
     * You need to tell it what event names should be matched by a regex.
     *
     * @param {String} evt Name of the event to create.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };

    /**
     * Uses defineEvent to define multiple events.
     *
     * @param {String[]} evts An array of event names to define.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };

    /**
     * Removes a listener function from the specified event.
     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to remove the listener from.
     * @param {Function} listener Method to remove from the event.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;

        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);

                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }

        return this;
    };

    /**
     * Alias of removeListener
     */
    proto.off = alias('removeListener');

    /**
     * Adds listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
     * You can also pass it a regular expression to add the array of listeners to all events that match it.
     * Yeah, this function does quite a bit. That's probably a bad thing.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.addListeners = function addListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(false, evt, listeners);
    };

    /**
     * Removes listeners in bulk using the manipulateListeners method.
     * If you pass an object as the first argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be removed.
     * You can also pass it a regular expression to remove the listeners from all events that match it.
     *
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeListeners = function removeListeners(evt, listeners) {
        // Pass through to manipulateListeners
        return this.manipulateListeners(true, evt, listeners);
    };

    /**
     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
     * The first argument will determine if the listeners are removed (true) or added (false).
     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
     * You can also pass it an event name and an array of listeners to be added/removed.
     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
     *
     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;

        // If evt is an object then pass each of its properties to this method
        if (typeof evt === 'object' && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    // Pass the single listener straight through to the singular method
                    if (typeof value === 'function') {
                        single.call(this, i, value);
                    }
                    else {
                        // Otherwise pass back to the multiple function
                        multiple.call(this, i, value);
                    }
                }
            }
        }
        else {
            // So evt must be a string
            // And listeners must be an array of listeners
            // Loop over it and pass each one to the multiple method
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }

        return this;
    };

    /**
     * Removes all listeners from a specified event.
     * If you do not specify an event then all listeners will be removed.
     * That means every event will be emptied.
     * You can also pass a regex to remove all events that match it.
     *
     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;

        // Remove different things depending on the state of evt
        if (type === 'string') {
            // Remove all listeners for the specified event
            delete events[evt];
        }
        else if (evt instanceof RegExp) {
            // Remove all events matching the regex.
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        }
        else {
            // Remove all listeners in all events
            delete this._events;
        }

        return this;
    };

    /**
     * Alias of removeEvent.
     *
     * Added to mirror the node API.
     */
    proto.removeAllListeners = alias('removeEvent');

    /**
     * Emits an event of your choice.
     * When emitted, every listener attached to that event will be executed.
     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
     * So they will not arrive within the array on the other side, they will be separate.
     * You can also pass a regular expression to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {Array} [args] Optional array of arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emitEvent = function emitEvent(evt, args) {
        var listenersMap = this.getListenersAsObject(evt);
        var listeners;
        var listener;
        var i;
        var key;
        var response;

        for (key in listenersMap) {
            if (listenersMap.hasOwnProperty(key)) {
                listeners = listenersMap[key].slice(0);

                for (i = 0; i < listeners.length; i++) {
                    // If the listener returns true then it shall be removed from the event
                    // The function is executed either with a basic call or an apply if there is an args array
                    listener = listeners[i];

                    if (listener.once === true) {
                        this.removeListener(evt, listener.listener);
                    }

                    response = listener.listener.apply(this, args || []);

                    if (response === this._getOnceReturnValue()) {
                        this.removeListener(evt, listener.listener);
                    }
                }
            }
        }

        return this;
    };

    /**
     * Alias of emitEvent
     */
    proto.trigger = alias('emitEvent');

    /**
     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
     *
     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
     * @param {...*} Optional additional arguments to be passed to each listener.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };

    /**
     * Sets the current value to check against when executing listeners. If a
     * listeners return value matches the one set here then it will be removed
     * after execution. This value defaults to true.
     *
     * @param {*} value The new value to check for when executing listeners.
     * @return {Object} Current instance of EventEmitter for chaining.
     */
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };

    /**
     * Fetches the current value to check against when executing listeners. If
     * the listeners return value matches this one then it should be removed
     * automatically. It will return true by default.
     *
     * @return {*|Boolean} The current value to check for or the default, true.
     * @api private
     */
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty('_onceReturnValue')) {
            return this._onceReturnValue;
        }
        else {
            return true;
        }
    };

    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Object} The events storage object.
     * @api private
     */
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };

    /**
     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
     *
     * @return {Function} Non conflicting EventEmitter class.
     */
    EventEmitter.noConflict = function noConflict() {
        exports.EventEmitter = originalGlobalValue;
        return EventEmitter;
    };

    // Expose the class either via AMD, CommonJS or the global object
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return EventEmitter;
        }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    else if (typeof module === 'object' && module.exports){
        module.exports = EventEmitter;
    }
    else {
        exports.EventEmitter = EventEmitter;
    }
}(this || {}));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _StorageService = __webpack_require__(17);

var _StorageService2 = _interopRequireDefault(_StorageService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _Utils = __webpack_require__(2);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Consts = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var PreferencesService = function () {
    function PreferencesService(config, env) {
        _classCallCheck(this, PreferencesService);

        this.preferences = {};
        if (!(0, _Utils.isObject)(window['global'])) {
            window['global'] = {};
        }
        this.global = window['global'];
        this.env_ = env;
        if (env === 'client') {
            var t = _StorageService2.default.get('ci');
            if (t !== undefined && t != null && t != '') config = t;
        }
        this.setConfig(config);
    }

    _createClass(PreferencesService, [{
        key: 'setConfig',
        value: function setConfig(config) {
            var config_temp = null;
            if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {
                try {
                    config_temp = JSON.parse(config);
                } catch (e) {
                    _LoggerService2.default.track('error', 'setConfig90: ' + e.message);
                    config_temp = config;
                }
            } else {
                config_temp = config;
            }
            var innerComponents = config_temp['components'];
            for (var i in innerComponents) {
                var o = innerComponents[i];
                if (o['type'] === 'commonComponents') {
                    for (var j in o['components']) {
                        if (o['components'][j]['type'] === 'PreferencesService') {
                            config_temp = o['components'][j];
                        }
                    }
                }
            }
            this.config_ = config_temp;
            this.parseConfig();
        }
    }, {
        key: 'parseConfig',
        value: function parseConfig() {
            if (this.config_.properties) {
                var overwriteKeys = this.config_.overwrite ? this.config_.overwrite : [];
                if (overwriteKeys.indexOf('config_id') > -1) {
                    if (this.config_.properties.config_id && (0, _Utils.strStartsWith)(this.config_.properties.config_id.toString(), '{{')) {
                        overwriteKeys = overwriteKeys.filter(function (item) {
                            return item !== 'config_id';
                        });
                    }
                }
                try {
                    var reqCounter = this.get(Consts.SERVER_REQUEST_COUNTER_KEY);
                    var firstLoad = this.get(Consts.FIRST_CONFIG_LOAD);
                    if (reqCounter == 1 && firstLoad !== 'true' && firstLoad !== true) {
                        var firstRunOverwriteKeys = this.config_.firstRunOverwriteKeys || ['sengine', 'bg_color', 'bg_img', 'ds1', 'nt1'];
                        for (var i in firstRunOverwriteKeys) {
                            this.set(firstRunOverwriteKeys[i], undefined);
                        }
                        this.set(Consts.FIRST_CONFIG_LOAD, true);
                    }
                } catch (e) {
                    _LoggerService2.default.track('error', 'parseConfig90: ' + e.message);
                }

                this.preferences = this.config_.properties;

                //TODO: check if locked need implementation
                // for (let k in this.preferences) {
                //     let storeValLocked = StorageService.get(k + '_locked');
                //     if (storeValLocked === 'true') {
                //         delete this.preferences[k];
                //     }
                // }

                // Load from storage and persist to storage if required
                var allStorageKeys = [].concat(_toConsumableArray(_StorageService2.default.allKeys()), _toConsumableArray(Object.keys(this.preferences)));
                for (var _key in allStorageKeys) {
                    var key = allStorageKeys[_key];
                    var storeVal = _StorageService2.default.get(key);
                    storeVal = this.normalizeValue(storeVal);
                    if (storeVal !== undefined && overwriteKeys.indexOf(key) === -1) {
                        this.preferences[key] = storeVal;
                    } else if (storeVal !== this.preferences[key]) {
                        this.set(key, this.preferences[key]);
                    }
                }
            }
        }
    }, {
        key: 'normalizeValue',
        value: function normalizeValue(val) {
            if (val === undefined) return val;
            var retVal = void 0;
            if (val.match(/^(-?\d+\.\d+)$|^(-?\d+)$/)) {
                retVal = parseFloat(val);
                if (!isNaN(retVal)) return retVal;
            }
            return (0, _Utils.tryParseJSON)(val) || val;
        }
    }, {
        key: 'calculateTimeDiffForFirstParamWithValue',
        value: function calculateTimeDiffForFirstParamWithValue(keys, operator) {
            var key = this.getFirstKeyWithValue(keys, operator);
            return this.calculateTimeDiff(key);
        }
    }, {
        key: 'getFirstKeyWithValue',
        value: function getFirstKeyWithValue(keys) {
            var operator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var value = undefined;

            switch (operator) {
                case 'or':
                    {
                        for (var key in keys) {
                            value = this.get(keys[key]);
                            //Found first option to exist in storage
                            if (value) return keys[key];
                        }

                        //No option existed in storage
                        return value;
                    }
            }
        }

        //Wrapper for get method

    }, {
        key: 'getFirstParamWithValue',
        value: function getFirstParamWithValue(keys, operator) {
            var key = this.getFirstKeyWithValue(keys, operator);
            return this.get(key);
        }
    }, {
        key: 'get',
        value: function get(key) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pref';

            if (typeof key === 'undefined') return key;
            if (typeof key === 'string') key = [key];
            var dataLake = source === 'global' ? this.global : this.preferences;
            var masterKey = dataLake[Consts.OVERRIDE_PREF_PREFIX + key[0]] ? Consts.OVERRIDE_PREF_PREFIX + key[0] : key[0];
            var keys = key.slice(1);
            var retVal = dataLake[masterKey];
            if (source === 'pref' && retVal === undefined) {
                retVal = _StorageService2.default.get(masterKey);
                dataLake[masterKey] = this.normalizeValue(retVal);
            }
            return (0, _Utils.getDeepValueFromObj)(retVal, keys);
        }
    }, {
        key: 'set',
        value: function set(key, val) {
            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'pref';
            var version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

            if (typeof key === 'string') key = [key];
            var dataLake = source === 'global' ? this.global : this.preferences;
            switch (version) {
                case 1:
                    {
                        dataLake[key[0]] = (0, _Utils.insertDeepValueToObj)(dataLake[key[0]], key.slice(1), val);
                        break;
                    }
                case 2:
                    {
                        if (key.length > 1) {
                            dataLake[key[0]] = (0, _Utils.insertDeepValueToObj_V2)(dataLake[key[0]], key.slice(1), val);
                        } else {
                            dataLake[key[0]] = val;
                        }
                        break;
                    }
            }
            _StorageService2.default.set(key[0], dataLake[key[0]], source);
        }
    }, {
        key: 'remove',
        value: function remove(key) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pref';

            var dataLake = source === 'global' ? this.global : this.preferences;
            delete dataLake[key];
            _StorageService2.default.remove(key, source);
        }
    }, {
        key: 'all',
        value: function all() {
            return _assign({}, this.preferences);
        }
    }, {
        key: 'getAllKeys',
        value: function getAllKeys() {
            return _StorageService2.default.allKeys();
        }
    }, {
        key: 'reloadAll',
        value: function reloadAll() {
            var k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (k === false) {
                var keys = _StorageService2.default.allKeys();
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    this.preferences[key] = _StorageService2.default.get(keys[i]);
                }
            } else {
                this.preferences[k] = _StorageService2.default.get(k);
            }

            _EventsService2.default.trigger(Consts.PREFERENCES_RELOADED_EVENT);
        }
    }, {
        key: 'count',
        value: function count(key) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pref';

            var v = this.get(key, source);

            if (v == null || !v) {
                v = 1;
            } else {
                v++;
            }

            this.set(key, v, source);
        }
    }, {
        key: 'markTime',
        value: function markTime(key, source) {
            this.set(key, new Date().getTime(), source);
        }
    }, {
        key: 'calculateTimeDiff',
        value: function calculateTimeDiff(key, source) {
            var val = parseInt(this.get(key, source));
            val = isNaN(val) ? 0 : val;
            return new Date().getTime() - val;
        }
    }]);

    return PreferencesService;
}();

exports.default = PreferencesService;

_ComponentsFactory2.default.add(function () {
    return PreferencesService;
}, 'PreferencesService');

/***/ }),
/* 40 */
/***/ (function(module, exports) {

(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    rawHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = 'status' in options ? options.status : 200
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 41 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var SET_UNINSTALL_COOKIE = exports.SET_UNINSTALL_COOKIE = 'SET_UNINSTALL_COOKIE';
var CREATE_NEW_TAB = exports.CREATE_NEW_TAB = 'CREATE_NEW_TAB';
var UPDATE_CONFIG = exports.UPDATE_CONFIG = 'UPDATE_CONFIG';
var RUN_ACTIONS = exports.RUN_ACTIONS = 'RUN_ACTIONS';
var TRACK = exports.TRACK = 'TRACK';
var PING_ALIVE = exports.PING_ALIVE = 'PING_ALIVE';
var PING_DYNAMIC_ALIVE = exports.PING_DYNAMIC_ALIVE = 'PING_DYNAMIC_ALIVE';
var PARSE_USER_DATA = exports.PARSE_USER_DATA = 'PARSE_USER_DATA';
var RELOAD_PREFERENCES = exports.RELOAD_PREFERENCES = 'RELOAD_PREFERENCES';
var READ_DS_HASH = exports.READ_DS_HASH = 'READ_DS_HASH';
var UPDATE_SEARCH_TEXT = exports.UPDATE_SEARCH_TEXT = 'UPDATE_SEARCH_TEXT';
var UPDATE_SEARCH_CATEGORY = exports.UPDATE_SEARCH_CATEGORY = 'UPDATE_SEARCH_CATEGORY';
var DO_SEARCH = exports.DO_SEARCH = 'DO_SEARCH';
var CHANGE_ENGINE = exports.CHANGE_ENGINE = 'CHANGE_ENGINE';
var ADD_SEARCH_REDIRECT = exports.ADD_SEARCH_REDIRECT = 'ADD_SEARCH_REDIRECT';
var PUBLISH_EVENT_ON_INTERVAL = exports.PUBLISH_EVENT_ON_INTERVAL = 'PUBLISH_EVENT_ON_INTERVAL';
var INIT_SSE = exports.INIT_SSE = 'INIT_SSE';
var INIT_NEW_SSE = exports.INIT_NEW_SSE = 'INIT_NEW_SSE';
var UPDATE_CONFIG_SSE = exports.UPDATE_CONFIG_SSE = 'UPDATE_CONFIG_SSE';
var CHECK_NEW_DAY = exports.CHECK_NEW_DAY = 'CHECK_NEW_DAY';
var SET_PREFERENCES = exports.SET_PREFERENCES = 'SET_PREFERENCES';
var REMOVE_PREFERENCES = exports.REMOVE_PREFERENCES = 'REMOVE_PREFERENCES';
var CHECK_NEW_XT_ABG = exports.CHECK_NEW_XT_ABG = 'CHECK_NEW_XT_ABG';
var CHECK_NEW_CONFIG = exports.CHECK_NEW_CONFIG = 'CHECK_NEW_CONFIG';
var MARK_IF_NT_IS_TAKEN = exports.MARK_IF_NT_IS_TAKEN = 'MARK_IF_NT_IS_TAKEN';
var ADD_FORCE_SEARCH_REDIRECT = exports.ADD_FORCE_SEARCH_REDIRECT = 'ADD_FORCE_SEARCH_REDIRECT';
var ADD_TABS_EVENTS_REDIRECT = exports.ADD_TABS_EVENTS_REDIRECT = 'ADD_TABS_EVENTS_REDIRECT';
var DEBUG = exports.DEBUG = 'DEBUG';
var OVERRIDE_PREF_VALUE = exports.OVERRIDE_PREF_VALUE = 'OVERRIDE_PREF_VALUE';

var PREFERENCES_DUPLICATOR = exports.PREFERENCES_DUPLICATOR = 'PREFERENCES_DUPLICATOR';
var SHOW_RATE_US_POPUP = exports.SHOW_RATE_US_POPUP = 'SHOW_RATE_US_POPUP';
var SET_SEARCH_ENGINE = exports.SET_SEARCH_ENGINE = 'SET_SEARCH_ENGINE';
var INIT_SEARCH_ENGINE = exports.INIT_SEARCH_ENGINE = 'INIT_SEARCH_ENGINE';
var UPDATE_CONFIG_AND_ENGINE_ID = exports.UPDATE_CONFIG_AND_ENGINE_ID = 'UPDATE_CONFIG_AND_ENGINE_ID';
var CHECK_UPDATE_CONFIG = exports.CHECK_UPDATE_CONFIG = 'CHECK_UPDATE_CONFIG';
var DO_UPDATE_CONFIG = exports.DO_UPDATE_CONFIG = 'DO_UPDATE_CONFIG';
var SET_CHROME_POPUP = exports.SET_CHROME_POPUP = 'SET_CHROME_POPUP';
var GET_CHROME_TOPSITES = exports.GET_CHROME_TOPSITES = 'GET_CHROME_TOPSITES';
var BUILD_TOPSITES_LOCALSTORAGE = exports.BUILD_TOPSITES_LOCALSTORAGE = 'BUILD_TOPSITES_LOCALSTORAGE';
var CAPTURE_TOPSITES_SCREENSHOTS = exports.CAPTURE_TOPSITES_SCREENSHOTS = 'CAPTURE_TOPSITES_SCREENSHOTS';
var OPEN_THANK_YOU_PAGE = exports.OPEN_THANK_YOU_PAGE = 'OPEN_THANK_YOU_PAGE';
var OPEN_WEB_PAGE = exports.OPEN_WEB_PAGE = 'OPEN_WEB_PAGE';
var SET_SEARCH_COOKIE = exports.SET_SEARCH_COOKIE = 'SET_SEARCH_COOKIE';
var DO_ACTION_ON_INTERVAL = exports.DO_ACTION_ON_INTERVAL = 'DO_ACTION_ON_INTERVAL';
var RESET_TEMP_SEARCH_ENGINE = exports.RESET_TEMP_SEARCH_ENGINE = 'RESET_TEMP_SEARCH_ENGINE';
var EXTERNAL_EVENT_FROM_COOKIE = exports.EXTERNAL_EVENT_FROM_COOKIE = 'EXTERNAL_EVENT_FROM_COOKIE';
var SEND_GOOGLE_ADWORD_TRACK_FROM_COOKIE = exports.SEND_GOOGLE_ADWORD_TRACK_FROM_COOKIE = 'SEND_GOOGLE_ADWORD_TRACK_FROM_COOKIE';

var GET_GOOGLE_TRENDING_SEARCHES = exports.GET_GOOGLE_TRENDING_SEARCHES = 'GET_GOOGLE_TRENDING_SEARCHES';
var TRIGGER_GET_GOOGLE_TRENDING_SEARCHES = exports.TRIGGER_GET_GOOGLE_TRENDING_SEARCHES = 'TRIGGER_GET_GOOGLE_TRENDING_SEARCHES';
var TRACK_AND_DO_SEARCH = exports.TRACK_AND_DO_SEARCH = 'TRACK_AND_DO_SEARCH';
var REMOTE_IMAGE_TO_LS = exports.REMOTE_IMAGE_TO_LS = 'REMOTE_IMAGE_TO_LS';
var CONVERT_API_RESPONSE = exports.CONVERT_API_RESPONSE = 'CONVERT_API_RESPONSE';
var INIT_LIST_MANAGER = exports.INIT_LIST_MANAGER = 'INIT_LIST_MANAGER';
var SET_LIST = exports.SET_LIST = 'SET_LIST';
var DISABLE_BROWSER_ACTION = exports.DISABLE_BROWSER_ACTION = 'DISABLE_BROWSER_ACTION';
var ENABLE_BROWSER_ACTION = exports.ENABLE_BROWSER_ACTION = 'ENABLE_BROWSER_ACTION';
var CONTEXT_MENUS_CREATE = exports.CONTEXT_MENUS_CREATE = 'CONTEXT_MENUS_CREATE';
var CONTEXT_MENUS_UPDATE = exports.CONTEXT_MENUS_UPDATE = 'CONTEXT_MENUS_UPDATE';
var CONTEXT_MENUS_REMOVE = exports.CONTEXT_MENUS_REMOVE = 'CONTEXT_MENUS_REMOVE';
var CONTEXT_MENUS_REMOVE_ALL = exports.CONTEXT_MENUS_REMOVE_ALL = 'CONTEXT_MENUS_REMOVE_ALL';
var ALERT = exports.ALERT = 'ALERT';
var SET_COOKIES = exports.SET_COOKIES = 'SET_COOKIES';

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Consts = __webpack_require__(1);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _HttpService = __webpack_require__(14);

var _HttpService2 = _interopRequireDefault(_HttpService);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var SecuredService = function () {
    function SecuredService() {
        _classCallCheck(this, SecuredService);
    }

    _createClass(SecuredService, [{
        key: 'init',
        value: function init(options) {
            var that = this;
            this.options = options;
            if (!this.pref) {
                this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                this.newTabUrl = _BrowserService2.default.getLocalUrl('index.html');
                var currentSS = this.pref.get('ss');
                var startObj = {
                    urls: {},
                    urls_list: [],
                    urls_whitelist: {},
                    extensions: {},
                    extensions_list: [],
                    tabs: {},
                    activatedTab: {}
                };
                if (_typeof(this.pref.get('ss')) !== 'object') this.pref.set('ss', startObj);else this.pref.set('ss', _assign(startObj, currentSS));
            }
            _BrowserService2.default.tabsQuery({}, function (tabs) {
                var data = that.pref.get(['ss', 'tabs']);
                var tabIds = [];
                for (var i in tabs) {
                    tabIds.push(tabs[i].id);
                    if (tabs[i].active) that.pref.set(['ss', 'activatedTab', tabs[i].windowId], tabs[i].id);
                }
                for (var tabId in data) {
                    if (tabIds.indexOf(parseInt(tabId)) === -1) delete data[tabId];
                }that.pref.set(['ss', 'tabs'], data);
            });
            this.addListeners();
        }
    }, {
        key: 'updateConfig',
        value: function updateConfig(options) {
            if (!this.options) this.init(options);else this.options = options;
        }
    }, {
        key: 'isWhiteListed',
        value: function isWhiteListed(url) {
            var whitelisted = this.pref.get(['ss', 'urls_whitelist', url]);
            if (!whitelisted && !this.options['fullURL'] && url.indexOf('www.') === 0) whitelisted = this.pref.get(['ss', 'urls_whitelist', url.substring(4)]);
            if (whitelisted) {
                if (whitelisted === 'p' || whitelisted > new Date().getTime()) return true;else {
                    var whitelist = this.pref.get(['ss', 'urls_whitelist']);
                    delete whitelist[url];
                    for (var _url2 in whitelist) {
                        if (whitelist.hasOwnProperty(_url2) && whitelist[_url2] !== 'p' && whitelist[_url2] > new Date().getTime()) delete whitelist[_url2];
                    }this.pref.set(['ss', 'urls_whitelist'], whitelist);
                }
            }
            return false;
        }
    }, {
        key: 'isUrlBlocked',
        value: function isUrlBlocked(full_url, online) {
            var url = this.url(full_url);
            var whitelisted = this.pref.get(['ss', 'urls_whitelist', url]);
            if (!whitelisted && !this.options['fullURL'] && url.indexOf('www.') === 0) whitelisted = this.pref.get(['ss', 'urls_whitelist', url.substring(4)]);
            if (whitelisted) {
                if (whitelisted === 'p' || whitelisted > new Date().getTime()) return 2;else {
                    var whitelist = this.pref.get(['ss', 'urls_whitelist']);
                    delete whitelist[url];
                    for (var _url3 in whitelist) {
                        if (whitelist.hasOwnProperty(_url3) && whitelist[_url3] !== 'p' && whitelist[_url3] > new Date().getTime()) delete whitelist[_url3];
                    }this.pref.set(['ss', 'urls_whitelist'], whitelist);
                }
            }
            var data = this.getUrlsData([full_url], online);
            if (data[url] && data[url]['status'] !== 'ok') return 1;
            return 0;
        }
    }, {
        key: 'url',
        value: function url(_url) {
            if (this.options['fullURL']) return _url;
            var a = document.createElement('a');
            a.setAttribute('href', _url.indexOf('http') === 0 ? _url : 'http://' + _url);
            return a.hostname;
        }
    }, {
        key: 'updateResults',
        value: function updateResults(tabId, results) {
            var allResults = this.pref.get(['ss', 'tabs', tabId, 'results']) || {};
            var totalResults = this.pref.get(['ss', 'tabs', tabId, 'totalResults']) || 0;
            for (var url in results) {
                if (results[url].status !== 'ok') allResults[url] = results[url];
                totalResults++;
            }
            this.pref.set(['ss', 'tabs', tabId, 'results'], allResults);
            this.pref.set(['ss', 'tabs', tabId, 'totalResults'], totalResults);
            return allResults;
        }
    }, {
        key: 'addListeners',
        value: function addListeners() {
            var that = this;
            _BrowserService2.default.onBeforeRequest(function (details) {
                var blocked = void 0;
                if (details['initiator'] && details['initiator'] === _BrowserService2.default.url().slice(0, -1)) return {};
                if (that.options['securedBrowsing'] || that.options['securedSearch']) {
                    if (details.frameId === 0) that.pref.set(['ss', 'tabs', details.tabId], { url: details.url });

                    if ((blocked = that.isUrlBlocked(details.url, that.options['securedBrowsing'])) === 1) {
                        if (details.frameId === 0) {
                            that.pref.set(['ss', 'tabs', details.tabId, 'blocked'], true);
                            that.pref.set(['ss', 'tabs', details.tabId, 'reason'], that.pref.get(['ss', 'urls', that.url(details.url), 'reason_desc']));
                        } else {
                            var blockedFrames = that.pref.get(['ss', 'tabs', details.tabId, 'blockedFrames']) || [];
                            blockedFrames.push(that.url(details.url));
                            that.pref.set(['ss', 'tabs', details.tabId, 'blockedFrames'], blockedFrames);
                        }
                        var redirectUrl = that.newTabUrl + '?url=' + encodeURIComponent(details.url) + (0, _Utils.objectToString)({ env: that.options['browserActionWindowId'], url: details.url }, '-', '_', '#');
                        return { redirectUrl: redirectUrl };
                    }
                    if (details.frameId === 0) {
                        that.pref.set(['ss', 'tabs', details.tabId, 'blocked'], blocked > 0);
                    }
                }
            }, { urls: ['http://*/*', 'https://*/*'], types: ['main_frame', 'sub_frame'] }, ['blocking']);
            _BrowserService2.default.onCompleted(function (details) {
                if (details.url.startsWith(that.newTabUrl + '#env_' + that.options['browserActionWindowId']) && details.url.indexOf('hover_1') === -1) {
                    // BrowserService.setBrowserActionPopUp('', details.tabId);
                    that.updateBrowserAction(true, details.tabId);
                }
                if (details.tabId !== -1 && !that.pref.get(['ss', 'tabs', details.tabId])) that.pref.set(['ss', 'tabs', details.tabId], {});
            }, { urls: [that.newTabUrl], types: ['main_frame'] });
            _BrowserService2.default.tabsOnActivated(function (activeInfo) {
                that.pref.set(['ss', 'activatedTab', activeInfo.windowId], activeInfo.tabId);
            });
            _BrowserService2.default.tabsOnRemoved(function (tabId, removeInfo) {
                var tabs = that.pref.get(['ss', 'tabs']);
                delete tabs[tabId];
                that.pref.set(['ss', 'tabs'], tabs);
            });
            _BrowserService2.default.tabsOnUpdated(function (tabId, changeInfo, tab) {
                if (changeInfo.status === 'complete') {
                    if (that.options['securedSearch'] && new RegExp(_Consts.YAHOO_SERP_REGEX).test(tab.url)) {
                        _BrowserService2.default.tabsInsertCSS(tabId, {
                            file: 'content/scripts/search.css',
                            allFrames: true
                        }, function () {
                            _BrowserService2.default.tabsExecuteScript(tabId, {
                                code: '(' + function () {
                                    return [].slice.call(document.querySelectorAll('li .algo .title a')).map(function (a) {
                                        return a.href;
                                    }).concat([].slice.call(document.querySelectorAll('li:not(.first) .compTitle :not(.title) a[referrerpolicy="unsafe-url"]')).map(function (a) {
                                        return a.innerText;
                                    }), [].slice.call(document.querySelectorAll('a[class*=domainLink]')).map(function (a) {
                                        return a.innerText;
                                    }));
                                }.toString() + ')();',
                                runAt: 'document_start',
                                allFrames: true
                            }, function (results) {
                                var _ref;

                                var urls = results && (0, _Utils.removeDuplicatesInArray)((_ref = []).concat.apply(_ref, _toConsumableArray(results)));
                                if (urls) {
                                    that.getUrlsData(urls, true, function (results) {
                                        var badResults = that.updateResults(tabId, results);
                                        that.updateBrowserAction(false, tabId, badResults);
                                        Object.keys(results).forEach(function (url) {
                                            if (results[url]['status'] !== 'ok' && that.isWhiteListed(url)) results[url]['status'] = 'ok';
                                        });
                                        _BrowserService2.default.tabsExecuteScript(tabId, {
                                            code: 'window["ClqBKCaJtv"] = ' + JSON.stringify(_assign({
                                                id: _BrowserService2.default.id(),
                                                results: results,
                                                fullURL: that.options['fullURL'],
                                                tabId: tabId,
                                                displayRedShields: true,
                                                displayGreenShields: true,
                                                newTabUrl: that.newTabUrl
                                            }, that.options['securedSearch'])) + ';',
                                            runAt: 'document_idle',
                                            allFrames: true
                                        }, function () {
                                            _BrowserService2.default.tabsExecuteScript(tabId, {
                                                file: 'content/scripts/search.js',
                                                runAt: 'document_idle',
                                                allFrames: true
                                            }, function () {});
                                        });
                                    });
                                }
                            });
                        });
                    } else if (that.options['securedBrowsing'] && new RegExp('^https?://').test(tab.url)) {
                        _BrowserService2.default.tabsExecuteScript(tabId, {
                            code: '(' + function () {
                                var reg = new RegExp('^https?://');
                                return [].slice.call(document.querySelectorAll('a[href]')).filter(function (a) {
                                    return reg.test(a);
                                }).map(function (a) {
                                    return a.href;
                                });
                            }.toString() + ')();',
                            runAt: 'document_idle',
                            allFrames: true
                        }, function (results) {
                            var _ref2;

                            var urls = results && (0, _Utils.removeDuplicatesInArray)((_ref2 = []).concat.apply(_ref2, _toConsumableArray(results)).map(that.url.bind(that))).slice(0, that.options['securedBrowsing']['scanUrlsAmount'] || 100);
                            if (urls) {
                                that.getUrlsData(urls, true, function (results) {
                                    results = that.updateResults(tabId, results);
                                    that.updateBrowserAction(that.pref.get(['ss', 'tabs', tabId, 'blocked']) || false, tabId, results);
                                });
                            }
                        });
                    }
                    _EventsService2.default.trigger(_Consts.TAB_LOAD_COMPLETED_EVENT, [{ tabId: tabId.toString() }]);
                }
                if (that.options['securedSearch'] && new RegExp(_Consts.YAHOO_SERP_REGEX).test(tab.url) || that.options['securedBrowsing'] && new RegExp('^https?://').test(tab.url)) that.updateBrowserAction(that.pref.get(['ss', 'tabs', tab.id, 'blocked']), tab.id);
            });
            _EventsService2.default.on(_Consts.ALLOW_FOR_X_MS_CLICKED_EVENT, function (args) {
                var tabId = parseInt(args['tabId']);
                that.pref.set(['ss', 'urls_whitelist', that.url(args['url'])], new Date().getTime() + (args['ms'] || 1800000));
                that.pref.set(['ss', 'tabs', tabId, 'whitelisted'], true);
                if (args['method'] === 'updateTab') _BrowserService2.default.updateTab(tabId, args['overrideUrl'] || args['url']);else _EventsService2.default.trigger('REPLACE_LOCATION', { location: args['overrideUrl'] || args['url'] }, false, tabId);
            }, true);
            _EventsService2.default.on(_Consts.ALLOW_PERMANENTLY_CLICKED_EVENT, function (args) {
                var tabId = parseInt(args['tabId']);
                that.pref.set(['ss', 'urls_whitelist', that.url(args['url'])], 'p');
                that.pref.set(['ss', 'tabs', tabId, 'whitelisted'], true);
                if (args['method'] === 'updateTab') _BrowserService2.default.updateTab(tabId, args['overrideUrl'] || args['url']);else _EventsService2.default.trigger('REPLACE_LOCATION', { location: args['overrideUrl'] || args['url'] }, false, tabId);
            }, true);
            // if(!this.options['fullURL']){
            //
            // }
            if (this.options['extensionDefense']) {
                var checkExtensions = function checkExtensions(extensionsInfo) {
                    that.getExtensionsData(Object.keys(extensionsInfo), function (results) {
                        for (var id in results) {
                            if (results.hasOwnProperty(id) && results[id].status !== 'ok') {
                                _BrowserService2.default.managementSetEnabled(id, false);
                            }
                        }
                    });
                };

                _BrowserService2.default.managementGetAll(function (extensionsInfo) {
                    var extensions = {};
                    extensionsInfo.forEach(function (extensionInfo) {
                        if (extensionInfo.id !== _BrowserService2.default.id() && extensionInfo.enabled) extensions[extensionInfo.id] = extensionInfo;
                    });
                    var ids = Object.keys(extensions);
                    if (ids.length > 0) {
                        checkExtensions(extensions);
                    }
                });
                _BrowserService2.default.managementOnInstalled(function (extensionInfo) {
                    var extensions = {};
                    extensions[extensionInfo.id] = extensionInfo;
                    checkExtensions(extensions);
                });
                _BrowserService2.default.managementOnEnabled(function (extensionInfo) {
                    var extensions = {};
                    extensions[extensionInfo.id] = extensionInfo;
                    checkExtensions(extensions);
                });
            }
            if (that.options['securedSearch']) _BrowserService2.default.tabsQuery({}, function (tabs) {
                for (var i in tabs) {
                    var tab = tabs[i];
                    if (new RegExp(_Consts.YAHOO_SERP_REGEX).test(tab.url)) {
                        _BrowserService2.default.tabsExecuteScript(tab.id, {
                            code: '(' + function () {
                                document.querySelectorAll('iframe').forEach(function (e) {
                                    var clone = e.cloneNode();
                                    e.parentNode.appendChild(clone);
                                    e.parentNode.removeChild(e);
                                });
                            }.toString() + ')();',
                            runAt: 'document_start',
                            allFrames: true
                        }, function () {});
                    }
                }
            });
        }
    }, {
        key: 'updateBrowserAction',
        value: function updateBrowserAction(blocked, tabId, results) {
            // BrowserService.setBrowserActionPopUp(this.options['browserActionPopupUrl'], tabId);
            if (blocked) {
                _BrowserService2.default.setBrowserActionIcon('content/images/bsb/icons/icon-red.svg', tabId);
            }
            if (results && Object.keys(results).length > 0) {
                _BrowserService2.default.setBrowserActionBadgeBackgroundColor('#ff0000', tabId);
                _BrowserService2.default.setBrowserActionBadgeText(Object.keys(results).length.toString(), tabId);
            } else _BrowserService2.default.setBrowserActionBadgeText('', tabId);
        }
    }, {
        key: 'getUrlsData',
        value: function getUrlsData(urls, online, cb) {
            var _this = this;

            return this.getData('urls', urls.map(function (url) {
                return _this.url(url);
            }), online, cb);
        }
    }, {
        key: 'getExtensionsData',
        value: function getExtensionsData(ids, cb) {
            return this.getData('extensions', ids, true, cb);
        }
    }, {
        key: 'getData',
        value: function getData(type, keys, online, cb) {
            var that = this;
            var list = this.pref.get(['ss', type + '_list']) || [];
            var missing = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var status = this.pref.get(['ss', type, key, 'status']);
                if (typeof status === 'undefined') {
                    missing.push(key);
                } else {
                    var expired = new Date().getTime() - (this.pref.get(['ss', type, key, 'ts']) || 0) > this.options['cacheTimeLimit'];
                    if (expired) {
                        missing.push(key);
                    }
                    var ind = list.indexOf(key);
                    if (ind !== -1) {
                        list.unshift(list.splice(ind, 1)[0]);
                    }
                }
            }
            this.pref.set(['ss', type + '_list'], list);

            function handleNewData(newData) {
                if (newData) {
                    var _list = that.pref.get(['ss', type + '_list']);
                    var data = that.pref.get(['ss', type]);
                    for (var _key in newData) {
                        if (newData.hasOwnProperty(_key)) {
                            if (_list.indexOf(_key) === -1) {
                                if (_list.unshift(_key) > that.options['cacheSizeLimit']) delete data[_list.pop()];
                            }
                            data[_key] = _assign({ ts: new Date().getTime() }, newData[_key]);
                        }
                    }
                    that.pref.set(['ss', type + '_list'], _list);
                    that.pref.set(['ss', type], data);
                }
            }

            function getData() {
                var data = {};
                for (var _i = 0; _i < keys.length; _i++) {
                    var _key2 = keys[_i];
                    data[_key2] = that.pref.get(['ss', type, _key2]) || { status: 'ok' };
                }
                return data;
            }

            if (typeof cb !== 'undefined') {
                if (online && missing.length > 0) _HttpService2.default.doPostJSON(this.options['endpoint_' + type] + '?uid=' + (that.pref.get(['xlp_pers_guid']) || that.pref.get(['guid'])), missing, function (newData) {
                    handleNewData(newData);
                    cb(getData());
                }, null, null, null, true);else cb(getData());
            } else {
                if (online && missing.length > 0) {
                    var newData = _HttpService2.default.doPostJSON(this.options['endpoint_' + type] + '?uid=' + (that.pref.get(['xlp_pers_guid']) || that.pref.get(['guid'])), missing, null, null, null, null, false);
                    handleNewData(newData);
                }
                return getData();
            }
        }
    }]);

    return SecuredService;
}();

var ss = new SecuredService();
exports.default = ss;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = __webpack_require__(0);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Utils = __webpack_require__(2);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Consts = __webpack_require__(1);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var md5 = __webpack_require__(16);

var ListManager = function () {
    function ListManager() {
        _classCallCheck(this, ListManager);

        this.listManager = {};
        this.lsPrefix = 'listManager_';
    }

    _createClass(ListManager, [{
        key: 'initList',
        value: function initList(config, _list) {
            var _this = this;

            return new Promise(function (resolve, reject) {
                try {
                    if (!(0, _Utils.isObject)(config)) reject('config_invalid');
                    var listName = config['listName'];
                    var check = _this.listManager[listName] && _typeof(_this.listManager[listName]['list']) === 'object';
                    if (check && _this.listManager[listName]['config'] && !_list) {
                        resolve(listName);
                        return;
                    }
                    var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var resolver = function resolver(listName) {
                        var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                        var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                        var existData = pref.get('' + _this.lsPrefix + listName) || {
                            config: config,
                            status: { current: '', history: [] }
                        };
                        var existList = pref.get(listName);
                        if ((0, _Utils.isArray)(existList)) {
                            //todo remove
                            //hotfix to remove broken lists
                            if ((0, _Utils.isObjectEmpty)(existList) || (0, _Utils.isArray)(existList[0])) {
                                //do nothing
                            } else {
                                var order = config.addNewListOrder || 'default';
                                switch (order) {
                                    case 'first':
                                        {
                                            list = [].concat(_toConsumableArray(list), _toConsumableArray(existList));
                                            break;
                                        }
                                    default:
                                        {
                                            list = [].concat(_toConsumableArray(existList), _toConsumableArray(list));
                                        }
                                }
                            }
                        }
                        // remove simple duplicates
                        list = (0, _Utils.removeDuplicatesInArray)(list);
                        // remove duplicates by inner value
                        if (config['masterIdPath'] && (0, _Utils.isArray)(list) && list[0]) {
                            if (!(0, _Utils.isUndef)((0, _Utils.getDeepValueFromObj_V2)(list[0], config['masterIdPath']))) list = (0, _Utils.removeDuplicatesObjectsInArrayByKey)(list, config['masterIdPath']);else if ((0, _Utils.isObject)(list[0]) && list[0]['id']) {
                                list = (0, _Utils.removeDuplicatesObjectsInArrayByKey)(list, ['id']);
                            }
                        }

                        var maxItems = config['maxItems'] || 100;
                        list.length = maxItems && list.length > maxItems ? maxItems : list.length;

                        _this.listManager[listName] = _assign({ list: list }, existData);
                        _this.listManager[listName]['status']['lastFetch'] = new Date().getTime();
                        var ready = [];
                        if (config['masterIdPath']) {
                            for (var it in list) {
                                var item = list[it];
                                var id = item['id'] || (0, _Utils.getDeepValueFromObj)(item, config['masterIdPath']) || md5(JSON.stringify(item));
                                ready.push(id);
                            }
                            ready = (0, _Utils.removeDuplicatesInArray)(ready);
                        }
                        _this.listManager[listName]['status']['ready'] = ready;
                        pref.set('' + _this.lsPrefix + listName, {
                            config: _this.listManager[listName]['config'],
                            status: _this.listManager[listName]['status']
                        });
                        if (config['lsKey']) {
                            pref.set(config['lsKey'], list);
                        }
                        resolve(listName);
                    };

                    var list = _list ? _list : check ? _this.listManager[listName]['list'] : false;
                    if (list) {
                        resolver(listName, list, config);
                    } else if (config['lsKey']) {
                        list = pref.get(config['lsKey']);
                        list = (0, _Utils.isArray)(list) ? list : [];
                        resolver(listName, list, config);
                    } else {
                        resolver(listName, null, config);
                    }
                } catch (e) {
                    reject(e);
                }
            });
        }
    }, {
        key: 'minItemsCheck',
        value: function minItemsCheck(listName) {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                try {
                    if (!listName || !_this2.listManager[listName]) reject('listName_invalid');
                    var config = _this2.listManager[listName]['config'];
                    var minItems = config['minItems'];
                    if (!config['notEnoughItemsEvent']) {
                        resolve(listName);
                        return;
                    }
                    var list = _this2.listManager[listName]['list'];
                    var listLength = list.length;
                    if (minItems && listLength <= minItems) {
                        _EventsService2.default.trigger(config['notEnoughItemsEvent']);
                    }
                    var minInterval = config['minFetchInterval'];
                    var lastFetch = _this2.listManager[listName]['status']['lastFetch'];
                    if (!minInterval || !lastFetch) {
                        resolve(listName);
                        return;
                    }
                    if (lastFetch + minInterval <= new Date().getTime()) {
                        _EventsService2.default.trigger(config['notEnoughItemsEvent']);
                    }

                    resolve(listName);
                } catch (e) {
                    reject(e);
                }
            });
        }
    }, {
        key: 'getItemFromList',
        value: function getItemFromList(listName) {
            var _this3 = this;

            var requestArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return new Promise(function (resolve, reject) {
                try {
                    if (!listName || !_this3.listManager[listName]) {
                        reject('listName_invalid');
                        return;
                    }
                    var numOfItems = parseInt(requestArgs['numOfItems']) || 1;
                    var currentPage = requestArgs['state'] && requestArgs['state']['currentPage'] ? requestArgs['state']['currentPage'] : 0;
                    var returnPreviousPages = requestArgs['returnPreviousPages'] || false;
                    var requestedPage = requestArgs['requestedPage'] || 'random'; //random/previous/next/first/last/number
                    var reverseOrder = requestArgs['reverseOrder'] || false;

                    var config = _assign({}, _this3.listManager[listName]['config'], requestArgs.config);
                    var status = _this3.listManager[listName]['status'];
                    var originalList = _this3.listManager[listName]['list'];
                    if (!originalList || (0, _Utils.isObjectEmpty)(originalList)) {
                        reject('listIsEmpty');
                        return;
                    }
                    var list = originalList.slice(0);
                    if (reverseOrder) list.reverse();
                    var pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                    var page = currentPage;
                    var maxPage = Math.ceil(list.length / numOfItems) - 1;
                    if (requestedPage === 'random') {
                        while (page === currentPage) {
                            page = (0, _Utils.getRandomIntInclusive)(0, maxPage);
                        }
                    } else if (requestedPage === 'next') page = Math.min(currentPage + 1, maxPage);else if (requestedPage === 'previous') page = Math.max(0, currentPage - 1);else if (requestedPage === 'first') page = 0;else if (requestedPage === 'last') page = maxPage;else {
                        var num = parseInt(requestedPage);
                        if (typeof num === 'number') page = Math.max(0, Math.min(num, maxPage));else {
                            reject('invalid requestedPage');
                            return;
                        }
                    }
                    var items = void 0;
                    if (returnPreviousPages) items = list.splice(0, (page + 1) * numOfItems);else items = list.splice(page * numOfItems, numOfItems);

                    if (config['deleteCurrent'] && list.length > 0) {
                        originalList = list;
                        if (config['lsKey']) pref.set(config['lsKey'], list);
                    }
                    status['history'].concat(items);
                    items = requestArgs['numOfItems'] ? items : items[1];
                    status['history'] = (0, _Utils.removeDuplicatesInArray)(status['history']);
                    if (config['maxHistory']) {
                        status['history'] = status['history'].slice(-config['maxHistory']);
                    }
                    pref.set('' + _this3.lsPrefix + listName, {
                        config: _this3.listManager[listName]['config'],
                        status: _this3.listManager[listName]['status']
                    });
                    config['eventObject'] = _Utils.isObject[config['eventObject']] ? config['eventObject'] : {};
                    var eventData = (0, _Utils.insertDeepValueToObj)(config['eventObject'], config['eventObjectDataPath'], items);
                    eventData.state = { currentPage: page };
                    var tabId = false;
                    if (config['returnEventOnlyToOrigin']) {
                        if ((0, _Utils.isObject)(requestArgs.sender) && (0, _Utils.isObject)(requestArgs.sender.tab) && requestArgs.sender.tab.id) {
                            tabId = requestArgs.sender.tab.id;
                        }
                    }
                    _EventsService2.default.trigger(config['eventName'], [_assign({}, eventData, { requestFrom: requestArgs.sender || {} })], false, tabId);
                    resolve(items);
                } catch (e) {
                    reject(e);
                }
            });
        }
    }]);

    return ListManager;
}();

var service = new ListManager();
exports.default = service;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _BrowserService = __webpack_require__(9);

var _BrowserService2 = _interopRequireDefault(_BrowserService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _Utils = __webpack_require__(2);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _StorageService = __webpack_require__(17);

var _StorageService2 = _interopRequireDefault(_StorageService);

var _Consts = __webpack_require__(1);

var _Actions = __webpack_require__(19);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var SearchService = function () {
    function SearchService(config) {
        _classCallCheck(this, SearchService);

        try {
            this.reloadSearchConfig(config, false);
        } catch (e) {
            _LoggerService2.default.track('error', 'reloadSearchConfig90: ' + e.message);
        }
    }

    _createClass(SearchService, [{
        key: 'reloadSearchConfig',
        value: function reloadSearchConfig(conf, searchComp) {
            var config = null;
            if (searchComp) {
                if (conf['id'] === 'extension') {
                    for (var i in conf['components']) {
                        if (conf['components'][i]['id'] === 'commonComponents') {
                            for (var j in conf['components'][i]['components']) {
                                if (conf['components'][i]['components'][j]['id'] === 'SearchService') {
                                    config = conf['components'][i]['components'][j];
                                }
                            }
                        }
                    }
                }
            } else {
                config = conf;
            }

            if (config.properties) {
                this.pref = _ServiceFactory2.default.get(_Consts.PREFERENCES_SERVICE);
                this.StorageService = _StorageService2.default;
                this.browser = _BrowserService2.default;
                this.track = _ServiceFactory2.default.get(_Consts.TRACKING_SERVICE);
                this.config = _assign({}, config.properties);
                this.behaviours = config.behaviours;
                this.enginesIndex = {};
                this.relevantEngines = [];
                this.config.sengineTemp = false;
                this.lastTimeEngineChanged = new Date().getTime();
                this.timeOutToResetNonePersistEngine = this.config.timeOutToResetNonePersistEngine ? this.config.timeOutToResetNonePersistEngine : 60000;

                var _j = 0;
                for (var _i = 0; _i < Object.keys(this.config.engines).length; _i++) {
                    if (this.config.engines[_i].id && (this.config.engines[_i].active || !this.config.engines[_i].hasOwnProperty('active'))) {
                        this.relevantEngines[_j] = this.config.engines[_i];
                        this.enginesIndex[this.config.engines[_i].id] = _j;
                        _j++;
                    }
                }
                this.config.engines = this.relevantEngines;

                this.StorageService.set(_Consts.ENGINES_KEY, JSON.stringify(this.relevantEngines));

                var selectedEngine = this.pref.get(_Consts.SELECTED_SEARCH_ENGINE_KEY);
                try {
                    selectedEngine = this.StorageService.get(_Consts.SELECTED_SEARCH_ENGINE_KEY);
                } catch (e) {
                    _LoggerService2.default.track('error', 'SearchService90: ' + e.message);
                }

                if (selectedEngine) {
                    var engineExist = false;

                    for (var _i2 = 0; !engineExist && _i2 < this.config.engines.length; _i2++) {
                        if (this.config.engines[_i2].id === selectedEngine) {
                            engineExist = true;
                        }
                    }

                    if (this.config.forceRecalculateOncePerNewConfig) {
                        //check if calc not been done already
                        var configId = this.pref.get(_Consts.CONFIG_ID_KEY);
                        if (configId) {
                            var doneAlready = this.pref.get('' + _Consts.RECALCULATE_ENGINE_PREFIX + configId);
                            if (!doneAlready) {
                                this.pref.set('' + _Consts.RECALCULATE_ENGINE_PREFIX + configId, true);
                                engineExist = false;
                            }
                        }
                    }

                    if (!engineExist) {
                        this.pref.set(_Consts.SELECTED_SEARCH_ENGINE_KEY, undefined);
                        selectedEngine = undefined;
                    }
                }

                this.setSelectedSearchCategory(this.config.selectedCategory);
                this.setCurrentSearchEngine(selectedEngine || this.getSearchEngineSortedByMarket(this.config)[0].id, true);
                _Actions.register.bind(this)(this.behaviours);
            }

            this.searchStrings = {};
            this.searchObjects = {};
        }
    }, {
        key: 'setSearchString',
        value: function setSearchString(id, string) {
            this.searchStrings[id] = string;
        }
    }, {
        key: 'setSearchObject',
        value: function setSearchObject(id, object) {
            this.searchObjects[id] = object;
        }
    }, {
        key: 'getSelectedSearchCategory',
        value: function getSelectedSearchCategory() {
            return this.config.selectedCategory;
        }
    }, {
        key: 'getCurrentEngine',
        value: function getCurrentEngine() {
            return this.config.engines[this.getCurrentSearchEngineIndex()];
        }
    }, {
        key: 'getTempOrCurrentSearchEngine',
        value: function getTempOrCurrentSearchEngine() {
            return this.config.engines[this.getTempOrCurrentSearchEngineIndex()];
        }
    }, {
        key: 'getCurrentSearchEngineIndex',
        value: function getCurrentSearchEngineIndex() {
            return this.enginesIndex[this.getSelectedEngineId()];
        }
    }, {
        key: 'getTempOrCurrentSearchEngineIndex',
        value: function getTempOrCurrentSearchEngineIndex() {
            var engine = this.pref.get(_Consts.TEMP_SEARCH_ENGINE_KEY) && this.pref.get(_Consts.TEMP_SEARCH_ENGINE_KEY) != '' ? this.pref.get(_Consts.TEMP_SEARCH_ENGINE_KEY) : this.pref.get(_Consts.SELECTED_SEARCH_ENGINE_KEY);
            return this.enginesIndex[engine];
        }
    }, {
        key: 'getEngineIdByIndex',
        value: function getEngineIdByIndex(engineIndex) {
            for (var key in this.enginesIndex) {
                if (this.enginesIndex[key] == engineIndex) {
                    return key;
                }
            }
        }
    }, {
        key: 'getSuggestParam',
        value: function getSuggestParam(engineId) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
            var param = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'url';

            try {
                var defaultEngine = this.getCurrentEngine(),
                    tempEngine = false,
                    suggestUrl = '';

                if (engineId) {
                    tempEngine = this.getEngineById(engineId);
                }

                var engineHaveSuggest = function engineHaveSuggest(engine) {
                    try {
                        if (!(0, _Utils.isObject)(engine)) return false;
                        if (Array.isArray(engine.suggestUrls) && !(0, _Utils.isObjectEmpty)(engine.suggestUrls)) {
                            if ((0, _Utils.isObject)(engine.suggestUrls[0]) && engine.suggestUrls[0]['url']) return true;
                        }
                        return !!engine.suggestUrl;
                    } catch (e) {
                        _LoggerService2.default.track('error', 'engineHaveSuggest: ' + e.message);
                    }
                };

                var getTheMostRelevantSuggestParam = function getTheMostRelevantSuggestParam(engine) {
                    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
                    var param = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'url';

                    try {
                        if (!engine) return '';
                        var suggestUrls = engine.suggestUrls,
                            suggestUrlsMap = engine.suggestUrlsMap;
                        if (Array.isArray(suggestUrls) && !(0, _Utils.isObjectEmpty)(suggestUrls)) {
                            if ((0, _Utils.isObject)(suggestUrlsMap)) {
                                if (suggestUrlsMap[type] && (0, _Utils.isObject)(suggestUrls[suggestUrlsMap[type]]) && suggestUrls[suggestUrlsMap[type]][param]) return suggestUrls[suggestUrlsMap[type]][param];
                                if (suggestUrlsMap['default'] && (0, _Utils.isObject)(suggestUrls[suggestUrlsMap['default']]) && suggestUrls[suggestUrlsMap['default']][param]) return suggestUrls[suggestUrlsMap['default']][param];
                                if ((0, _Utils.isObject)(suggestUrls[0]) && suggestUrls[0][param]) return suggestUrls[0][param];
                            }
                        }
                        if (param === 'url') {
                            if (engine.suggestUrl) return engine.suggestUrl;
                            return '';
                        } else {
                            return false;
                        }
                    } catch (e) {
                        _LoggerService2.default.track('error', 'getTheMostRelevantSuggestParam: ' + e.message);
                    }
                };

                var engine = engineHaveSuggest(tempEngine) ? tempEngine : engineHaveSuggest(defaultEngine) ? defaultEngine : false;
                if (!engine) {
                    return suggestUrl;
                }
                return getTheMostRelevantSuggestParam(engine, type, param);
            } catch (e) {
                _LoggerService2.default.track('error', 'getSuggestParam: ' + e.message);
            }
        }
    }, {
        key: 'getSelectedEngineId',
        value: function getSelectedEngineId() {
            return this.pref.get(_Consts.SELECTED_SEARCH_ENGINE_KEY);
        }
    }, {
        key: 'getTempEngineId',
        value: function getTempEngineId() {
            return this.config.sengineTemp ? this.config.sengineTemp : false;
        }
    }, {
        key: 'setCurrentSearchEngineIndex',
        value: function setCurrentSearchEngineIndex(engineIndex) {
            this.setCurrentSearchEngine(this.config.engines[engineIndex].id);
        }
    }, {
        key: 'getSearchEngineSortedByMarket',
        value: function getSearchEngineSortedByMarket(config) {
            var mntEngines = [];
            var nonMntEngines = [];

            // separate config.engines into two different array; 1. list of monetized engines 2. list of non-monetized engines
            for (var i = 0; i < Object.keys(config.engines).length; i++) {
                if (config.engines[i].monetized && this.isEngineMarket(config.engines[i])) {
                    mntEngines.push(config.engines[i]);
                } else {
                    nonMntEngines.push(this.config.engines[i]);
                }
            }

            // Sort the monetized engines by priority
            mntEngines.sort(function (a, b) {
                return a.priority >= b.priority ? 1 : b.priority > a.priority ? -1 : 0;
            });

            // Sort the non-monetized engines by priority
            nonMntEngines.sort(function (a, b) {
                return a.priority >= b.priority ? 1 : b.priority > a.priority ? -1 : 0;
            });

            // Combining both list into one
            mntEngines = mntEngines.concat(nonMntEngines);

            return mntEngines.length === 0 ? config.engines : mntEngines;
        }
    }, {
        key: 'setCurrentSearchEngine',
        value: function setCurrentSearchEngine(engineId, forceDS) {
            // this.config.sengine = engineId;
            // this.pref.set(SELECTED_SEARCH_ENGINE_KEY, engineId);
            // this.pref.set(TEMP_SEARCH_ENGINE_KEY, "");
            this.lastTimeEngineChanged = new Date().getTime();
            if (this.isEnginePersist(engineId) || forceDS) {
                this.config.sengine = engineId;
                this.pref.set(_Consts.SELECTED_SEARCH_ENGINE_KEY, engineId);
                this.resetTempEngine();
            } else {
                this.config.sengineTemp = engineId;
                this.pref.set(_Consts.TEMP_SEARCH_ENGINE_KEY, engineId);
                this.checkIfNeededToResetTemp(this.timeOutToResetNonePersistEngine);
            }
        }
    }, {
        key: 'checkIfNeededToResetTemp',
        value: function checkIfNeededToResetTemp(timeDiff) {
            if (!timeDiff) {
                this.resetTempEngine();
                return;
            }
            var that = this;
            setTimeout(function () {
                var now = new Date().getTime();
                if (timeDiff <= now - that.lastTimeEngineChanged) {
                    that.resetTempEngine();
                }
            }, timeDiff + 100);
        }
    }, {
        key: 'resetTempEngine',
        value: function resetTempEngine() {
            this.config.sengineTemp = false;
            this.pref.set(_Consts.TEMP_SEARCH_ENGINE_KEY, '');
        }
    }, {
        key: 'setSelectedSearchCategory',
        value: function setSelectedSearchCategory(category) {
            this.config.selectedCategory = category;
            this.pref.set(_Consts.SELECTED_SEARCH_CATEGORY_KEY, category);
        }
    }, {
        key: 'getEngines',
        value: function getEngines() {
            return this.config.engines;
        }
    }, {
        key: 'getEngineById',
        value: function getEngineById(engineId) {
            var enginesArr = this.getEngines();
            for (var i = 0; i < enginesArr.length; i++) {
                if (enginesArr[i].id === engineId) return enginesArr[i];
            }
        }
    }, {
        key: 'doSearch',
        value: function doSearch(searchString, asset, url, newTab, implementSearchString) {
            var searchObject = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

            if (searchString == '' || searchString === null || searchString === undefined) {
                return;
            }
            implementSearchString = typeof implementSearchString !== 'undefined' ? implementSearchString : true;

            var searchUrl = void 0;
            if (!(0, _Utils.isUndef)(url) && url && url !== 'none') {
                if (url.indexOf('{searchTerms}') > -1) {
                    searchUrl = url.replace('{searchTerms}', searchString);
                } else if (implementSearchString) {
                    searchUrl = url + searchString;
                } else {
                    searchUrl = url;
                }
            } else {
                searchUrl = this.getSearchUrl(searchString, asset);
            }

            if (!searchUrl) return;
            _EventsService2.default.trigger(_Consts.ON_SEARCH_EVENT);

            function redirectWindow() {
                document.location.href = searchUrl;
            }

            function openNewTab() {
                _BrowserService2.default.createTab(function () {}, searchUrl);
            }

            var done = false;

            function openUrlManager() {
                if (done) return;
                done = true;
                if (typeof newTab !== 'undefined' && newTab === true) {
                    openNewTab();
                } else {
                    redirectWindow();
                }
            }

            if (!searchObject.tracking) {
                try {
                    if (asset === 'hp') {
                        this.track.trackStatusEvent('search-hp', this.config.sengineTemp || null, null, openUrlManager, null, openUrlManager);
                    } else if (asset === 'tb') {
                        this.track.trackStatusEvent('search-tb', this.config.sengineTemp || null, null, openUrlManager, null, openUrlManager);
                    } else if (asset === 'ntsm') {
                        this.track.trackStatusEvent('search-ntsm', this.config.sengineTemp || null, null, openUrlManager, null, openUrlManager);
                    } else if (asset === 'bac') {
                        this.track.trackStatusEvent('search-bac', this.config.sengineTemp || null, null, openUrlManager, null, openUrlManager);
                    } else if (asset !== 'ds') {
                        this.track.trackStatusEvent('search-nt', this.config.sengineTemp || null, null, openUrlManager, null, openUrlManager);
                    } else {
                        this.track.trackStatusEvent('search-ob', null, null, openUrlManager, null, openUrlManager);
                    }
                } catch (e) {
                    this.track.trackStatusEvent('error', e.message, '@search-form');
                }
                setTimeout(openUrlManager, 500);
            } else {
                _EventsService2.default.trigger(_Consts.GENERIC_TRACKING_REQUEST, [searchObject]);
                openUrlManager();
            }
        }
    }, {
        key: 'getAvailableSearchSource',
        value: function getAvailableSearchSource(engine, desiredSearchCategory) {
            if (this.shouldMonetized(engine.monetized) && engine[desiredSearchCategory]) return desiredSearchCategory;else if (engine['nm_' + desiredSearchCategory]) return 'nm_' + desiredSearchCategory;else if (engine[desiredSearchCategory]) return desiredSearchCategory;else if (this.shouldMonetized(engine.monetized) && engine['searchUrl']) return 'searchUrl';else if (engine['nm_searchUrl']) return 'nm_searchUrl';else return 'searchUrl';
        }
    }, {
        key: 'getEngine',
        value: function getEngine() {
            return this.getTempEngineId() ? this.getEngineById(this.getTempEngineId()) : this.getCurrentEngine();
        }
    }, {
        key: 'getSearchUrl',
        value: function getSearchUrl(searchString) {
            var asset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ds';

            var query = searchString;
            var locale = _BrowserService2.default.locale();
            var engine = this.getEngine();
            engine.version = (0, _Utils.isObject)(engine) && engine.hasOwnProperty('version') ? engine.version : 1;
            var searchUrl = void 0;
            var category = this.config.selectedCategory;
            locale = locale.replace('_', '-');

            if (query.trim().length > 0 || engine.searchForm == null) {
                query = encodeURIComponent(query);
                var sUrl = engine.searchUrl;
                try {
                    var urlSource = category === 'web' ? 'searchUrl' : category;
                    urlSource = this.getAvailableSearchSource(engine, urlSource);
                    sUrl = engine[urlSource];
                    var ycc = this.getEngineSubDomain() || '';
                    // CC remover by configuration
                    if (engine && engine.removeCCByCategories && _typeof(engine.removeCCByCategories) === 'object') {
                        if (engine.removeCCByCategories.hasOwnProperty(category)) {
                            for (var i = 0; i < engine.removeCCByCategories[category].length; i++) {
                                if (engine.removeCCByCategories[category][i].toLowerCase() === ycc.toLowerCase()) {
                                    ycc = '';
                                }
                            }
                        }
                        //fallback for backward compatibility - yahoo does not have subdomain .us for images and videos
                    } else if (engine.id === 'yahoo' && (category === 'images' || category === 'videos')) {
                        ycc = ycc.toLowerCase() === 'us.' ? '' : ycc;
                        ycc = ycc.toLowerCase() === 'us' ? '' : ycc;
                    }

                    //Support old config, when monetized yahoo didnt have ycc //TODO: Remove when possible
                    sUrl = engine.id === 'yahoo' && urlSource === 'searchUrl' && sUrl.indexOf('{{ycc}}') === -1 ? 'https://' + ycc + '.search.yahoo.com/yhs/search?hspart=itm&hsimp=yhs-001&type=' + this.pref.get('aflt') + '&p={searchTerms}' : sUrl;

                    if (engine.yccWithDotsAround) {
                        sUrl = sUrl.replace('{{ycc}}', ycc || '');
                    } else {
                        sUrl = sUrl.replace('{{ycc}}', ycc + '.' || '');
                    }
                    if (engine['placeHoldersFunctions']) {
                        sUrl = (0, _Utils.placeHolderFunctions)(sUrl, engine['placeHoldersFunctions'], engine, {
                            'funnel': asset,
                            'ycc': ycc
                        });
                    } else {
                        sUrl = this.buildSearchUrl(sUrl, ycc, asset);
                    }

                    // if ph does not exist, adds searchString at the end, else it will be replace at the sprintf
                    sUrl = sUrl.indexOf('{searchTerms}') === -1 ? sUrl + searchString : sUrl;
                    // in case of monetized yahoo, add url params
                    sUrl = engine.id === 'yahoo' && this.shouldMonetized(engine.monetized) && urlSource.indexOf('nm_') === -1 && engine.version < 2 ? sUrl + this.yahooParam2Beacon(asset) : sUrl;
                } catch (e) {
                    this.track.trackStatusEvent('error', e.message, new Error().lineNumber + '@getSearchUrl');
                }

                if (this.config.ISSearchEngines && this.config.ISSearchEngines.indexOf(engine.id) > -1) {
                    var lsWhiteList = { 'cd': 'cd', 'cr': 'cr', 'uref': 'uref', 'aflt': 'aflt' };
                    for (var key in lsWhiteList) {
                        sUrl = sUrl.replace('{{' + key + '}}', this.pref.get(key));
                    }
                }

                searchUrl = (0, _Utils.sprintf)(sUrl, { searchTerms: query, lang: locale });
            } else {
                searchUrl = engine.searchForm;
            }

            if (asset === 'nt') {
                this.pref.count('c.snt'); // count search query from new tab
                this.pref.markTime('act.snt'); // mark search query activity time
            }
            this.track.markActive(); // mark general user activity
            var urlObj = document.createElement('a');
            urlObj.href = searchUrl;
            if ((typeof urlObj === 'undefined' ? 'undefined' : _typeof(urlObj)) === 'object' && urlObj.host && urlObj.host.charAt(0) === '.') {
                urlObj.host = urlObj.host.substring(1);
            }
            _LoggerService2.default.debug('url: ' + urlObj.href);
            return urlObj.href;
        }
    }, {
        key: 'buildSearchUrl',
        value: function buildSearchUrl(searchString, cc, asset) {
            var replacedString = searchString.replace('{{ycc}}', cc || '').replace(/\{\{aflt\}\}/g, this.pref.get('aflt') || '').replace('{{b_aflt}}', this.pref.get(_Consts.B_AFLT_KEY) || '').replace('{{hspart}}', this.pref.get('hspart') || 'itm').replace('{{hsimp}}', this.pref.get('hsimp') || 'yhs-001').replace('{{FORM}}', asset === 'nt' || asset === 'hp' || asset === 'su' ? 'INCOH1' : 'INCOH2').replace('{{PC}}', this.pref.get('b_pc') || 'IC03').replace('{{param1}}', this.pref.get('param1') || '');

            if (replacedString.indexOf('{{YANDEX_CLID}}') > -1) {
                replacedString = replacedString.replace('{{YANDEX_CLID}}', this.yandexClidBuilder(this.getEngine()) || '');
            }
            return replacedString;
        }
    }, {
        key: 'isEngineMarket',
        value: function isEngineMarket(configEngine) {
            var cc = this.pref.get('cc').toLowerCase();
            var engine = configEngine ? configEngine : this.getCurrentEngine();
            if (!engine.countries) return true;

            return engine.countries && engine.countries.indexOf(cc) >= 0;
        }
    }, {
        key: 'shouldMonetized',
        value: function shouldMonetized(monetized) {
            return monetized && this.isEngineMarket();
        }
    }, {
        key: 'getEngineSubDomain',
        value: function getEngineSubDomain(predefinedEngine) {
            var engine = predefinedEngine ? predefinedEngine : this.getCurrentEngine();
            if (!this.isEngineMarket(engine ? engine : null)) {
                return '';
            }
            try {
                var cc = this.pref.get('cc').toLowerCase();

                if (!engine.subDomain) {
                    return '';
                }

                return engine.subDomain[cc] ? engine.subDomain[cc][_BrowserService2.default.language()] ? engine.subDomain[cc][_BrowserService2.default.language()] : engine.subDomain[cc]['def'] : 'us';
            } catch (e) {
                _LoggerService2.default.track('error', 'getEngineSubDomain: ' + e.message);
            }
        }
    }, {
        key: 'yandexClidBuilder',
        value: function yandexClidBuilder(engine) {
            var cc = '0';
            var weekCounter = 0;
            var initWW = 27;
            var initYY = 2017;
            var ww = 27;
            var yyyy = 2017;
            var aflt = this.pref.get(_Consts.AFLT_KEY);
            var clid = this.pref.get(_Consts.YANDEX_CLID);
            try {
                if (typeof clid !== 'string' || clid.includes('{{')) {
                    //still placeholder
                    clid = '2286282';
                }
                if (aflt) {
                    var afltArr = aflt.split('_');
                    yyyy = afltArr[2];
                    ww = afltArr[3];
                }

                if (yyyy < 2000) {
                    yyyy = parseFloat(yyyy) + 2000;
                }
                //count of weeks
                weekCounter = (0, _Utils.getWeekCounter)(initWW, initYY, ww, yyyy);
                // in case 3 digits, reset the counter
                while (weekCounter > 99) {
                    weekCounter -= 100;
                } // if negative weeks, zero it
                if (weekCounter < 0) weekCounter = 0;
                weekCounter = '0' + weekCounter;
                weekCounter = weekCounter.slice(-2);

                var extCC = this.pref.get('cc') ? this.pref.get('cc').toLowerCase() : false;
                if (_typeof(engine.ccMapping) === 'object' && extCC && engine.ccMapping.hasOwnProperty(extCC)) cc = engine.ccMapping[extCC];
            } catch (e) {}

            return clid + '-' + cc + weekCounter;
        }
    }, {
        key: 'yahooParam2Beacon',
        value: function yahooParam2Beacon(f, returnValueOnly) {
            var _f = this.getFunnel(f);
            var cat = this.config.selectedCategory || _Consts.SEARCH_CAT_WEB;
            var data = void 0;
            var prefParam2 = this.pref.get('param2');
            if (prefParam2 && prefParam2 != '') {
                var param2 = decodeURIComponent(prefParam2);
                if (param2.charAt(0) !== '&') {
                    param2 = '&' + param2;
                }
                if (param2.indexOf('&f=-1') >= 0) {
                    param2 = param2.replace('&f=-1', '');
                }
                param2 += '&rb=' + _BrowserService2.default.getBrowserFlavor('beacon');
                data = 'f={{f}}&ip={{ip}}&cat={{cat}}&xlp_pers_guid={{xlp_pers_guid}}&xlp_sess_guid={{xlp_sess_guid}}' + '&uref={{uref}}&abid={{abid}}&xt_abg={{xt_abg}}' + param2;
            } else {
                data = 'f={{f}}&b={{b}}&ip={{ip}}&pa={{pa}}&type={{aflt}}&cat={{cat}}&a={{aflt}}&xlp_pers_guid=' + '{{xlp_pers_guid}}&xlp_sess_guid={{xlp_sess_guid}}&uref={{uref}}&abid={{abid}}&xt_abg={{xt_abg}}';
            }

            try {
                data = data.replace(/{{aflt}}/g, this.pref.get('aflt') || '').replace('{{cat}}', cat).replace('{{f}}', _f).replace('{{pa}}', this.pref.get('pa') || 'search-manager').replace('{{os}}', _BrowserService2.default.platform()).replace('{{xlp_sess_guid}}', this.pref.get('guid') || '').replace('{{xlp_pers_guid}}', this.pref.get('xlp_pers_guid') || '').replace('{{uref}}', this.pref.get('uref') || '').replace('{{b}}', _BrowserService2.default.getBrowserFlavor('beacon')).replace('{{abid}}', this.pref.get('abid') && this.pref.get('abid') !== '{{ABTESTID}}' ? this.pref.get('abid') : '').replace('{{xt_abg}}', this.pref.get('xt_abg') && this.pref.get('xt_abg') !== '{{GROUPID}}' ? this.pref.get('xt_abg') : '');

                data = data + '&xt_ver' + this.browser.version() + '&ls_ts=' + (this.pref.get(_Consts.LS_TS_KEY) || '');
            } catch (e) {
                _LoggerService2.default.track('error', 'yahooParam2Beacon91: ' + e.message);
            }

            try {
                var geodata = this.pref.get(_Consts.GEO_DATA_KEY);
                data = data.replace('{{ip}}', geodata.ip || '');
            } catch (e) {
                _LoggerService2.default.track('error', 'yahooParam2Beacon92: ' + e.message);
            }
            if (returnValueOnly) {
                return encodeURIComponent(data);
            }
            return '&param1=1&param2=' + encodeURIComponent(data);
        }
    }, {
        key: 'isEnginePersist',
        value: function isEnginePersist(engineId) {
            var engine = this.getEngineById(engineId);
            if (engine.persistent == false) {
                return false;
            }
            return true;
        }
    }, {
        key: 'parseSuggestByConfig',
        value: function parseSuggestByConfig(responseToParse, config) {
            try {
                if (!(0, _Utils.isObject)(responseToParse) || !(0, _Utils.isObject)(config)) return responseToParse;
                var searchTermDeepLocation = config['searchTerm'];
                var parsed = [];
                var iterationDeepLocation = config['iteration'];
                var iteration = (0, _Utils.getDeepValueFromObj)(responseToParse, iterationDeepLocation);
                if (!Array.isArray(iteration)) return parsed;
                parsed[0] = (0, _Utils.getDeepValueFromObj)(responseToParse, searchTermDeepLocation);
                if ((0, _Utils.isObject)(config['filterBy'])) {
                    var filterByDeepValue = config['filterBy']['val'];
                    var filterByConditionOperator = config['filterBy']['condition']['op'];
                    var filterByConditionDeepValue = config['filterBy']['condition']['val'];
                    iteration = (0, _Utils.filterArrayDeepValueAndCondition)(iteration, filterByDeepValue, filterByConditionOperator, filterByConditionDeepValue);
                }
                if ((0, _Utils.isObject)(config['orderBy'])) {
                    var orderByDeepValue = config['orderBy']['val'];
                    var orderByPriority = config['orderBy']['order'];
                    iteration = (0, _Utils.sortArrayByDeepValueAndCondition)(iteration, orderByDeepValue, orderByPriority);
                }
                var suggestArray = [];
                for (var resObjKey in iteration) {
                    if (!iteration.hasOwnProperty(resObjKey)) continue;
                    suggestArray.push((0, _Utils.getDeepValueFromObj)(iteration[resObjKey], config['suggest']));
                }
                parsed[1] = suggestArray;
                return parsed;
            } catch (e) {
                _LoggerService2.default.track('error', 'parseSuggestByConfig: ' + e.message);
            }
        }
    }, {
        key: 'getFunnel',
        value: function getFunnel(f) {
            var funnel = 4;
            switch (f) {
                case 'nt':
                case 'tb':
                    funnel = 2;
                    break;
                case 'hp':
                    funnel = 1;
                    break;
                case 'ntsm':
                case 'bac':
                    funnel = 43;
                    break;
                case 'vc':
                    funnel = 21;
                    break;
            }
            return funnel;
        }
    }]);

    return SearchService;
}();

exports.default = SearchService;

_ComponentsFactory2.default.add(function () {
    return SearchService;
}, 'SearchService');

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExtensionService = undefined;

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _ComponentsFactory = __webpack_require__(4);

var _ComponentsFactory2 = _interopRequireDefault(_ComponentsFactory);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Actions = __webpack_require__(19);

var _Utils = __webpack_require__(2);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var ExtensionService = exports.ExtensionService = function () {
    function ExtensionService(config) {
        _classCallCheck(this, ExtensionService);

        this.config = _assign({}, config);
        this.replaceConfigFunc();
        (0, _Actions.register)(this.config.behaviours);
    }

    _createClass(ExtensionService, [{
        key: 'replaceConfigFunc',
        value: function replaceConfigFunc() {
            var extraFuncs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var extraData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            try {
                if ((0, _Utils.isArray)(this.config.placeHoldersFunctions)) {
                    var phFuncs = (0, _Utils.isArray)(extraFuncs) ? [].concat(_toConsumableArray(this.config.placeHoldersFunctions), _toConsumableArray(extraFuncs)) : this.config.placeHoldersFunctions;
                    var a = (0, _Utils.placeHolderFunctions)(this.config, phFuncs, {}, _assign({}, this.config, extraData));
                    _assign(this.config, a);
                }
            } catch (e) {
                _LoggerService2.default.debug('error', e);
            }
        }
    }]);

    return ExtensionService;
}();

_ComponentsFactory2.default.add(function () {
    return ExtensionService;
}, 'ExtensionService');

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// This file should include all the required firefox specific abilities that are available in the extension

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _assign = __webpack_require__(0);

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _Consts = __webpack_require__(1);

var Consts = _interopRequireWildcard(_Consts);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _LoggerService = __webpack_require__(8);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _ServiceFactory = __webpack_require__(3);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

var _Utils = __webpack_require__(2);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var FirefoxService = function () {
    function FirefoxService() {
        _classCallCheck(this, FirefoxService);

        if (!browser.tabs) this.noAPIs = true;
        this.isNewTabTaken = false;
        this.isHomePageTaken = false;
        this.isDefaultSearchTaken = false;
        this.browserFlavor = 'firefox';

        if (!(typeof InstallTrigger !== 'undefined' && !(window.chrome && window.chrome.app && window.chrome.app.getDetails()))) return;
        this.tabId = 0;
        this._manifest = browser.runtime.getManifest();
        this._permissions = {};
        this._version = this._manifest.version;
        this._id = browser.runtime.id;
        this._defaultSearchManifestObject = false;
        this._newTabUrl = false;
        this._homePageUrl = false;
        try {
            this._newTabUrl = this._manifest.chrome_url_overrides.newtab;
            if (this._newTabUrl) this.isNewTabTaken = true;
        } catch (e) {}
        try {
            this._defaultSearchManifestObject = this._manifest.chrome_settings_overrides.search_provider;
            if (this._defaultSearchManifestObject) this.isDefaultSearchTaken = true;
        } catch (e) {}
        try {
            this._homePageUrl = this._manifest.chrome_settings_overrides.homepage;
            if (this._homePageUrl) this.isHomePageTaken = true;
        } catch (e) {}
        try {
            var permArray = this._manifest.permissions;
            if (Array.isArray(permArray)) {
                for (var i = 0; i < permArray.length; i++) {
                    this._permissions[permArray[i]] = true;
                }
            }
        } catch (e) {}

        try {
            browser.browserAction.onClicked.addListener(function (tab) {
                _EventsService2.default.trigger(Consts.BROWSER_ACTION_CLICKED, [tab]);
                _EventsService2.default.trigger(Consts.CHROME_NEW_TAB_CLICKED, [tab]);
            });
        } catch (e) {}

        try {
            browser.contextMenus.onClicked.addListener(function () {
                var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var tab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                _EventsService2.default.trigger(Consts.BROWSER_CONTEXT_MENUS_CLICKED, [_assign({}, { info: info, tab: tab })]);
            });
        } catch (e) {}

        try {
            browser.tabs.onUpdated.addListener(function (tabId, details, tab) {
                _EventsService2.default.trigger(Consts.CHROME_TABS_ON_UPDATE, [tabId, details, tab]);
            });
        } catch (e) {}

        try {
            browser.runtime.onInstalled.addListener(function () {
                var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                _LoggerService2.default.log('browser.runtime.onInstalled');
                _LoggerService2.default.log(JSON.stringify(arguments));
                setTimeout(function () {
                    _LoggerService2.default.log(JSON.stringify(arguments));
                    _EventsService2.default.trigger(Consts.CHROME_RUNTIME_ON_INSTALLED, [e]);
                    _EventsService2.default.trigger(e.reason === 'update' ? Consts.EXTENSION_UPDATED_EVENT : Consts.EXTENSION_INSTALLED_EVENT, [e]);
                }, 1000);
            });
        } catch (e) {}
    }

    _createClass(FirefoxService, [{
        key: 'init',
        value: function init() {
            var _this = this;

            if (browser.tabs) browser.tabs.getCurrent(function (tabInfo) {
                _this.tabId = tabInfo ? tabInfo.id : 0;
            });
        }
    }, {
        key: 'getTabId',
        value: function getTabId(cb) {
            return this.tabId;
        }
    }, {
        key: 'url',
        value: function url() {
            browser.runtime.getURL('');
        }
    }, {
        key: 'id',
        value: function id() {
            return this._id;
        }
    }, {
        key: 'details',
        value: function details() {
            return this._manifest;
        }
    }, {
        key: 'id4',
        value: function id4() {
            try {
                return this._id && this._id.indexOf('{') === 0 && this._id.indexOf('}') === this._id.length - 1 ? this._id.substring(1, 5) : this._id ? this._id.substring(0, 4) : undefined;
            } catch (e) {
                return this._id ? this._id.substring(0, 4) : undefined;
            }
        }
    }, {
        key: 'version',
        value: function version() {
            return this._version;
        }
    }, {
        key: 'newTabUrl',
        value: function newTabUrl() {
            return this._newTabUrl;
        }
    }, {
        key: 'createTab',
        value: function createTab(callback, url) {
            var overrideNewtabCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var pref = _ServiceFactory2.default.get(Consts.PREFERENCES_SERVICE);
            try {
                if (url) {
                    browser.tabs.create({ url: url }, callback);
                } else if (this.isNewTabTaken || overrideNewtabCheck || pref.get(Consts.FORCE_FF_NT_KEY)) {
                    _EventsService2.default.trigger(Consts.CHROME_CREATE_TAB_EVENT);
                    var ntUrl = this._newTabUrl || this.getLocalUrl(Consts.NEWTAB_HTML) || false;
                    if (ntUrl) {
                        if (ntUrl.indexOf('#') > -1) {
                            ntUrl = ntUrl + '-ref_ext';
                        } else {
                            ntUrl = ntUrl + '#ref_ext';
                        }
                        browser.tabs.create({ url: ntUrl + '' }, callback);
                    }
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@createTabFF');
            }
        }
    }, {
        key: 'removeTab',
        value: function removeTab(tabId, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.remove(tabId, callback);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@removeTabFF');
            }
        }
    }, {
        key: 'updateTab',
        value: function updateTab(tabId, url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.update(tabId, { 'url': url }, null);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@updateTabFF');
            }
        }
    }, {
        key: 'getCurrentTabInfo',
        value: function getCurrentTabInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.getCurrent(cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentTabIdFF');
            }
        }
    }, {
        key: 'getCurrentWindowInfo',
        value: function getCurrentWindowInfo(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.windows.getCurrent(cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCurrentWindowInfoFF');
            }
        }
    }, {
        key: 'getTabInfo',
        value: function getTabInfo(tabId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.get(tabId, cb);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getTabInfoFF');
            }
        }
    }, {
        key: 'setUninstallURL',
        value: function setUninstallURL(url) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.runtime.setUninstallURL(url);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setUninstallURLFF');
            }
        }
    }, {
        key: 'getCookies',
        value: function getCookies(domain, callback, detailsObject) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var obj = (0, _Utils.isObject)(detailsObject) ? detailsObject : { domain: domain };
            try {
                browser.cookies.getAll(obj, callback);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getCookiesFF');
            }
        }
    }, {
        key: 'setCookies',
        value: function setCookies(url, domain, name, value, expirationDate, callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (!expirationDate) {
                    expirationDate = new Date().getTime() + 60 * 60 * 24 * 365;
                }

                if (!callback) {
                    callback = function callback() {
                        if (browser.runtime.lastError) {
                            tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, browser.runtime.lastError.message + ' @setCookiesFF');
                        }
                    };
                }
                var c = _assign({ url: url }, domain ? { domain: domain } : {}, name ? { name: name } : {}, value ? { value: value } : {}, expirationDate ? { expirationDate: expirationDate } : {});
                browser.cookies.set(c, callback);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setCookiesFF');
            }
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.runtime.sendMessage.apply(browser.runtime, arguments);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@sendMessageFF');
            }
        }
    }, {
        key: 'tabsSendMessage',
        value: function tabsSendMessage() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.sendMessage.apply(browser.tabs, arguments);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@tabsSendMessageFF');
            }
        }
    }, {
        key: 'onMessage',
        value: function onMessage(callback, external) {
            // let tracking = ServiceFactory.get(Consts.TRACKING_SERVICE);
            try {
                if (external) browser.runtime.onMessageExternal.addListener(callback);else browser.runtime.onMessage.addListener(callback);
            } catch (e) {
                // tracking.trackStatusEvent(ERROR_TRACK_EVENT, e.message, '@onMessageFF');
            }
        }
    }, {
        key: 'registerIdleListener',
        value: function registerIdleListener(idle_time) {
            if (this._permissions.idle) {
                browser.idle.setDetectionInterval(idle_time);
                browser.idle.onStateChanged.addListener(function (newState) {
                    if (newState == 'active') {
                        _EventsService2.default.trigger('IDLE_IS_ACTIVE');
                    }
                });
            }
        }
    }, {
        key: 'uninstall',
        value: function uninstall(callback) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (this._permissions.management) {
                    _EventsService2.default.trigger(Consts.BROWSER_UNINSTALL_EVENT);
                    browser.management.uninstallSelf({ showConfirmDialog: true }, callback);
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@uninstallFF');
            }
        }
    }, {
        key: 'getBrowserVer',
        value: function getBrowserVer() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return (/Firefox\/([0-9.]+)/.exec(navigator.userAgent)[1]
                );
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getBrowserVerFF');
            }
        }
    }, {
        key: 'getExtManifest',
        value: function getExtManifest() {
            return this._manifest;
        }
    }, {
        key: 'checkIfNewTabIsTaken',
        value: function checkIfNewTabIsTaken() {
            return this.isNewTabTaken;
        }
    }, {
        key: 'checkIfDefaultSearchIsTaken',
        value: function checkIfDefaultSearchIsTaken() {
            return this.isDefaultSearchTaken;
        }
    }, {
        key: 'checkIfHomePageIsTaken',
        value: function checkIfHomePageIsTaken() {
            return this.isHomePageTaken;
        }
    }, {
        key: 'setBrowserActionEnable',
        value: function setBrowserActionEnable(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.browserAction.enable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionEnableFF');
            }
        }
    }, {
        key: 'setBrowserActionDisable',
        value: function setBrowserActionDisable(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.browserAction.disable(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionDisableFF');
            }
        }
    }, {
        key: 'setBrowserActionPopUp',
        value: function setBrowserActionPopUp(html, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var htmlReplacer = (0, _Utils.isFalsy)(html) ? '' : html;
            try {
                browser.browserAction.setPopup({
                    popup: htmlReplacer,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionPopUpFF');
            }
        }
    }, {
        key: 'setBrowserActionBadgeBackgroundColor',
        value: function setBrowserActionBadgeBackgroundColor(color, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.browserAction.setBadgeBackgroundColor({
                    color: color,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeBackgroundColorFF');
            }
        }
    }, {
        key: 'setBrowserActionBadgeText',
        value: function setBrowserActionBadgeText(text, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.browserAction.setBadgeText({
                    text: text,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionBadgeTextFF');
            }
        }
    }, {
        key: 'setBrowserActionIcon',
        value: function setBrowserActionIcon(path, tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.browserAction.setIcon({
                    path: path,
                    tabId: tabId
                });
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@setBrowserActionIconFF');
            }
        }
    }, {
        key: 'getTranslation',
        value: function getTranslation(msg) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.i18n.getMessage(msg);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getTranslationFF');
                return msg;
            }
        }
    }, {
        key: 'getBrowserUILang',
        value: function getBrowserUILang() {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.i18n.getUILanguage();
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getBrowserUILangFF');
            }
        }
    }, {
        key: 'getTranslationOnlyIfExist',
        value: function getTranslationOnlyIfExist(msg, active) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            var activeN = false;
            if ((0, _Utils.isTrue)(active)) {
                activeN = true;
            }
            var msg_trans = msg;
            if (activeN && (0, _Utils.isStr)(msg_trans)) {
                msg_trans = msg_trans.replace(/[^a-zA-Z0-9]+/g, '_');
            }
            if (activeN && msg_trans != undefined && this.getTranslation(msg_trans) != '') {
                return this.getTranslation(msg_trans);
            } else {
                return msg;
            }
        }

        //promise return topSites

    }, {
        key: 'getTopSites',
        value: function getTopSites() {
            return new Promise(function (resolve, reject) {
                browser.topSites.get(function (res) {
                    resolve(res);
                });
            });
        }

        //getScreenshot take screenshot of the visible tab and return a b64 image

    }, {
        key: 'getScreenshot',
        value: function getScreenshot(format, quality) {
            return new Promise(function (resolve, reject) {
                browser.tabs.captureVisibleTab(null, {
                    format: format,
                    quality: quality
                }, function (image) {
                    resolve(image);
                });
            });
        }

        //getCurrentVisibleTab in order to ensure we catch the right tab

    }, {
        key: 'getCurrentVisibleTab',
        value: function getCurrentVisibleTab(windowInfo) {
            return new Promise(function (resolve, reject) {
                browser.tabs.query({
                    active: true,
                    windowId: windowInfo.id
                }, function (tabs) {
                    resolve(tabs[0]);
                });
            });
        }

        //getLastFocusedWindow in order to ensure we catch the right window

    }, {
        key: 'getLastFocusedWindow',
        value: function getLastFocusedWindow() {
            return new Promise(function (resolve, reject) {
                browser.windows.getLastFocused(null, function (windowInfo) {
                    resolve(windowInfo);
                });
            });
        }
    }, {
        key: 'openNewWindow',
        value: function openNewWindow(settings) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) == 'object') {
                    browser.windows.create(settings);
                }
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@openNewWindowFF');
            }
        }
    }, {
        key: 'connectExternalFile',
        value: function connectExternalFile(fileName) {
            return browser.runtime.connect({ name: fileName });
        }
    }, {
        key: 'onBeforeRedirect',
        value: function onBeforeRedirect(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            browser.webRequest.onBeforeRedirect.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'tabsOnUpdated',
        value: function tabsOnUpdated(cb) {
            if (typeof cb !== 'function') return;
            browser.tabs.onUpdated.addListener(cb);
        }
    }, {
        key: 'tabsOnRemoved',
        value: function tabsOnRemoved(cb) {
            if (typeof cb !== 'function') return;
            browser.tabs.onRemoved.addListener(cb);
        }
    }, {
        key: 'tabsOnCreated',
        value: function tabsOnCreated(cb) {
            if (typeof cb !== 'function') return;
            browser.tabs.onCreated.addListener(cb);
        }
    }, {
        key: 'tabsOnActivated',
        value: function tabsOnActivated(cb) {
            if (typeof cb !== 'function') return;
            browser.tabs.onActivated.addListener(cb);
        }
    }, {
        key: 'tabsExecuteScript',
        value: function tabsExecuteScript(tabId, details, cb) {
            if (tabId) browser.tabs.executeScript(tabId, details, cb);else browser.tabs.executeScript(details, cb);
        }
    }, {
        key: 'tabsInsertCSS',
        value: function tabsInsertCSS(tabId, details, cb) {
            if (typeof cb !== 'function') return;
            if (tabId) browser.tabs.insertCSS(tabId, details, cb);else browser.tabs.insertCSS(details, cb);
        }
    }, {
        key: 'tabsReload',
        value: function tabsReload(tabId) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.tabs.reload(tabId);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsReloadFF');
            }
        }
    }, {
        key: 'onBeforeRequest',
        value: function onBeforeRequest(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            browser.webRequest.onBeforeRequest.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'onCompleted',
        value: function onCompleted(cb, urls, extraInfoSpec) {
            if (typeof cb !== 'function') return;
            var internalUrls = urls || { urls: ['<all_urls>'] };
            var internalExtraInfoSpec = extraInfoSpec || [];
            browser.webRequest.onCompleted.addListener(cb, internalUrls, internalExtraInfoSpec);
        }
    }, {
        key: 'getBrowserFlavor',
        value: function getBrowserFlavor() {
            return this.browserFlavor;
        }
    }, {
        key: 'getLocalUrl',
        value: function getLocalUrl(localFile) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.runtime.getURL(localFile);
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getLocalUrlFF');
            }
        }
    }, {
        key: 'getManifestSearchData',
        value: function getManifestSearchData(key) {
            if (!key) return false;

            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);

            var manifest = this._manifest;
            if (!manifest) return false;
            try {
                var url = false;
                if ((0, _Utils.isNodeExistInObject)(manifest, ['chrome_settings_overrides', 'search_provider', 'search_url'])) {
                    url = manifest['chrome_settings_overrides']['search_provider']['search_url'];
                }
                if (!url) return false;
                var a = document.createElement('a');
                a.href = url;
                var value = a[key];
                if (value && value !== '') {
                    return value;
                }
                return false;
            } catch (e) {
                tracking.trackStatusEvent(_Consts.ERROR_TRACK_EVENT, e.message, '@getManifestSearchDomainFF');
                return false;
            }
        }
    }, {
        key: 'tabsQuery',
        value: function tabsQuery(query, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (!query || !cb || typeof cb !== 'function') return;
                browser.tabs.query(query, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@tabsQueryFF');
            }
        }
    }, {
        key: 'windowsGetAll',
        value: function windowsGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                browser.windows.getAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@windowsGetAllFF');
            }
        }
    }, {
        key: 'managementGetAll',
        value: function managementGetAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                browser.management.getAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementGetAllFF');
            }
        }
    }, {
        key: 'managementOnInstalled',
        value: function managementOnInstalled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                browser.management.onInstalled.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnInstalledFF');
            }
        }
    }, {
        key: 'managementOnEnabled',
        value: function managementOnEnabled(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                if (typeof cb !== 'function') return;
                browser.management.onEnabled.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementOnEnabledFF');
            }
        }
    }, {
        key: 'managementSetEnabled',
        value: function managementSetEnabled(id, enabled, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.management.setEnabled(id, enabled, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@managementSetEnabledFF');
            }
        }
    }, {
        key: 'downloadsOnCreated',
        value: function downloadsOnCreated(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.downloads.onCreated.addListener(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsOnCreatedFF');
            }
        }
    }, {
        key: 'downloadsCancel',
        value: function downloadsCancel(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.downloads.cancel(downloadId, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsCancelFF');
            }
        }
    }, {
        key: 'downloadsRemoveFile',
        value: function downloadsRemoveFile(downloadId, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                browser.downloads.removeFile(downloadId, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@downloadsRemoveFileFF');
            }
        }
    }, {
        key: 'contextMenusCreate',
        value: function contextMenusCreate(properties, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.contextMenus.create(properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenuCreateFF');
            }
        }
    }, {
        key: 'contextMenusUpdate',
        value: function contextMenusUpdate(id, properties, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.contextMenus.create(id, properties, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusUpdateFF');
            }
        }
    }, {
        key: 'contextMenusRemove',
        value: function contextMenusRemove(id, cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.contextMenus.create(id, cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemoveFF');
            }
        }
    }, {
        key: 'contextMenusRemoveAll',
        value: function contextMenusRemoveAll(cb) {
            var tracking = _ServiceFactory2.default.get(Consts.TRACKING_SERVICE);
            try {
                return browser.contextMenus.removeAll(cb);
            } catch (e) {
                tracking.trackStatusEvent(Consts.ERROR_TRACK_EVENT, e.message, '@contextMenusRemoveAllFF');
            }
        }
    }]);

    return FirefoxService;
}();

exports.default = FirefoxService;

/***/ })
/******/ ]);