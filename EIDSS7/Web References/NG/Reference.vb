'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace NG
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_IEIDSSService", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class EIDSSService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getSPListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private executeSPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataWithStructuredParamsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EncryptDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InitialHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.EIDSS.My.MySettings.Default.EIDSS_NG_EIDSSService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getSPListCompleted As getSPListCompletedEventHandler
        
        '''<remarks/>
        Public Event executeSPCompleted As executeSPCompletedEventHandler
        
        '''<remarks/>
        Public Event LogInCompleted As LogInCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataCompleted As GetDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataWithStructuredParamsCompleted As GetDataWithStructuredParamsCompletedEventHandler
        
        '''<remarks/>
        Public Event EncryptDataCompleted As EncryptDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InitialHashCompleted As InitialHashCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/getSPList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSPList(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sForWhichModule As String) As <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")> String()
            Dim results() As Object = Me.Invoke("getSPList", New Object() {sForWhichModule})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSPListAsync(ByVal sForWhichModule As String)
            Me.getSPListAsync(sForWhichModule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSPListAsync(ByVal sForWhichModule As String, ByVal userState As Object)
            If (Me.getSPListOperationCompleted Is Nothing) Then
                Me.getSPListOperationCompleted = AddressOf Me.OngetSPListOperationCompleted
            End If
            Me.InvokeAsync("getSPList", New Object() {sForWhichModule}, Me.getSPListOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSPListOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSPListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSPListCompleted(Me, New getSPListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/executeSP", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function executeSP(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sSPName As String, ByVal sType As CommandType, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal sTypeSpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sSPVal As String, ByVal bIsSelect As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal bIsSelectSpecified As Boolean, ByVal bValuesWithParams As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal bValuesWithParamsSpecified As Boolean, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")> ByVal result() As Object) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> System.Data.DataSet
            Dim results() As Object = Me.Invoke("executeSP", New Object() {sCountryCode, sSPName, sType, sTypeSpecified, sSPVal, bIsSelect, bIsSelectSpecified, bValuesWithParams, bValuesWithParamsSpecified, result})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub executeSPAsync(ByVal sCountryCode As String, ByVal sSPName As String, ByVal sType As CommandType, ByVal sTypeSpecified As Boolean, ByVal sSPVal As String, ByVal bIsSelect As Boolean, ByVal bIsSelectSpecified As Boolean, ByVal bValuesWithParams As Boolean, ByVal bValuesWithParamsSpecified As Boolean, ByVal result() As Object)
            Me.executeSPAsync(sCountryCode, sSPName, sType, sTypeSpecified, sSPVal, bIsSelect, bIsSelectSpecified, bValuesWithParams, bValuesWithParamsSpecified, result, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub executeSPAsync(ByVal sCountryCode As String, ByVal sSPName As String, ByVal sType As CommandType, ByVal sTypeSpecified As Boolean, ByVal sSPVal As String, ByVal bIsSelect As Boolean, ByVal bIsSelectSpecified As Boolean, ByVal bValuesWithParams As Boolean, ByVal bValuesWithParamsSpecified As Boolean, ByVal result() As Object, ByVal userState As Object)
            If (Me.executeSPOperationCompleted Is Nothing) Then
                Me.executeSPOperationCompleted = AddressOf Me.OnexecuteSPOperationCompleted
            End If
            Me.InvokeAsync("executeSP", New Object() {sCountryCode, sSPName, sType, sTypeSpecified, sSPVal, bIsSelect, bIsSelectSpecified, bValuesWithParams, bValuesWithParamsSpecified, result}, Me.executeSPOperationCompleted, userState)
        End Sub
        
        Private Sub OnexecuteSPOperationCompleted(ByVal arg As Object)
            If (Not (Me.executeSPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent executeSPCompleted(Me, New executeSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/LogIn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub LogIn(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organization As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal userName As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal password As String, ByRef LogInResult As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef LogInResultSpecified As Boolean, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef ds As System.Data.DataSet)
            Dim results() As Object = Me.Invoke("LogIn", New Object() {sCountryCode, organization, userName, password})
            LogInResult = CType(results(0),Integer)
            LogInResultSpecified = CType(results(1),Boolean)
            ds = CType(results(2),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogInAsync(ByVal sCountryCode As String, ByVal organization As String, ByVal userName As String, ByVal password As String)
            Me.LogInAsync(sCountryCode, organization, userName, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogInAsync(ByVal sCountryCode As String, ByVal organization As String, ByVal userName As String, ByVal password As String, ByVal userState As Object)
            If (Me.LogInOperationCompleted Is Nothing) Then
                Me.LogInOperationCompleted = AddressOf Me.OnLogInOperationCompleted
            End If
            Me.InvokeAsync("LogIn", New Object() {sCountryCode, organization, userName, password}, Me.LogInOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogInOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogInCompleted(Me, New LogInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/ChangePassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ChangePassword(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sSPVal As String, ByRef ChangePasswordResult As Integer, <System.Xml.Serialization.XmlIgnoreAttribute()> ByRef ChangePasswordResultSpecified As Boolean)
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {sCountryCode, sSPVal})
            ChangePasswordResult = CType(results(0),Integer)
            ChangePasswordResultSpecified = CType(results(1),Boolean)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal sCountryCode As String, ByVal sSPVal As String)
            Me.ChangePasswordAsync(sCountryCode, sSPVal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal sCountryCode As String, ByVal sSPVal As String, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {sCountryCode, sSPVal}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/GetData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetData(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sDataFor As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sSPVal As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> TupleOfDataSetArrayOfanyTypeKn1ruZ1_P
            Dim results() As Object = Me.Invoke("GetData", New Object() {sCountryCode, sDataFor, sSPVal})
            Return CType(results(0),TupleOfDataSetArrayOfanyTypeKn1ruZ1_P)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataAsync(ByVal sCountryCode As String, ByVal sDataFor As String, ByVal sSPVal As String)
            Me.GetDataAsync(sCountryCode, sDataFor, sSPVal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataAsync(ByVal sCountryCode As String, ByVal sDataFor As String, ByVal sSPVal As String, ByVal userState As Object)
            If (Me.GetDataOperationCompleted Is Nothing) Then
                Me.GetDataOperationCompleted = AddressOf Me.OnGetDataOperationCompleted
            End If
            Me.InvokeAsync("GetData", New Object() {sCountryCode, sDataFor, sSPVal}, Me.GetDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataCompleted(Me, New GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/GetDataWithStructuredParams", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataWithStructuredParams(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sDataFor As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sSPVal As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal structuredTables As System.Data.DataSet) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> TupleOfDataSetArrayOfanyTypeKn1ruZ1_P
            Dim results() As Object = Me.Invoke("GetDataWithStructuredParams", New Object() {sCountryCode, sDataFor, sSPVal, structuredTables})
            Return CType(results(0),TupleOfDataSetArrayOfanyTypeKn1ruZ1_P)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataWithStructuredParamsAsync(ByVal sCountryCode As String, ByVal sDataFor As String, ByVal sSPVal As String, ByVal structuredTables As System.Data.DataSet)
            Me.GetDataWithStructuredParamsAsync(sCountryCode, sDataFor, sSPVal, structuredTables, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataWithStructuredParamsAsync(ByVal sCountryCode As String, ByVal sDataFor As String, ByVal sSPVal As String, ByVal structuredTables As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetDataWithStructuredParamsOperationCompleted Is Nothing) Then
                Me.GetDataWithStructuredParamsOperationCompleted = AddressOf Me.OnGetDataWithStructuredParamsOperationCompleted
            End If
            Me.InvokeAsync("GetDataWithStructuredParams", New Object() {sCountryCode, sDataFor, sSPVal, structuredTables}, Me.GetDataWithStructuredParamsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataWithStructuredParamsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataWithStructuredParamsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataWithStructuredParamsCompleted(Me, New GetDataWithStructuredParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/EncryptData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EncryptData(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sData As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> Object
            Dim results() As Object = Me.Invoke("EncryptData", New Object() {sCountryCode, sData})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EncryptDataAsync(ByVal sCountryCode As String, ByVal sData As String)
            Me.EncryptDataAsync(sCountryCode, sData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EncryptDataAsync(ByVal sCountryCode As String, ByVal sData As String, ByVal userState As Object)
            If (Me.EncryptDataOperationCompleted Is Nothing) Then
                Me.EncryptDataOperationCompleted = AddressOf Me.OnEncryptDataOperationCompleted
            End If
            Me.InvokeAsync("EncryptData", New Object() {sCountryCode, sData}, Me.EncryptDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnEncryptDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.EncryptDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EncryptDataCompleted(Me, New EncryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IEIDSSService/InitialHash", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InitialHash(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal sCountryCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> Object
            Dim results() As Object = Me.Invoke("InitialHash", New Object() {sCountryCode, password})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InitialHashAsync(ByVal sCountryCode As String, ByVal password As String)
            Me.InitialHashAsync(sCountryCode, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InitialHashAsync(ByVal sCountryCode As String, ByVal password As String, ByVal userState As Object)
            If (Me.InitialHashOperationCompleted Is Nothing) Then
                Me.InitialHashOperationCompleted = AddressOf Me.OnInitialHashOperationCompleted
            End If
            Me.InvokeAsync("InitialHash", New Object() {sCountryCode, password}, Me.InitialHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnInitialHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.InitialHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InitialHashCompleted(Me, New InitialHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/System.Data")>  _
    Public Enum CommandType
        
        '''<remarks/>
        Text
        
        '''<remarks/>
        StoredProcedure
        
        '''<remarks/>
        TableDirect
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://schemas.datacontract.org/2004/07/System")>  _
    Partial Public Class TupleOfDataSetArrayOfanyTypeKn1ruZ1_P
        
        Private m_Item1Field As System.Data.DataSet
        
        Private m_Item2Field() As Object
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property m_Item1() As System.Data.DataSet
            Get
                Return Me.m_Item1Field
            End Get
            Set
                Me.m_Item1Field = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")>  _
        Public Property m_Item2() As Object()
            Get
                Return Me.m_Item2Field
            End Get
            Set
                Me.m_Item2Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getSPListCompletedEventHandler(ByVal sender As Object, ByVal e As getSPListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSPListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub executeSPCompletedEventHandler(ByVal sender As Object, ByVal e As executeSPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class executeSPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub LogInCompletedEventHandler(ByVal sender As Object, ByVal e As LogInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property LogInResult() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property LogInResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property ChangePasswordResult() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ChangePasswordResultSpecified() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TupleOfDataSetArrayOfanyTypeKn1ruZ1_P
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TupleOfDataSetArrayOfanyTypeKn1ruZ1_P)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetDataWithStructuredParamsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataWithStructuredParamsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataWithStructuredParamsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TupleOfDataSetArrayOfanyTypeKn1ruZ1_P
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TupleOfDataSetArrayOfanyTypeKn1ruZ1_P)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub EncryptDataCompletedEventHandler(ByVal sender As Object, ByVal e As EncryptDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EncryptDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub InitialHashCompletedEventHandler(ByVal sender As Object, ByVal e As InitialHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InitialHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
End Namespace
